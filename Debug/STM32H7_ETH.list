
STM32H7_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f464  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bbc  0800f704  0800f704  0001f704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080122c0  080122c0  000222c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080122c4  080122c4  000222c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  24000000  080122c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00007ccc  2400008c  08012354  0003008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24007d58  08012354  00037d58  2**0
                  ALLOC
  8 .lwip_sec     00040200  30000000  08012354  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300ba  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001d3ff  00000000  00000000  000300fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004f3f  00000000  00000000  0004d4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000013b0  00000000  00000000  00052440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000f95  00000000  00000000  000537f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00041afa  00000000  00000000  00054785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00023e59  00000000  00000000  0009627f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001676b1  00000000  00000000  000ba0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000056f0  00000000  00000000  0022178c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000047  00000000  00000000  00226e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400008c 	.word	0x2400008c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f6ec 	.word	0x0800f6ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000090 	.word	0x24000090
 80002dc:	0800f6ec 	.word	0x0800f6ec

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000386:	4b38      	ldr	r3, [pc, #224]	; (8000468 <main+0xe8>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800038e:	2b00      	cmp	r3, #0
 8000390:	d11b      	bne.n	80003ca <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000392:	f3bf 8f4f 	dsb	sy
}
 8000396:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000398:	f3bf 8f6f 	isb	sy
}
 800039c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800039e:	4b32      	ldr	r3, [pc, #200]	; (8000468 <main+0xe8>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003a6:	f3bf 8f4f 	dsb	sy
}
 80003aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003ac:	f3bf 8f6f 	isb	sy
}
 80003b0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b2:	4b2d      	ldr	r3, [pc, #180]	; (8000468 <main+0xe8>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a2c      	ldr	r2, [pc, #176]	; (8000468 <main+0xe8>)
 80003b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003be:	f3bf 8f4f 	dsb	sy
}
 80003c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c4:	f3bf 8f6f 	isb	sy
}
 80003c8:	e000      	b.n	80003cc <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ca:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003cc:	4b26      	ldr	r3, [pc, #152]	; (8000468 <main+0xe8>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d138      	bne.n	800044a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003d8:	4b23      	ldr	r3, [pc, #140]	; (8000468 <main+0xe8>)
 80003da:	2200      	movs	r2, #0
 80003dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e0:	f3bf 8f4f 	dsb	sy
}
 80003e4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003e6:	4b20      	ldr	r3, [pc, #128]	; (8000468 <main+0xe8>)
 80003e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003ec:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	0b5b      	lsrs	r3, r3, #13
 80003f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003f6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	08db      	lsrs	r3, r3, #3
 80003fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000400:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	015a      	lsls	r2, r3, #5
 8000406:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800040a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000410:	4915      	ldr	r1, [pc, #84]	; (8000468 <main+0xe8>)
 8000412:	4313      	orrs	r3, r2
 8000414:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	1e5a      	subs	r2, r3, #1
 800041c:	607a      	str	r2, [r7, #4]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d1ef      	bne.n	8000402 <main+0x82>
    } while(sets-- != 0U);
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	1e5a      	subs	r2, r3, #1
 8000426:	60ba      	str	r2, [r7, #8]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d1e5      	bne.n	80003f8 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800042c:	f3bf 8f4f 	dsb	sy
}
 8000430:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000432:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <main+0xe8>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a0c      	ldr	r2, [pc, #48]	; (8000468 <main+0xe8>)
 8000438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800043c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800043e:	f3bf 8f4f 	dsb	sy
}
 8000442:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000444:	f3bf 8f6f 	isb	sy
}
 8000448:	e000      	b.n	800044c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 fd0a 	bl	8000e64 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000450:	f000 f99a 	bl	8000788 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000454:	f000 f80a 	bl	800046c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000458:	f000 f896 	bl	8000588 <MX_GPIO_Init>
  MX_LWIP_Init();
 800045c:	f003 fe0a 	bl	8004074 <MX_LWIP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000460:	f003 ff54 	bl	800430c <MX_LWIP_Process>
 8000464:	e7fc      	b.n	8000460 <main+0xe0>
 8000466:	bf00      	nop
 8000468:	e000ed00 	.word	0xe000ed00

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b09e      	sub	sp, #120	; 0x78
 8000470:	af00      	add	r7, sp, #0
	__HAL_RCC_D2SRAM3_CLK_ENABLE();
 8000472:	4b42      	ldr	r3, [pc, #264]	; (800057c <SystemClock_Config+0x110>)
 8000474:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000478:	4a40      	ldr	r2, [pc, #256]	; (800057c <SystemClock_Config+0x110>)
 800047a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800047e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000482:	4b3e      	ldr	r3, [pc, #248]	; (800057c <SystemClock_Config+0x110>)
 8000484:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000488:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	68bb      	ldr	r3, [r7, #8]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000494:	224c      	movs	r2, #76	; 0x4c
 8000496:	2100      	movs	r1, #0
 8000498:	4618      	mov	r0, r3
 800049a:	f00e fa7c 	bl	800e996 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049e:	f107 030c 	add.w	r3, r7, #12
 80004a2:	2220      	movs	r2, #32
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f00e fa75 	bl	800e996 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004ac:	2002      	movs	r0, #2
 80004ae:	f002 fded 	bl	800308c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	4b32      	ldr	r3, [pc, #200]	; (8000580 <SystemClock_Config+0x114>)
 80004b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ba:	4a31      	ldr	r2, [pc, #196]	; (8000580 <SystemClock_Config+0x114>)
 80004bc:	f023 0301 	bic.w	r3, r3, #1
 80004c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004c2:	4b2f      	ldr	r3, [pc, #188]	; (8000580 <SystemClock_Config+0x114>)
 80004c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	4b2d      	ldr	r3, [pc, #180]	; (8000584 <SystemClock_Config+0x118>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a2c      	ldr	r2, [pc, #176]	; (8000584 <SystemClock_Config+0x118>)
 80004d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <SystemClock_Config+0x118>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004e4:	bf00      	nop
 80004e6:	4b27      	ldr	r3, [pc, #156]	; (8000584 <SystemClock_Config+0x118>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004f2:	d1f8      	bne.n	80004e6 <SystemClock_Config+0x7a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 80004f4:	2310      	movs	r3, #16
 80004f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80004fc:	2320      	movs	r3, #32
 80004fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000500:	2302      	movs	r3, #2
 8000502:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000504:	2301      	movs	r3, #1
 8000506:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000508:	2301      	movs	r3, #1
 800050a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 200;
 800050c:	23c8      	movs	r3, #200	; 0xc8
 800050e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000510:	2302      	movs	r3, #2
 8000512:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000514:	2302      	movs	r3, #2
 8000516:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000518:	2302      	movs	r3, #2
 800051a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800051c:	2308      	movs	r3, #8
 800051e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000520:	2300      	movs	r3, #0
 8000522:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800052c:	4618      	mov	r0, r3
 800052e:	f002 fde7 	bl	8003100 <HAL_RCC_OscConfig>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000538:	f000 f964 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053c:	233f      	movs	r3, #63	; 0x3f
 800053e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000540:	2303      	movs	r3, #3
 8000542:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8000548:	2309      	movs	r3, #9
 800054a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800054c:	2340      	movs	r3, #64	; 0x40
 800054e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000550:	2340      	movs	r3, #64	; 0x40
 8000552:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800055a:	2340      	movs	r3, #64	; 0x40
 800055c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	2101      	movs	r1, #1
 8000564:	4618      	mov	r0, r3
 8000566:	f003 fa25 	bl	80039b4 <HAL_RCC_ClockConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000570:	f000 f948 	bl	8000804 <Error_Handler>
  }
}
 8000574:	bf00      	nop
 8000576:	3778      	adds	r7, #120	; 0x78
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	58024400 	.word	0x58024400
 8000580:	58000400 	.word	0x58000400
 8000584:	58024800 	.word	0x58024800

08000588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08c      	sub	sp, #48	; 0x30
 800058c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	4b73      	ldr	r3, [pc, #460]	; (800076c <MX_GPIO_Init+0x1e4>)
 80005a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a4:	4a71      	ldr	r2, [pc, #452]	; (800076c <MX_GPIO_Init+0x1e4>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ae:	4b6f      	ldr	r3, [pc, #444]	; (800076c <MX_GPIO_Init+0x1e4>)
 80005b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	61bb      	str	r3, [r7, #24]
 80005ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005bc:	4b6b      	ldr	r3, [pc, #428]	; (800076c <MX_GPIO_Init+0x1e4>)
 80005be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c2:	4a6a      	ldr	r2, [pc, #424]	; (800076c <MX_GPIO_Init+0x1e4>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005cc:	4b67      	ldr	r3, [pc, #412]	; (800076c <MX_GPIO_Init+0x1e4>)
 80005ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b64      	ldr	r3, [pc, #400]	; (800076c <MX_GPIO_Init+0x1e4>)
 80005dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e0:	4a62      	ldr	r2, [pc, #392]	; (800076c <MX_GPIO_Init+0x1e4>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ea:	4b60      	ldr	r3, [pc, #384]	; (800076c <MX_GPIO_Init+0x1e4>)
 80005ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	4b5c      	ldr	r3, [pc, #368]	; (800076c <MX_GPIO_Init+0x1e4>)
 80005fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005fe:	4a5b      	ldr	r2, [pc, #364]	; (800076c <MX_GPIO_Init+0x1e4>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000608:	4b58      	ldr	r3, [pc, #352]	; (800076c <MX_GPIO_Init+0x1e4>)
 800060a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000616:	4b55      	ldr	r3, [pc, #340]	; (800076c <MX_GPIO_Init+0x1e4>)
 8000618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061c:	4a53      	ldr	r2, [pc, #332]	; (800076c <MX_GPIO_Init+0x1e4>)
 800061e:	f043 0308 	orr.w	r3, r3, #8
 8000622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000626:	4b51      	ldr	r3, [pc, #324]	; (800076c <MX_GPIO_Init+0x1e4>)
 8000628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062c:	f003 0308 	and.w	r3, r3, #8
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000634:	4b4d      	ldr	r3, [pc, #308]	; (800076c <MX_GPIO_Init+0x1e4>)
 8000636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063a:	4a4c      	ldr	r2, [pc, #304]	; (800076c <MX_GPIO_Init+0x1e4>)
 800063c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000644:	4b49      	ldr	r3, [pc, #292]	; (800076c <MX_GPIO_Init+0x1e4>)
 8000646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	4b46      	ldr	r3, [pc, #280]	; (800076c <MX_GPIO_Init+0x1e4>)
 8000654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000658:	4a44      	ldr	r2, [pc, #272]	; (800076c <MX_GPIO_Init+0x1e4>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000662:	4b42      	ldr	r3, [pc, #264]	; (800076c <MX_GPIO_Init+0x1e4>)
 8000664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000668:	f003 0310 	and.w	r3, r3, #16
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f244 0101 	movw	r1, #16385	; 0x4001
 8000676:	483e      	ldr	r0, [pc, #248]	; (8000770 <MX_GPIO_Init+0x1e8>)
 8000678:	f002 fcee 	bl	8003058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000682:	483c      	ldr	r0, [pc, #240]	; (8000774 <MX_GPIO_Init+0x1ec>)
 8000684:	f002 fce8 	bl	8003058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2102      	movs	r1, #2
 800068c:	483a      	ldr	r0, [pc, #232]	; (8000778 <MX_GPIO_Init+0x1f0>)
 800068e:	f002 fce3 	bl	8003058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000698:	2300      	movs	r3, #0
 800069a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4619      	mov	r1, r3
 80006a6:	4835      	ldr	r0, [pc, #212]	; (800077c <MX_GPIO_Init+0x1f4>)
 80006a8:	f002 fb26 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80006ac:	f244 0301 	movw	r3, #16385	; 0x4001
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2300      	movs	r3, #0
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4619      	mov	r1, r3
 80006c4:	482a      	ldr	r0, [pc, #168]	; (8000770 <MX_GPIO_Init+0x1e8>)
 80006c6:	f002 fb17 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80006ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006dc:	2307      	movs	r3, #7
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	4823      	ldr	r0, [pc, #140]	; (8000774 <MX_GPIO_Init+0x1ec>)
 80006e8:	f002 fb06 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80006ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	4619      	mov	r1, r3
 8000704:	481b      	ldr	r0, [pc, #108]	; (8000774 <MX_GPIO_Init+0x1ec>)
 8000706:	f002 faf7 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800070a:	2380      	movs	r3, #128	; 0x80
 800070c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	4818      	ldr	r0, [pc, #96]	; (8000780 <MX_GPIO_Init+0x1f8>)
 8000720:	f002 faea 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000724:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000736:	230a      	movs	r3, #10
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <MX_GPIO_Init+0x1fc>)
 8000742:	f002 fad9 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000746:	2302      	movs	r3, #2
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	4806      	ldr	r0, [pc, #24]	; (8000778 <MX_GPIO_Init+0x1f0>)
 800075e:	f002 facb 	bl	8002cf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000762:	bf00      	nop
 8000764:	3730      	adds	r7, #48	; 0x30
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	58024400 	.word	0x58024400
 8000770:	58020400 	.word	0x58020400
 8000774:	58020c00 	.word	0x58020c00
 8000778:	58021000 	.word	0x58021000
 800077c:	58020800 	.word	0x58020800
 8000780:	58021800 	.word	0x58021800
 8000784:	58020000 	.word	0x58020000

08000788 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800079a:	f000 fd25 	bl	80011e8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800079e:	2301      	movs	r3, #1
 80007a0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MPU_Config+0x74>)
 80007a8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80007aa:	2307      	movs	r3, #7
 80007ac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80007b6:	2303      	movs	r3, #3
 80007b8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80007c6:	2301      	movs	r3, #1
 80007c8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007ca:	463b      	mov	r3, r7
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fd43 	bl	8001258 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MPU_Config+0x78>)
 80007d8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80007da:	230d      	movs	r3, #13
 80007dc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80007de:	2301      	movs	r3, #1
 80007e0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e6:	463b      	mov	r3, r7
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fd35 	bl	8001258 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007ee:	2004      	movs	r0, #4
 80007f0:	f000 fd12 	bl	8001218 <HAL_MPU_Enable>

}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	30040000 	.word	0x30040000
 8000800:	30044000 	.word	0x30044000

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_MspInit+0x30>)
 8000818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800081c:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_MspInit+0x30>)
 800081e:	f043 0302 	orr.w	r3, r3, #2
 8000822:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_MspInit+0x30>)
 8000828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800082c:	f003 0302 	and.w	r3, r3, #2
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	58024400 	.word	0x58024400

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 fb5a 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <ETH_IRQHandler+0x10>)
 800089e:	f001 f87d 	bl	800199c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	24004a8c 	.word	0x24004a8c

080008ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return 1;
 80008b0:	2301      	movs	r3, #1
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <_kill>:

int _kill(int pid, int sig)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <_kill+0x20>)
 80008c8:	2216      	movs	r2, #22
 80008ca:	601a      	str	r2, [r3, #0]
  return -1;
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	24007d48 	.word	0x24007d48

080008e0 <_exit>:

void _exit (int status)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ffe5 	bl	80008bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80008f2:	e7fe      	b.n	80008f2 <_exit+0x12>

080008f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	e00a      	b.n	800091c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000906:	f3af 8000 	nop.w
 800090a:	4601      	mov	r1, r0
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	60ba      	str	r2, [r7, #8]
 8000912:	b2ca      	uxtb	r2, r1
 8000914:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	3301      	adds	r3, #1
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	429a      	cmp	r2, r3
 8000922:	dbf0      	blt.n	8000906 <_read+0x12>
  }

  return len;
 8000924:	687b      	ldr	r3, [r7, #4]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	e009      	b.n	8000954 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	60ba      	str	r2, [r7, #8]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	3301      	adds	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697a      	ldr	r2, [r7, #20]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	429a      	cmp	r2, r3
 800095a:	dbf1      	blt.n	8000940 <_write+0x12>
  }
  return len;
 800095c:	687b      	ldr	r3, [r7, #4]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <_close>:

int _close(int file)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800098e:	605a      	str	r2, [r3, #4]
  return 0;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <_isatty>:

int _isatty(int file)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d8:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <_sbrk+0x5c>)
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <_sbrk+0x60>)
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <_sbrk+0x64>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <_sbrk+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d205      	bcs.n	8000a0c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <_sbrk+0x6c>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0a:	e009      	b.n	8000a20 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <_sbrk+0x64>)
 8000a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	371c      	adds	r7, #28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	24080000 	.word	0x24080000
 8000a30:	00000400 	.word	0x00000400
 8000a34:	240000a8 	.word	0x240000a8
 8000a38:	24007d58 	.word	0x24007d58
 8000a3c:	24007d48 	.word	0x24007d48

08000a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a44:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <SystemInit+0xe4>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4a:	4a36      	ldr	r2, [pc, #216]	; (8000b24 <SystemInit+0xe4>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a54:	4b34      	ldr	r3, [pc, #208]	; (8000b28 <SystemInit+0xe8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f003 030f 	and.w	r3, r3, #15
 8000a5c:	2b06      	cmp	r3, #6
 8000a5e:	d807      	bhi.n	8000a70 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a60:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <SystemInit+0xe8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f023 030f 	bic.w	r3, r3, #15
 8000a68:	4a2f      	ldr	r2, [pc, #188]	; (8000b28 <SystemInit+0xe8>)
 8000a6a:	f043 0307 	orr.w	r3, r3, #7
 8000a6e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a70:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <SystemInit+0xec>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <SystemInit+0xec>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a7c:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <SystemInit+0xec>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <SystemInit+0xec>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4929      	ldr	r1, [pc, #164]	; (8000b2c <SystemInit+0xec>)
 8000a88:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <SystemInit+0xf0>)
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <SystemInit+0xe8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d007      	beq.n	8000aaa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <SystemInit+0xe8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f023 030f 	bic.w	r3, r3, #15
 8000aa2:	4a21      	ldr	r2, [pc, #132]	; (8000b28 <SystemInit+0xe8>)
 8000aa4:	f043 0307 	orr.w	r3, r3, #7
 8000aa8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <SystemInit+0xec>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <SystemInit+0xec>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <SystemInit+0xec>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <SystemInit+0xec>)
 8000abe:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <SystemInit+0xf4>)
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <SystemInit+0xec>)
 8000ac4:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <SystemInit+0xf8>)
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <SystemInit+0xec>)
 8000aca:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <SystemInit+0xfc>)
 8000acc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <SystemInit+0xec>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <SystemInit+0xec>)
 8000ad6:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <SystemInit+0xfc>)
 8000ad8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <SystemInit+0xec>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <SystemInit+0xec>)
 8000ae2:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <SystemInit+0xfc>)
 8000ae4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <SystemInit+0xec>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <SystemInit+0xec>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <SystemInit+0xec>)
 8000af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <SystemInit+0xec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <SystemInit+0x100>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <SystemInit+0x104>)
 8000b04:	4013      	ands	r3, r2
 8000b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b0a:	d202      	bcs.n	8000b12 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <SystemInit+0x108>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <SystemInit+0x10c>)
 8000b14:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00
 8000b28:	52002000 	.word	0x52002000
 8000b2c:	58024400 	.word	0x58024400
 8000b30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b34:	02020200 	.word	0x02020200
 8000b38:	01ff0000 	.word	0x01ff0000
 8000b3c:	01010280 	.word	0x01010280
 8000b40:	5c001000 	.word	0x5c001000
 8000b44:	ffff0000 	.word	0xffff0000
 8000b48:	51008108 	.word	0x51008108
 8000b4c:	52004000 	.word	0x52004000

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b54:	f7ff ff74 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	; (8000b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f00d ff59 	bl	800ea34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fbfd 	bl	8000380 <main>
  bx  lr
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b88:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b90:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8000b94:	080122c8 	.word	0x080122c8
  ldr r2, =_sbss
 8000b98:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 8000b9c:	24007d58 	.word	0x24007d58

08000ba0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC3_IRQHandler>

08000ba2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00b      	beq.n	8000bca <LAN8742_RegisterBusIO+0x28>
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d007      	beq.n	8000bca <LAN8742_RegisterBusIO+0x28>
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <LAN8742_RegisterBusIO+0x28>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d102      	bne.n	8000bd0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	e014      	b.n	8000bfa <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	691a      	ldr	r2, [r3, #16]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d17c      	bne.n	8000d20 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2220      	movs	r2, #32
 8000c38:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e01c      	b.n	8000c7a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	f107 0208 	add.w	r2, r7, #8
 8000c48:	2112      	movs	r1, #18
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	4798      	blx	r3
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	da03      	bge.n	8000c5c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000c54:	f06f 0304 	mvn.w	r3, #4
 8000c58:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000c5a:	e00b      	b.n	8000c74 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	f003 031f 	and.w	r3, r3, #31
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d105      	bne.n	8000c74 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
         break;
 8000c72:	e005      	b.n	8000c80 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	3301      	adds	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2b1f      	cmp	r3, #31
 8000c7e:	d9df      	bls.n	8000c40 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b1f      	cmp	r3, #31
 8000c86:	d902      	bls.n	8000c8e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000c88:	f06f 0302 	mvn.w	r3, #2
 8000c8c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d145      	bne.n	8000d20 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	691b      	ldr	r3, [r3, #16]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	6810      	ldr	r0, [r2, #0]
 8000c9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4798      	blx	r3
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db37      	blt.n	8000d1a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	6810      	ldr	r0, [r2, #0]
 8000cb2:	f107 0208 	add.w	r2, r7, #8
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4798      	blx	r3
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db28      	blt.n	8000d12 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4798      	blx	r3
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000cca:	e01c      	b.n	8000d06 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4798      	blx	r3
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000cde:	d80e      	bhi.n	8000cfe <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	6810      	ldr	r0, [r2, #0]
 8000ce8:	f107 0208 	add.w	r2, r7, #8
 8000cec:	2100      	movs	r1, #0
 8000cee:	4798      	blx	r3
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	da07      	bge.n	8000d06 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000cf6:	f06f 0304 	mvn.w	r3, #4
 8000cfa:	613b      	str	r3, [r7, #16]
                 break;
 8000cfc:	e010      	b.n	8000d20 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000cfe:	f06f 0301 	mvn.w	r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
               break;
 8000d04:	e00c      	b.n	8000d20 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1dd      	bne.n	8000ccc <LAN8742_Init+0xc6>
 8000d10:	e006      	b.n	8000d20 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000d12:	f06f 0304 	mvn.w	r3, #4
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	e002      	b.n	8000d20 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000d1a:	f06f 0303 	mvn.w	r3, #3
 8000d1e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d112      	bne.n	8000d4c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	4798      	blx	r3
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000d30:	bf00      	nop
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4798      	blx	r3
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d44:	d9f5      	bls.n	8000d32 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000d4c:	693b      	ldr	r3, [r7, #16]
 }
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b084      	sub	sp, #16
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	6810      	ldr	r0, [r2, #0]
 8000d6a:	f107 020c 	add.w	r2, r7, #12
 8000d6e:	2101      	movs	r1, #1
 8000d70:	4798      	blx	r3
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	da02      	bge.n	8000d7e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d78:	f06f 0304 	mvn.w	r3, #4
 8000d7c:	e06e      	b.n	8000e5c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6810      	ldr	r0, [r2, #0]
 8000d86:	f107 020c 	add.w	r2, r7, #12
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	4798      	blx	r3
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	da02      	bge.n	8000d9a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d94:	f06f 0304 	mvn.w	r3, #4
 8000d98:	e060      	b.n	8000e5c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000da4:	2301      	movs	r3, #1
 8000da6:	e059      	b.n	8000e5c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	6810      	ldr	r0, [r2, #0]
 8000db0:	f107 020c 	add.w	r2, r7, #12
 8000db4:	2100      	movs	r1, #0
 8000db6:	4798      	blx	r3
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	da02      	bge.n	8000dc4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000dbe:	f06f 0304 	mvn.w	r3, #4
 8000dc2:	e04b      	b.n	8000e5c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d11b      	bne.n	8000e06 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <LAN8742_GetLinkState+0x90>
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000de2:	2302      	movs	r3, #2
 8000de4:	e03a      	b.n	8000e5c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e033      	b.n	8000e5c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	e02c      	b.n	8000e5c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e02:	2305      	movs	r3, #5
 8000e04:	e02a      	b.n	8000e5c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	6810      	ldr	r0, [r2, #0]
 8000e0e:	f107 020c 	add.w	r2, r7, #12
 8000e12:	211f      	movs	r1, #31
 8000e14:	4798      	blx	r3
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	da02      	bge.n	8000e22 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000e1c:	f06f 0304 	mvn.w	r3, #4
 8000e20:	e01c      	b.n	8000e5c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d101      	bne.n	8000e30 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000e2c:	2306      	movs	r3, #6
 8000e2e:	e015      	b.n	8000e5c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 031c 	and.w	r3, r3, #28
 8000e36:	2b18      	cmp	r3, #24
 8000e38:	d101      	bne.n	8000e3e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e00e      	b.n	8000e5c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f003 031c 	and.w	r3, r3, #28
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d101      	bne.n	8000e4c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e007      	b.n	8000e5c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 031c 	and.w	r3, r3, #28
 8000e52:	2b14      	cmp	r3, #20
 8000e54:	d101      	bne.n	8000e5a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e56:	2304      	movs	r3, #4
 8000e58:	e000      	b.n	8000e5c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e5a:	2305      	movs	r3, #5
    }				
  }
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	f000 f97c 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e70:	f002 ff56 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 8000e74:	4602      	mov	r2, r0
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_Init+0x68>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	0a1b      	lsrs	r3, r3, #8
 8000e7c:	f003 030f 	and.w	r3, r3, #15
 8000e80:	4913      	ldr	r1, [pc, #76]	; (8000ed0 <HAL_Init+0x6c>)
 8000e82:	5ccb      	ldrb	r3, [r1, r3]
 8000e84:	f003 031f 	and.w	r3, r3, #31
 8000e88:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_Init+0x68>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_Init+0x6c>)
 8000e98:	5cd3      	ldrb	r3, [r2, r3]
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea4:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <HAL_Init+0x70>)
 8000ea6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HAL_Init+0x74>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f814 	bl	8000edc <HAL_InitTick>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e002      	b.n	8000ec4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebe:	f7ff fca7 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	58024400 	.word	0x58024400
 8000ed0:	080120e4 	.word	0x080120e4
 8000ed4:	24000004 	.word	0x24000004
 8000ed8:	24000000 	.word	0x24000000

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_InitTick+0x60>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e021      	b.n	8000f34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <HAL_InitTick+0x64>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_InitTick+0x60>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f961 	bl	80011ce <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00e      	b.n	8000f34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d80a      	bhi.n	8000f32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f000 f92b 	bl	800117e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_InitTick+0x68>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2400000c 	.word	0x2400000c
 8000f40:	24000000 	.word	0x24000000
 8000f44:	24000008 	.word	0x24000008

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	2400000c 	.word	0x2400000c
 8000f6c:	240000ac 	.word	0x240000ac

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	240000ac 	.word	0x240000ac

08000f88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetREVID+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	0c1b      	lsrs	r3, r3, #16
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	5c001000 	.word	0x5c001000

08000fa0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000fb0:	4904      	ldr	r1, [pc, #16]	; (8000fc4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	58000400 	.word	0x58000400

08000fc8 <__NVIC_SetPriorityGrouping>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <__NVIC_SetPriorityGrouping+0x40>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00
 800100c:	05fa0000 	.word	0x05fa0000

08001010 <__NVIC_GetPriorityGrouping>:
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <__NVIC_EnableIRQ+0x38>)
 8001046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f7ff ff8e 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff29 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff40 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff90 	bl	80010bc <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5f 	bl	8001068 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff33 	bl	800102c <__NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffa4 	bl	8001124 <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80011ec:	f3bf 8f5f 	dmb	sy
}
 80011f0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <HAL_MPU_Disable+0x28>)
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_MPU_Disable+0x28>)
 80011f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_MPU_Disable+0x2c>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00
 8001214:	e000ed90 	.word	0xe000ed90

08001218 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001220:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <HAL_MPU_Enable+0x38>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_MPU_Enable+0x3c>)
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_MPU_Enable+0x3c>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001236:	f3bf 8f4f 	dsb	sy
}
 800123a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800123c:	f3bf 8f6f 	isb	sy
}
 8001240:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed90 	.word	0xe000ed90
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	785a      	ldrb	r2, [r3, #1]
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_MPU_ConfigRegion+0x84>)
 8001266:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d029      	beq.n	80012c4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001270:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <HAL_MPU_ConfigRegion+0x84>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7b1b      	ldrb	r3, [r3, #12]
 800127c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7adb      	ldrb	r3, [r3, #11]
 8001282:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001284:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7a9b      	ldrb	r3, [r3, #10]
 800128a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800128c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7b5b      	ldrb	r3, [r3, #13]
 8001292:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001294:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7b9b      	ldrb	r3, [r3, #14]
 800129a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800129c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7bdb      	ldrb	r3, [r3, #15]
 80012a2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7a5b      	ldrb	r3, [r3, #9]
 80012aa:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7a1b      	ldrb	r3, [r3, #8]
 80012b2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012b4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012be:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012c0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80012c2:	e005      	b.n	80012d0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_MPU_ConfigRegion+0x84>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <HAL_MPU_ConfigRegion+0x84>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed90 	.word	0xe000ed90

080012e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e0cf      	b.n	8001492 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d106      	bne.n	800130a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2223      	movs	r2, #35	; 0x23
 8001300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f003 f9bb 	bl	8004680 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b64      	ldr	r3, [pc, #400]	; (800149c <HAL_ETH_Init+0x1bc>)
 800130c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001310:	4a62      	ldr	r2, [pc, #392]	; (800149c <HAL_ETH_Init+0x1bc>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800131a:	4b60      	ldr	r3, [pc, #384]	; (800149c <HAL_ETH_Init+0x1bc>)
 800131c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7a1b      	ldrb	r3, [r3, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d103      	bne.n	8001338 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fe35 	bl	8000fa0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001336:	e003      	b.n	8001340 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001338:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800133c:	f7ff fe30 	bl	8000fa0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001340:	4b57      	ldr	r3, [pc, #348]	; (80014a0 <HAL_ETH_Init+0x1c0>)
 8001342:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800135a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800135c:	f7ff fe08 	bl	8000f70 <HAL_GetTick>
 8001360:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001362:	e011      	b.n	8001388 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001364:	f7ff fe04 	bl	8000f70 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001372:	d909      	bls.n	8001388 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2204      	movs	r2, #4
 8001378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	22e0      	movs	r2, #224	; 0xe0
 8001380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e084      	b.n	8001492 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1e4      	bne.n	8001364 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fee0 	bl	8002160 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013a0:	f002 fe38 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a3f      	ldr	r2, [pc, #252]	; (80014a4 <HAL_ETH_Init+0x1c4>)
 80013a8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ac:	0c9a      	lsrs	r2, r3, #18
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3a01      	subs	r2, #1
 80013b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f001 f8cb 	bl	8002554 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80013ca:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013da:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d009      	beq.n	80013fe <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	22e0      	movs	r2, #224	; 0xe0
 80013f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e049      	b.n	8001492 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001406:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <HAL_ETH_Init+0x1c8>)
 800140c:	4013      	ands	r3, r2
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6952      	ldr	r2, [r2, #20]
 8001412:	0051      	lsls	r1, r2, #1
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	430b      	orrs	r3, r1
 800141a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800141e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f001 f933 	bl	800268e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f001 f979 	bl	8002720 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	3305      	adds	r3, #5
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	021a      	lsls	r2, r3, #8
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	3304      	adds	r3, #4
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	3303      	adds	r3, #3
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	061a      	lsls	r2, r3, #24
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	3302      	adds	r3, #2
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	3301      	adds	r3, #1
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800146c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800147a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800147c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2210      	movs	r2, #16
 800148c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	58024400 	.word	0x58024400
 80014a0:	58000400 	.word	0x58000400
 80014a4:	431bde83 	.word	0x431bde83
 80014a8:	ffff8001 	.word	0xffff8001

080014ac <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014ba:	2b10      	cmp	r3, #16
 80014bc:	d153      	bne.n	8001566 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2223      	movs	r2, #35	; 0x23
 80014c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2204      	movs	r2, #4
 80014ca:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f9f6 	bl	80018be <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 0202 	orr.w	r2, r2, #2
 80014e0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 0201 	orr.w	r2, r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0201 	orr.w	r2, r2, #1
 8001502:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800151e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800153a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001546:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001552:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001556:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2223      	movs	r2, #35	; 0x23
 800155e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
  }
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800157e:	2b23      	cmp	r3, #35	; 0x23
 8001580:	d13f      	bne.n	8001602 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2223      	movs	r2, #35	; 0x23
 8001586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001592:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015a2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015be:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0201 	bic.w	r2, r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0202 	bic.w	r2, r2, #2
 80015f4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2210      	movs	r2, #16
 80015fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
  }
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e07f      	b.n	8001736 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800163c:	2b23      	cmp	r3, #35	; 0x23
 800163e:	d179      	bne.n	8001734 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001640:	2200      	movs	r2, #0
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f001 f8c9 	bl	80027dc <ETH_Prepare_Tx_Descriptors>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d009      	beq.n	8001664 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001656:	f043 0202 	orr.w	r2, r3, #2
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e068      	b.n	8001736 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001664:	f3bf 8f4f 	dsb	sy
}
 8001668:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3206      	adds	r2, #6
 8001672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001676:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	2b03      	cmp	r3, #3
 8001688:	d904      	bls.n	8001694 <HAL_ETH_Transmit+0x84>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	1f1a      	subs	r2, r3, #4
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3106      	adds	r1, #6
 80016a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016a8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 80016ac:	f7ff fc60 	bl	8000f70 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80016b2:	e039      	b.n	8001728 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016bc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80016c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d012      	beq.n	80016ee <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ce:	f043 0208 	orr.w	r2, r3, #8
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e0:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e023      	b.n	8001736 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d018      	beq.n	8001728 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016f6:	f7ff fc3b 	bl	8000f70 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	429a      	cmp	r2, r3
 8001704:	d302      	bcc.n	800170c <HAL_ETH_Transmit+0xfc>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10d      	bne.n	8001728 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001712:	f043 0204 	orr.w	r2, r3, #4
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001722:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e006      	b.n	8001736 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	dbc1      	blt.n	80016b4 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	e000      	b.n	8001736 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
  }
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b088      	sub	sp, #32
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175c:	f043 0201 	orr.w	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e0a5      	b.n	80018b6 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001770:	2b23      	cmp	r3, #35	; 0x23
 8001772:	d001      	beq.n	8001778 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e09e      	b.n	80018b6 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	3212      	adds	r2, #18
 8001784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001788:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800178e:	f1c3 0304 	rsb	r3, r3, #4
 8001792:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001794:	e067      	b.n	8001866 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d103      	bne.n	80017c6 <HAL_ETH_ReadData+0x88>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d03d      	beq.n	8001842 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00d      	beq.n	800180c <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800181c:	461a      	mov	r2, r3
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	b29b      	uxth	r3, r3
 8001822:	f003 f90d 	bl	8004a40 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	441a      	add	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3301      	adds	r3, #1
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d902      	bls.n	8001854 <HAL_ETH_ReadData+0x116>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b04      	subs	r3, #4
 8001852:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	3212      	adds	r2, #18
 800185a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 800186a:	2b00      	cmp	r3, #0
 800186c:	db06      	blt.n	800187c <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	429a      	cmp	r2, r3
 8001874:	d202      	bcs.n	800187c <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d08c      	beq.n	8001796 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	441a      	add	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f814 	bl	80018be <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69fa      	ldr	r2, [r7, #28]
 800189a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d108      	bne.n	80018b4 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e000      	b.n	80018b6 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b088      	sub	sp, #32
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80018ca:	2301      	movs	r3, #1
 80018cc:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018d2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	3212      	adds	r2, #18
 80018da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018de:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018e4:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80018e6:	e03b      	b.n	8001960 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d112      	bne.n	8001916 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4618      	mov	r0, r3
 80018f6:	f003 f873 	bl	80049e0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	74fb      	strb	r3, [r7, #19]
 8001904:	e007      	b.n	8001916 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	461a      	mov	r2, r3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	461a      	mov	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001916:	7cfb      	ldrb	r3, [r7, #19]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d021      	beq.n	8001960 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 800191c:	f3bf 8f5f 	dmb	sy
}
 8001920:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	2b00      	cmp	r3, #0
 8001928:	d004      	beq.n	8001934 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	e003      	b.n	800193c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 800193a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	3301      	adds	r3, #1
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d902      	bls.n	800194e <ETH_UpdateDescriptor+0x90>
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	3b04      	subs	r3, #4
 800194c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	3212      	adds	r2, #18
 8001954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001958:	617b      	str	r3, [r7, #20]
      desccount--;
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	3b01      	subs	r3, #1
 800195e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <ETH_UpdateDescriptor+0xae>
 8001966:	7cfb      	ldrb	r3, [r7, #19]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1bd      	bne.n	80018e8 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	429a      	cmp	r2, r3
 8001974:	d00d      	beq.n	8001992 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800197e:	461a      	mov	r2, r3
 8001980:	2300      	movs	r3, #0
 8001982:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001992:	bf00      	nop
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ac:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80019b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b4:	2b40      	cmp	r3, #64	; 0x40
 80019b6:	d115      	bne.n	80019e4 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80019c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c8:	2b40      	cmp	r3, #64	; 0x40
 80019ca:	d10b      	bne.n	80019e4 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d4:	461a      	mov	r2, r3
 80019d6:	f248 0340 	movw	r3, #32832	; 0x8040
 80019da:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f8f6 	bl	8001bd0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ec:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d115      	bne.n	8001a24 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a00:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d10b      	bne.n	8001a24 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a14:	461a      	mov	r2, r3
 8001a16:	f248 0301 	movw	r3, #32769	; 0x8001
 8001a1a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f8cc 	bl	8001bbc <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a38:	d153      	bne.n	8001ae2 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a42:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a4e:	d148      	bne.n	8001ae2 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a56:	f043 0208 	orr.w	r2, r3, #8
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a68:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a74:	d11e      	bne.n	8001ab4 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001a82:	f241 1302 	movw	r3, #4354	; 0x1102
 8001a86:	4013      	ands	r3, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a96:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001aa2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aa6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	22e0      	movs	r2, #224	; 0xe0
 8001aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001ab2:	e013      	b.n	8001adc <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001abc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001ac0:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001ad8:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f881 	bl	8001be4 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001aea:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d104      	bne.n	8001b00 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d019      	beq.n	8001b34 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b06:	f043 0210 	orr.w	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	22e0      	movs	r2, #224	; 0xe0
 8001b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f85c 	bl	8001be4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b10      	cmp	r3, #16
 8001b42:	d10f      	bne.n	8001b64 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b4c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f84e 	bl	8001bf8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	d10f      	bne.n	8001b94 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b7c:	f003 020f 	and.w	r2, r3, #15
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f840 	bl	8001c0c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_ETH_IRQHandler+0x21c>)
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_ETH_IRQHandler+0x21c>)
 8001ba2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f839 	bl	8001c20 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	58000080 	.word	0x58000080

08001bbc <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e03e      	b.n	8001cd4 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c5e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	055b      	lsls	r3, r3, #21
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	041b      	lsls	r3, r3, #16
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f043 030c 	orr.w	r3, r3, #12
 8001c82:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001c96:	f7ff f96b 	bl	8000f70 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001c9c:	e009      	b.n	8001cb2 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001c9e:	f7ff f967 	bl	8000f70 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cac:	d901      	bls.n	8001cb2 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e010      	b.n	8001cd4 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1ed      	bne.n	8001c9e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e03c      	b.n	8001d78 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d06:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	055b      	lsls	r3, r3, #21
 8001d12:	4313      	orrs	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f023 030c 	bic.w	r3, r3, #12
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_ETH_WritePHYRegister+0xa4>)
 8001d3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001d42:	4a0f      	ldr	r2, [pc, #60]	; (8001d80 <HAL_ETH_WritePHYRegister+0xa4>)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001d4a:	f7ff f911 	bl	8000f70 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001d50:	e009      	b.n	8001d66 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001d52:	f7ff f90d 	bl	8000f70 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d60:	d901      	bls.n	8001d66 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e008      	b.n	8001d78 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ed      	bne.n	8001d52 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40028000 	.word	0x40028000

08001d84 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e1c3      	b.n	8002120 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 020c 	and.w	r2, r3, #12
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf14      	ite	ne
 8001db4:	2301      	movne	r3, #1
 8001db6:	2300      	moveq	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	bf0c      	ite	eq
 8001dde:	2301      	moveq	r3, #1
 8001de0:	2300      	movne	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bf14      	ite	ne
 8001dfa:	2301      	movne	r3, #1
 8001dfc:	2300      	moveq	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf0c      	ite	eq
 8001e14:	2301      	moveq	r3, #1
 8001e16:	2300      	movne	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	bf14      	ite	ne
 8001e2e:	2301      	movne	r3, #1
 8001e30:	2300      	moveq	r3, #0
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf14      	ite	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	2300      	moveq	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bf14      	ite	ne
 8001e7e:	2301      	movne	r3, #1
 8001e80:	2300      	moveq	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf14      	ite	ne
 8001ecc:	2301      	movne	r3, #1
 8001ece:	2300      	moveq	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bf14      	ite	ne
 8001ee6:	2301      	movne	r3, #1
 8001ee8:	2300      	moveq	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	bf14      	ite	ne
 8001f1a:	2301      	movne	r3, #1
 8001f1c:	2300      	moveq	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	bf14      	ite	ne
 8001f42:	2301      	movne	r3, #1
 8001f44:	2300      	moveq	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf14      	ite	ne
 8001f94:	2301      	movne	r3, #1
 8001f96:	2300      	moveq	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf14      	ite	ne
 8001fb0:	2301      	movne	r3, #1
 8001fb2:	2300      	moveq	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf14      	ite	ne
 8001fcc:	2301      	movne	r3, #1
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	0e5b      	lsrs	r3, r3, #25
 8001fe2:	f003 021f 	and.w	r2, r3, #31
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf14      	ite	ne
 8001ff8:	2301      	movne	r3, #1
 8001ffa:	2300      	moveq	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 020f 	and.w	r2, r3, #15
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	bf14      	ite	ne
 8002022:	2301      	movne	r3, #1
 8002024:	2300      	moveq	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf0c      	ite	eq
 800203e:	2301      	moveq	r3, #1
 8002040:	2300      	movne	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002052:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	b29a      	uxth	r2, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf14      	ite	ne
 8002078:	2301      	movne	r3, #1
 800207a:	2300      	moveq	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002092:	2b00      	cmp	r3, #0
 8002094:	bf14      	ite	ne
 8002096:	2301      	movne	r3, #1
 8002098:	2300      	moveq	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80020ac:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80020bc:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	bf14      	ite	ne
 80020f2:	2301      	movne	r3, #1
 80020f4:	2300      	moveq	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210c:	2b00      	cmp	r3, #0
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e00b      	b.n	8002158 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002146:	2b10      	cmp	r3, #16
 8002148:	d105      	bne.n	8002156 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800214a:	6839      	ldr	r1, [r7, #0]
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f85f 	bl	8002210 <ETH_SetMACConfig>

    return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e000      	b.n	8002158 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
  }
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002170:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002178:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800217a:	f001 ff4b 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 800217e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d908      	bls.n	800219a <HAL_ETH_SetMDIOClockRange+0x3a>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d804      	bhi.n	800219a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e027      	b.n	80021ea <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	4a18      	ldr	r2, [pc, #96]	; (8002200 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d908      	bls.n	80021b4 <HAL_ETH_SetMDIOClockRange+0x54>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4a17      	ldr	r2, [pc, #92]	; (8002204 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d204      	bcs.n	80021b4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e01a      	b.n	80021ea <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4a13      	ldr	r2, [pc, #76]	; (8002204 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d303      	bcc.n	80021c4 <HAL_ETH_SetMDIOClockRange+0x64>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d911      	bls.n	80021e8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4a10      	ldr	r2, [pc, #64]	; (8002208 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d908      	bls.n	80021de <HAL_ETH_SetMDIOClockRange+0x7e>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4a0f      	ldr	r2, [pc, #60]	; (800220c <HAL_ETH_SetMDIOClockRange+0xac>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d804      	bhi.n	80021de <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e005      	b.n	80021ea <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	e000      	b.n	80021ea <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80021e8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80021f4:	bf00      	nop
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	01312cff 	.word	0x01312cff
 8002200:	02160ebf 	.word	0x02160ebf
 8002204:	03938700 	.word	0x03938700
 8002208:	05f5e0ff 	.word	0x05f5e0ff
 800220c:	08f0d17f 	.word	0x08f0d17f

08002210 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002222:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	791b      	ldrb	r3, [r3, #4]
 8002228:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800222a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	7b1b      	ldrb	r3, [r3, #12]
 8002230:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002232:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	7b5b      	ldrb	r3, [r3, #13]
 8002238:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800223a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	7b9b      	ldrb	r3, [r3, #14]
 8002240:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002242:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	7bdb      	ldrb	r3, [r3, #15]
 8002248:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800224a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	7c12      	ldrb	r2, [r2, #16]
 8002250:	2a00      	cmp	r2, #0
 8002252:	d102      	bne.n	800225a <ETH_SetMACConfig+0x4a>
 8002254:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002258:	e000      	b.n	800225c <ETH_SetMACConfig+0x4c>
 800225a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800225c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	7c52      	ldrb	r2, [r2, #17]
 8002262:	2a00      	cmp	r2, #0
 8002264:	d102      	bne.n	800226c <ETH_SetMACConfig+0x5c>
 8002266:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800226a:	e000      	b.n	800226e <ETH_SetMACConfig+0x5e>
 800226c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800226e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	7c9b      	ldrb	r3, [r3, #18]
 8002274:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002276:	431a      	orrs	r2, r3
               macconf->Speed |
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800227c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002282:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	7f1b      	ldrb	r3, [r3, #28]
 8002288:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800228a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	7f5b      	ldrb	r3, [r3, #29]
 8002290:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002292:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	7f92      	ldrb	r2, [r2, #30]
 8002298:	2a00      	cmp	r2, #0
 800229a:	d102      	bne.n	80022a2 <ETH_SetMACConfig+0x92>
 800229c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a0:	e000      	b.n	80022a4 <ETH_SetMACConfig+0x94>
 80022a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80022a4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	7fdb      	ldrb	r3, [r3, #31]
 80022aa:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80022ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022b4:	2a00      	cmp	r2, #0
 80022b6:	d102      	bne.n	80022be <ETH_SetMACConfig+0xae>
 80022b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022bc:	e000      	b.n	80022c0 <ETH_SetMACConfig+0xb0>
 80022be:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80022c0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022ce:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80022d0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b56      	ldr	r3, [pc, #344]	; (800243c <ETH_SetMACConfig+0x22c>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	68f9      	ldr	r1, [r7, #12]
 80022ea:	430b      	orrs	r3, r1
 80022ec:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022fa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80022fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002304:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002306:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800230e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002310:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002318:	2a00      	cmp	r2, #0
 800231a:	d102      	bne.n	8002322 <ETH_SetMACConfig+0x112>
 800231c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002320:	e000      	b.n	8002324 <ETH_SetMACConfig+0x114>
 8002322:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002324:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4b42      	ldr	r3, [pc, #264]	; (8002440 <ETH_SetMACConfig+0x230>)
 8002336:	4013      	ands	r3, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	68f9      	ldr	r1, [r7, #12]
 800233e:	430b      	orrs	r3, r1
 8002340:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002348:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	4b3a      	ldr	r3, [pc, #232]	; (8002444 <ETH_SetMACConfig+0x234>)
 800235a:	4013      	ands	r3, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	68f9      	ldr	r1, [r7, #12]
 8002362:	430b      	orrs	r3, r1
 8002364:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800236c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002372:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800237a:	2a00      	cmp	r2, #0
 800237c:	d101      	bne.n	8002382 <ETH_SetMACConfig+0x172>
 800237e:	2280      	movs	r2, #128	; 0x80
 8002380:	e000      	b.n	8002384 <ETH_SetMACConfig+0x174>
 8002382:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002384:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800238c:	4313      	orrs	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002396:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800239a:	4013      	ands	r3, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	68f9      	ldr	r1, [r7, #12]
 80023a2:	430b      	orrs	r3, r1
 80023a4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80023ac:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80023b4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c2:	f023 0103 	bic.w	r1, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80023da:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80023f6:	2a00      	cmp	r2, #0
 80023f8:	d101      	bne.n	80023fe <ETH_SetMACConfig+0x1ee>
 80023fa:	2240      	movs	r2, #64	; 0x40
 80023fc:	e000      	b.n	8002400 <ETH_SetMACConfig+0x1f0>
 80023fe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002400:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002408:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800240a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002412:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002414:	4313      	orrs	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002420:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	430a      	orrs	r2, r1
 800242c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	00048083 	.word	0x00048083
 8002440:	c0f88000 	.word	0xc0f88000
 8002444:	fffffef0 	.word	0xfffffef0

08002448 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b38      	ldr	r3, [pc, #224]	; (8002540 <ETH_SetDMAConfig+0xf8>)
 800245e:	4013      	ands	r3, r2
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	6811      	ldr	r1, [r2, #0]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	430b      	orrs	r3, r1
 800246a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800246e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	791b      	ldrb	r3, [r3, #4]
 8002474:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800247a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	7b1b      	ldrb	r3, [r3, #12]
 8002480:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	4b2c      	ldr	r3, [pc, #176]	; (8002544 <ETH_SetDMAConfig+0xfc>)
 8002492:	4013      	ands	r3, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	68f9      	ldr	r1, [r7, #12]
 800249a:	430b      	orrs	r3, r1
 800249c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024a0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	7b5b      	ldrb	r3, [r3, #13]
 80024a6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80024bc:	4b22      	ldr	r3, [pc, #136]	; (8002548 <ETH_SetDMAConfig+0x100>)
 80024be:	4013      	ands	r3, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	68f9      	ldr	r1, [r7, #12]
 80024c6:	430b      	orrs	r3, r1
 80024c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024cc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	7d1b      	ldrb	r3, [r3, #20]
 80024d8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80024da:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	7f5b      	ldrb	r3, [r3, #29]
 80024e0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80024f2:	4b16      	ldr	r3, [pc, #88]	; (800254c <ETH_SetDMAConfig+0x104>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	68f9      	ldr	r1, [r7, #12]
 80024fc:	430b      	orrs	r3, r1
 80024fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002502:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	7f1b      	ldrb	r3, [r3, #28]
 800250a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002510:	4313      	orrs	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <ETH_SetDMAConfig+0x108>)
 8002522:	4013      	ands	r3, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	68f9      	ldr	r1, [r7, #12]
 800252a:	430b      	orrs	r3, r1
 800252c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002530:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	ffff87fd 	.word	0xffff87fd
 8002544:	ffff2ffe 	.word	0xffff2ffe
 8002548:	fffec000 	.word	0xfffec000
 800254c:	ffc0efef 	.word	0xffc0efef
 8002550:	7fc0ffff 	.word	0x7fc0ffff

08002554 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b0a4      	sub	sp, #144	; 0x90
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800255c:	2301      	movs	r3, #1
 800255e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002562:	2300      	movs	r3, #0
 8002564:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002572:	2301      	movs	r3, #1
 8002574:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002578:	2301      	movs	r3, #1
 800257a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800257e:	2301      	movs	r3, #1
 8002580:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800258a:	2301      	movs	r3, #1
 800258c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002594:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800259c:	2300      	movs	r3, #0
 800259e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80025ac:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80025b0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80025b8:	2300      	movs	r3, #0
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80025bc:	2301      	movs	r3, #1
 80025be:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80025ce:	2300      	movs	r3, #0
 80025d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80025d6:	2300      	movs	r3, #0
 80025d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80025ec:	2320      	movs	r3, #32
 80025ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80025fe:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002604:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002608:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002610:	2302      	movs	r3, #2
 8002612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002628:	2301      	movs	r3, #1
 800262a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800262e:	2300      	movs	r3, #0
 8002630:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800263c:	4619      	mov	r1, r3
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff fde6 	bl	8002210 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002644:	2301      	movs	r3, #1
 8002646:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002648:	2301      	movs	r3, #1
 800264a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800265e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002662:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002668:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800266c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002674:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800267a:	f107 0308 	add.w	r3, r7, #8
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff fee1 	bl	8002448 <ETH_SetDMAConfig>
}
 8002686:	bf00      	nop
 8002688:	3790      	adds	r7, #144	; 0x90
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800268e:	b480      	push	{r7}
 8002690:	b085      	sub	sp, #20
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	e01d      	b.n	80026d8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68d9      	ldr	r1, [r3, #12]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	440b      	add	r3, r1
 80026ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2200      	movs	r2, #0
 80026b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	3206      	adds	r2, #6
 80026ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3301      	adds	r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d9de      	bls.n	800269c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ec:	461a      	mov	r2, r3
 80026ee:	2303      	movs	r3, #3
 80026f0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002700:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002710:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	e023      	b.n	8002776 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6919      	ldr	r1, [r3, #16]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2200      	movs	r2, #0
 800274a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2200      	movs	r2, #0
 8002756:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2200      	movs	r2, #0
 800275c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2200      	movs	r2, #0
 8002762:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	3212      	adds	r2, #18
 800276c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3301      	adds	r3, #1
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b03      	cmp	r3, #3
 800277a:	d9d8      	bls.n	800272e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a2:	461a      	mov	r2, r3
 80027a4:	2303      	movs	r3, #3
 80027a6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ca:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80027dc:	b480      	push	{r7}
 80027de:	b08d      	sub	sp, #52	; 0x34
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3318      	adds	r3, #24
 80027ec:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002806:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800281a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800281e:	d007      	beq.n	8002830 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	3304      	adds	r3, #4
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002830:	2302      	movs	r3, #2
 8002832:	e259      	b.n	8002ce8 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d044      	beq.n	80028ca <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	4b75      	ldr	r3, [pc, #468]	; (8002a1c <ETH_Prepare_Tx_Descriptors+0x240>)
 8002846:	4013      	ands	r3, r2
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800284c:	431a      	orrs	r2, r3
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800286c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d027      	beq.n	80028ca <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	b29a      	uxth	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	041b      	lsls	r3, r3, #16
 8002886:	431a      	orrs	r2, r3
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	431a      	orrs	r2, r3
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80028b8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80028c8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00e      	beq.n	80028f4 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	4b51      	ldr	r3, [pc, #324]	; (8002a20 <ETH_Prepare_Tx_Descriptors+0x244>)
 80028dc:	4013      	ands	r3, r2
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	6992      	ldr	r2, [r2, #24]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	d036      	beq.n	800297a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002918:	f3bf 8f5f 	dmb	sy
}
 800291c:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292c:	3301      	adds	r3, #1
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002932:	2b03      	cmp	r3, #3
 8002934:	d902      	bls.n	800293c <ETH_Prepare_Tx_Descriptors+0x160>
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	3b04      	subs	r3, #4
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002944:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	3301      	adds	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002958:	d10f      	bne.n	800297a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002962:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002964:	f3bf 8f5f 	dmb	sy
}
 8002968:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002976:	2302      	movs	r3, #2
 8002978:	e1b6      	b.n	8002ce8 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	3301      	adds	r3, #1
 800297e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002990:	4013      	ands	r3, r2
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	6852      	ldr	r2, [r2, #4]
 8002996:	431a      	orrs	r2, r3
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <ETH_Prepare_Tx_Descriptors+0x248>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	6852      	ldr	r2, [r2, #4]
 80029c0:	0412      	lsls	r2, r2, #16
 80029c2:	431a      	orrs	r2, r3
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	e008      	b.n	80029dc <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	2200      	movs	r2, #0
 80029ce:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <ETH_Prepare_Tx_Descriptors+0x248>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	6a3a      	ldr	r2, [r7, #32]
 80029da:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d021      	beq.n	8002a2c <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	04db      	lsls	r3, r3, #19
 80029f6:	431a      	orrs	r2, r3
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	69d2      	ldr	r2, [r2, #28]
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	e02e      	b.n	8002a7a <ETH_Prepare_Tx_Descriptors+0x29e>
 8002a1c:	ffff0000 	.word	0xffff0000
 8002a20:	ffffc000 	.word	0xffffc000
 8002a24:	c000ffff 	.word	0xc000ffff
 8002a28:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	4b7b      	ldr	r3, [pc, #492]	; (8002c20 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	6852      	ldr	r2, [r2, #4]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d008      	beq.n	8002a5c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	431a      	orrs	r2, r3
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ab0:	f3bf 8f5f 	dmb	sy
}
 8002ab4:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80da 	beq.w	8002c84 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	431a      	orrs	r2, r3
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002ae2:	e0cf      	b.n	8002c84 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	3301      	adds	r3, #1
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d902      	bls.n	8002b02 <ETH_Prepare_Tx_Descriptors+0x326>
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afe:	3b04      	subs	r3, #4
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0a:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b24:	d007      	beq.n	8002b36 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d029      	beq.n	8002b8a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b42:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b48:	e019      	b.n	8002b7e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002b4a:	f3bf 8f5f 	dmb	sy
}
 8002b4e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	3301      	adds	r3, #1
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d902      	bls.n	8002b6e <ETH_Prepare_Tx_Descriptors+0x392>
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	3b04      	subs	r3, #4
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b76:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d3e1      	bcc.n	8002b4a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0ae      	b.n	8002ce8 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	6852      	ldr	r2, [r2, #4]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d012      	beq.n	8002be0 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	6852      	ldr	r2, [r2, #4]
 8002bd6:	0412      	lsls	r2, r2, #16
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	e008      	b.n	8002bf2 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	2200      	movs	r2, #0
 8002be4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	6a3a      	ldr	r2, [r7, #32]
 8002bf0:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d018      	beq.n	8002c30 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <ETH_Prepare_Tx_Descriptors+0x450>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	69d2      	ldr	r2, [r2, #28]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	60da      	str	r2, [r3, #12]
 8002c1c:	e020      	b.n	8002c60 <ETH_Prepare_Tx_Descriptors+0x484>
 8002c1e:	bf00      	nop
 8002c20:	ffff8000 	.word	0xffff8000
 8002c24:	ffffc000 	.word	0xffffc000
 8002c28:	c000ffff 	.word	0xc000ffff
 8002c2c:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	4b2f      	ldr	r3, [pc, #188]	; (8002cf4 <ETH_Prepare_Tx_Descriptors+0x518>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	6852      	ldr	r2, [r2, #4]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	3301      	adds	r3, #1
 8002c64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c66:	f3bf 8f5f 	dmb	sy
}
 8002c6a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f47f af2b 	bne.w	8002ae4 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d006      	beq.n	8002ca2 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	e005      	b.n	8002cae <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cbe:	6979      	ldr	r1, [r7, #20]
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cce:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd0:	b672      	cpsid	i
}
 8002cd2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	4413      	add	r3, r2
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002ce2:	b662      	cpsie	i
}
 8002ce4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3734      	adds	r7, #52	; 0x34
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	ffff8000 	.word	0xffff8000

08002cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	; 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d06:	4b89      	ldr	r3, [pc, #548]	; (8002f2c <HAL_GPIO_Init+0x234>)
 8002d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d0a:	e194      	b.n	8003036 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	2101      	movs	r1, #1
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8186 	beq.w	8003030 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d005      	beq.n	8002d3c <HAL_GPIO_Init+0x44>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d130      	bne.n	8002d9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d72:	2201      	movs	r2, #1
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	091b      	lsrs	r3, r3, #4
 8002d88:	f003 0201 	and.w	r2, r3, #1
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d017      	beq.n	8002dda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	2203      	movs	r2, #3
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d123      	bne.n	8002e2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	08da      	lsrs	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3208      	adds	r2, #8
 8002dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	08da      	lsrs	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3208      	adds	r2, #8
 8002e28:	69b9      	ldr	r1, [r7, #24]
 8002e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	2203      	movs	r2, #3
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 0203 	and.w	r2, r3, #3
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80e0 	beq.w	8003030 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e70:	4b2f      	ldr	r3, [pc, #188]	; (8002f30 <HAL_GPIO_Init+0x238>)
 8002e72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e76:	4a2e      	ldr	r2, [pc, #184]	; (8002f30 <HAL_GPIO_Init+0x238>)
 8002e78:	f043 0302 	orr.w	r3, r3, #2
 8002e7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e80:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <HAL_GPIO_Init+0x238>)
 8002e82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e8e:	4a29      	ldr	r2, [pc, #164]	; (8002f34 <HAL_GPIO_Init+0x23c>)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	089b      	lsrs	r3, r3, #2
 8002e94:	3302      	adds	r3, #2
 8002e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	220f      	movs	r2, #15
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a20      	ldr	r2, [pc, #128]	; (8002f38 <HAL_GPIO_Init+0x240>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d052      	beq.n	8002f60 <HAL_GPIO_Init+0x268>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a1f      	ldr	r2, [pc, #124]	; (8002f3c <HAL_GPIO_Init+0x244>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d031      	beq.n	8002f26 <HAL_GPIO_Init+0x22e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <HAL_GPIO_Init+0x248>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d02b      	beq.n	8002f22 <HAL_GPIO_Init+0x22a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a1d      	ldr	r2, [pc, #116]	; (8002f44 <HAL_GPIO_Init+0x24c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d025      	beq.n	8002f1e <HAL_GPIO_Init+0x226>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <HAL_GPIO_Init+0x250>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01f      	beq.n	8002f1a <HAL_GPIO_Init+0x222>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <HAL_GPIO_Init+0x254>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d019      	beq.n	8002f16 <HAL_GPIO_Init+0x21e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1a      	ldr	r2, [pc, #104]	; (8002f50 <HAL_GPIO_Init+0x258>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <HAL_GPIO_Init+0x21a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a19      	ldr	r2, [pc, #100]	; (8002f54 <HAL_GPIO_Init+0x25c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00d      	beq.n	8002f0e <HAL_GPIO_Init+0x216>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <HAL_GPIO_Init+0x260>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d007      	beq.n	8002f0a <HAL_GPIO_Init+0x212>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <HAL_GPIO_Init+0x264>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d101      	bne.n	8002f06 <HAL_GPIO_Init+0x20e>
 8002f02:	2309      	movs	r3, #9
 8002f04:	e02d      	b.n	8002f62 <HAL_GPIO_Init+0x26a>
 8002f06:	230a      	movs	r3, #10
 8002f08:	e02b      	b.n	8002f62 <HAL_GPIO_Init+0x26a>
 8002f0a:	2308      	movs	r3, #8
 8002f0c:	e029      	b.n	8002f62 <HAL_GPIO_Init+0x26a>
 8002f0e:	2307      	movs	r3, #7
 8002f10:	e027      	b.n	8002f62 <HAL_GPIO_Init+0x26a>
 8002f12:	2306      	movs	r3, #6
 8002f14:	e025      	b.n	8002f62 <HAL_GPIO_Init+0x26a>
 8002f16:	2305      	movs	r3, #5
 8002f18:	e023      	b.n	8002f62 <HAL_GPIO_Init+0x26a>
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	e021      	b.n	8002f62 <HAL_GPIO_Init+0x26a>
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e01f      	b.n	8002f62 <HAL_GPIO_Init+0x26a>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e01d      	b.n	8002f62 <HAL_GPIO_Init+0x26a>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e01b      	b.n	8002f62 <HAL_GPIO_Init+0x26a>
 8002f2a:	bf00      	nop
 8002f2c:	58000080 	.word	0x58000080
 8002f30:	58024400 	.word	0x58024400
 8002f34:	58000400 	.word	0x58000400
 8002f38:	58020000 	.word	0x58020000
 8002f3c:	58020400 	.word	0x58020400
 8002f40:	58020800 	.word	0x58020800
 8002f44:	58020c00 	.word	0x58020c00
 8002f48:	58021000 	.word	0x58021000
 8002f4c:	58021400 	.word	0x58021400
 8002f50:	58021800 	.word	0x58021800
 8002f54:	58021c00 	.word	0x58021c00
 8002f58:	58022000 	.word	0x58022000
 8002f5c:	58022400 	.word	0x58022400
 8002f60:	2300      	movs	r3, #0
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	f002 0203 	and.w	r2, r2, #3
 8002f68:	0092      	lsls	r2, r2, #2
 8002f6a:	4093      	lsls	r3, r2
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f72:	4938      	ldr	r1, [pc, #224]	; (8003054 <HAL_GPIO_Init+0x35c>)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	3302      	adds	r3, #2
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	3301      	adds	r3, #1
 8003034:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	fa22 f303 	lsr.w	r3, r2, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	f47f ae63 	bne.w	8002d0c <HAL_GPIO_Init+0x14>
  }
}
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	3724      	adds	r7, #36	; 0x24
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	58000400 	.word	0x58000400

08003058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	807b      	strh	r3, [r7, #2]
 8003064:	4613      	mov	r3, r2
 8003066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003068:	787b      	ldrb	r3, [r7, #1]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800306e:	887a      	ldrh	r2, [r7, #2]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003074:	e003      	b.n	800307e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003076:	887b      	ldrh	r3, [r7, #2]
 8003078:	041a      	lsls	r2, r3, #16
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	619a      	str	r2, [r3, #24]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_PWREx_ConfigSupply+0x70>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b04      	cmp	r3, #4
 800309e:	d00a      	beq.n	80030b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80030a0:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_PWREx_ConfigSupply+0x70>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d001      	beq.n	80030b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e01f      	b.n	80030f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e01d      	b.n	80030f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_PWREx_ConfigSupply+0x70>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f023 0207 	bic.w	r2, r3, #7
 80030be:	490f      	ldr	r1, [pc, #60]	; (80030fc <HAL_PWREx_ConfigSupply+0x70>)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80030c6:	f7fd ff53 	bl	8000f70 <HAL_GetTick>
 80030ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030cc:	e009      	b.n	80030e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030ce:	f7fd ff4f 	bl	8000f70 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030dc:	d901      	bls.n	80030e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e007      	b.n	80030f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_PWREx_ConfigSupply+0x70>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ee:	d1ee      	bne.n	80030ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	58024800 	.word	0x58024800

08003100 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08c      	sub	sp, #48	; 0x30
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	f000 bc48 	b.w	80039a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8088 	beq.w	8003232 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003122:	4b99      	ldr	r3, [pc, #612]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800312c:	4b96      	ldr	r3, [pc, #600]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003134:	2b10      	cmp	r3, #16
 8003136:	d007      	beq.n	8003148 <HAL_RCC_OscConfig+0x48>
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	2b18      	cmp	r3, #24
 800313c:	d111      	bne.n	8003162 <HAL_RCC_OscConfig+0x62>
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d10c      	bne.n	8003162 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	4b8f      	ldr	r3, [pc, #572]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d06d      	beq.n	8003230 <HAL_RCC_OscConfig+0x130>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d169      	bne.n	8003230 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	f000 bc21 	b.w	80039a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316a:	d106      	bne.n	800317a <HAL_RCC_OscConfig+0x7a>
 800316c:	4b86      	ldr	r3, [pc, #536]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a85      	ldr	r2, [pc, #532]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	e02e      	b.n	80031d8 <HAL_RCC_OscConfig+0xd8>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10c      	bne.n	800319c <HAL_RCC_OscConfig+0x9c>
 8003182:	4b81      	ldr	r3, [pc, #516]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a80      	ldr	r2, [pc, #512]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4b7e      	ldr	r3, [pc, #504]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7d      	ldr	r2, [pc, #500]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003194:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e01d      	b.n	80031d8 <HAL_RCC_OscConfig+0xd8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0xc0>
 80031a6:	4b78      	ldr	r3, [pc, #480]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a77      	ldr	r2, [pc, #476]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b75      	ldr	r3, [pc, #468]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a74      	ldr	r2, [pc, #464]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0xd8>
 80031c0:	4b71      	ldr	r3, [pc, #452]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a70      	ldr	r2, [pc, #448]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b6e      	ldr	r3, [pc, #440]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a6d      	ldr	r2, [pc, #436]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fd fec6 	bl	8000f70 <HAL_GetTick>
 80031e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fd fec2 	bl	8000f70 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e3d4      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031fa:	4b63      	ldr	r3, [pc, #396]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0xe8>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fd feb2 	bl	8000f70 <HAL_GetTick>
 800320c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7fd feae 	bl	8000f70 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e3c0      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003222:	4b59      	ldr	r3, [pc, #356]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x110>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80ca 	beq.w	80033d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003240:	4b51      	ldr	r3, [pc, #324]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003248:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800324a:	4b4f      	ldr	r3, [pc, #316]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <HAL_RCC_OscConfig+0x166>
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	2b18      	cmp	r3, #24
 800325a:	d156      	bne.n	800330a <HAL_RCC_OscConfig+0x20a>
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d151      	bne.n	800330a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003266:	4b48      	ldr	r3, [pc, #288]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_RCC_OscConfig+0x17e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e392      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800327e:	4b42      	ldr	r3, [pc, #264]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 0219 	bic.w	r2, r3, #25
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	493f      	ldr	r1, [pc, #252]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fd fe6e 	bl	8000f70 <HAL_GetTick>
 8003294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003298:	f7fd fe6a 	bl	8000f70 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e37c      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032aa:	4b37      	ldr	r3, [pc, #220]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b6:	f7fd fe67 	bl	8000f88 <HAL_GetREVID>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d817      	bhi.n	80032f4 <HAL_RCC_OscConfig+0x1f4>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d108      	bne.n	80032de <HAL_RCC_OscConfig+0x1de>
 80032cc:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80032d4:	4a2c      	ldr	r2, [pc, #176]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 80032d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032da:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032dc:	e07a      	b.n	80033d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	4b2a      	ldr	r3, [pc, #168]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	031b      	lsls	r3, r3, #12
 80032ec:	4926      	ldr	r1, [pc, #152]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f2:	e06f      	b.n	80033d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f4:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	4921      	ldr	r1, [pc, #132]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003308:	e064      	b.n	80033d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d047      	beq.n	80033a2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003312:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 0219 	bic.w	r2, r3, #25
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	491a      	ldr	r1, [pc, #104]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fd fe24 	bl	8000f70 <HAL_GetTick>
 8003328:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332c:	f7fd fe20 	bl	8000f70 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e332      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334a:	f7fd fe1d 	bl	8000f88 <HAL_GetREVID>
 800334e:	4603      	mov	r3, r0
 8003350:	f241 0203 	movw	r2, #4099	; 0x1003
 8003354:	4293      	cmp	r3, r2
 8003356:	d819      	bhi.n	800338c <HAL_RCC_OscConfig+0x28c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	d108      	bne.n	8003372 <HAL_RCC_OscConfig+0x272>
 8003360:	4b09      	ldr	r3, [pc, #36]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003368:	4a07      	ldr	r2, [pc, #28]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 800336a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336e:	6053      	str	r3, [r2, #4]
 8003370:	e030      	b.n	80033d4 <HAL_RCC_OscConfig+0x2d4>
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	031b      	lsls	r3, r3, #12
 8003380:	4901      	ldr	r1, [pc, #4]	; (8003388 <HAL_RCC_OscConfig+0x288>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
 8003386:	e025      	b.n	80033d4 <HAL_RCC_OscConfig+0x2d4>
 8003388:	58024400 	.word	0x58024400
 800338c:	4b9a      	ldr	r3, [pc, #616]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	061b      	lsls	r3, r3, #24
 800339a:	4997      	ldr	r1, [pc, #604]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]
 80033a0:	e018      	b.n	80033d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a2:	4b95      	ldr	r3, [pc, #596]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a94      	ldr	r2, [pc, #592]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ae:	f7fd fddf 	bl	8000f70 <HAL_GetTick>
 80033b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b6:	f7fd fddb 	bl	8000f70 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e2ed      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033c8:	4b8b      	ldr	r3, [pc, #556]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f0      	bne.n	80033b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80a9 	beq.w	8003534 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e2:	4b85      	ldr	r3, [pc, #532]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033ec:	4b82      	ldr	r3, [pc, #520]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80033ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d007      	beq.n	8003408 <HAL_RCC_OscConfig+0x308>
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b18      	cmp	r3, #24
 80033fc:	d13a      	bne.n	8003474 <HAL_RCC_OscConfig+0x374>
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b01      	cmp	r3, #1
 8003406:	d135      	bne.n	8003474 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003408:	4b7b      	ldr	r3, [pc, #492]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_OscConfig+0x320>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	2b80      	cmp	r3, #128	; 0x80
 800341a:	d001      	beq.n	8003420 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e2c1      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003420:	f7fd fdb2 	bl	8000f88 <HAL_GetREVID>
 8003424:	4603      	mov	r3, r0
 8003426:	f241 0203 	movw	r2, #4099	; 0x1003
 800342a:	4293      	cmp	r3, r2
 800342c:	d817      	bhi.n	800345e <HAL_RCC_OscConfig+0x35e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	2b20      	cmp	r3, #32
 8003434:	d108      	bne.n	8003448 <HAL_RCC_OscConfig+0x348>
 8003436:	4b70      	ldr	r3, [pc, #448]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800343e:	4a6e      	ldr	r2, [pc, #440]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003440:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003444:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003446:	e075      	b.n	8003534 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003448:	4b6b      	ldr	r3, [pc, #428]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	069b      	lsls	r3, r3, #26
 8003456:	4968      	ldr	r1, [pc, #416]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800345c:	e06a      	b.n	8003534 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800345e:	4b66      	ldr	r3, [pc, #408]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	061b      	lsls	r3, r3, #24
 800346c:	4962      	ldr	r1, [pc, #392]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800346e:	4313      	orrs	r3, r2
 8003470:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003472:	e05f      	b.n	8003534 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d042      	beq.n	8003502 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800347c:	4b5e      	ldr	r3, [pc, #376]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a5d      	ldr	r2, [pc, #372]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fd fd72 	bl	8000f70 <HAL_GetTick>
 800348c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003490:	f7fd fd6e 	bl	8000f70 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e280      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034a2:	4b55      	ldr	r3, [pc, #340]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034ae:	f7fd fd6b 	bl	8000f88 <HAL_GetREVID>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d817      	bhi.n	80034ec <HAL_RCC_OscConfig+0x3ec>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d108      	bne.n	80034d6 <HAL_RCC_OscConfig+0x3d6>
 80034c4:	4b4c      	ldr	r3, [pc, #304]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80034cc:	4a4a      	ldr	r2, [pc, #296]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80034ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034d2:	6053      	str	r3, [r2, #4]
 80034d4:	e02e      	b.n	8003534 <HAL_RCC_OscConfig+0x434>
 80034d6:	4b48      	ldr	r3, [pc, #288]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	069b      	lsls	r3, r3, #26
 80034e4:	4944      	ldr	r1, [pc, #272]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]
 80034ea:	e023      	b.n	8003534 <HAL_RCC_OscConfig+0x434>
 80034ec:	4b42      	ldr	r3, [pc, #264]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	061b      	lsls	r3, r3, #24
 80034fa:	493f      	ldr	r1, [pc, #252]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60cb      	str	r3, [r1, #12]
 8003500:	e018      	b.n	8003534 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003502:	4b3d      	ldr	r3, [pc, #244]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a3c      	ldr	r2, [pc, #240]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800350c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fd fd2f 	bl	8000f70 <HAL_GetTick>
 8003512:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003516:	f7fd fd2b 	bl	8000f70 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e23d      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003528:	4b33      	ldr	r3, [pc, #204]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d036      	beq.n	80035ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d019      	beq.n	800357c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003548:	4b2b      	ldr	r3, [pc, #172]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800354a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354c:	4a2a      	ldr	r2, [pc, #168]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fd fd0c 	bl	8000f70 <HAL_GetTick>
 8003558:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355c:	f7fd fd08 	bl	8000f70 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e21a      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800356e:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x45c>
 800357a:	e018      	b.n	80035ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357c:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800357e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003580:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fd fcf2 	bl	8000f70 <HAL_GetTick>
 800358c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003590:	f7fd fcee 	bl	8000f70 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e200      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035a2:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80035a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d039      	beq.n	800362e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01c      	beq.n	80035fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035c2:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80035c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035ce:	f7fd fccf 	bl	8000f70 <HAL_GetTick>
 80035d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035d6:	f7fd fccb 	bl	8000f70 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e1dd      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035e8:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x4d6>
 80035f4:	e01b      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
 80035f6:	bf00      	nop
 80035f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035fc:	4b9b      	ldr	r3, [pc, #620]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a9a      	ldr	r2, [pc, #616]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003602:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003606:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003608:	f7fd fcb2 	bl	8000f70 <HAL_GetTick>
 800360c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003610:	f7fd fcae 	bl	8000f70 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e1c0      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003622:	4b92      	ldr	r3, [pc, #584]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 8081 	beq.w	800373e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800363c:	4b8c      	ldr	r3, [pc, #560]	; (8003870 <HAL_RCC_OscConfig+0x770>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a8b      	ldr	r2, [pc, #556]	; (8003870 <HAL_RCC_OscConfig+0x770>)
 8003642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003646:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003648:	f7fd fc92 	bl	8000f70 <HAL_GetTick>
 800364c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003650:	f7fd fc8e 	bl	8000f70 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	; 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e1a0      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003662:	4b83      	ldr	r3, [pc, #524]	; (8003870 <HAL_RCC_OscConfig+0x770>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d106      	bne.n	8003684 <HAL_RCC_OscConfig+0x584>
 8003676:	4b7d      	ldr	r3, [pc, #500]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4a7c      	ldr	r2, [pc, #496]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6713      	str	r3, [r2, #112]	; 0x70
 8003682:	e02d      	b.n	80036e0 <HAL_RCC_OscConfig+0x5e0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10c      	bne.n	80036a6 <HAL_RCC_OscConfig+0x5a6>
 800368c:	4b77      	ldr	r3, [pc, #476]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4a76      	ldr	r2, [pc, #472]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	6713      	str	r3, [r2, #112]	; 0x70
 8003698:	4b74      	ldr	r3, [pc, #464]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a73      	ldr	r2, [pc, #460]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 800369e:	f023 0304 	bic.w	r3, r3, #4
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	e01c      	b.n	80036e0 <HAL_RCC_OscConfig+0x5e0>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x5c8>
 80036ae:	4b6f      	ldr	r3, [pc, #444]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a6e      	ldr	r2, [pc, #440]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 80036b4:	f043 0304 	orr.w	r3, r3, #4
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ba:	4b6c      	ldr	r3, [pc, #432]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	4a6b      	ldr	r2, [pc, #428]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6713      	str	r3, [r2, #112]	; 0x70
 80036c6:	e00b      	b.n	80036e0 <HAL_RCC_OscConfig+0x5e0>
 80036c8:	4b68      	ldr	r3, [pc, #416]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	4a67      	ldr	r2, [pc, #412]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	6713      	str	r3, [r2, #112]	; 0x70
 80036d4:	4b65      	ldr	r3, [pc, #404]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	4a64      	ldr	r2, [pc, #400]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 80036da:	f023 0304 	bic.w	r3, r3, #4
 80036de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d015      	beq.n	8003714 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fd fc42 	bl	8000f70 <HAL_GetTick>
 80036ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f0:	f7fd fc3e 	bl	8000f70 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e14e      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003706:	4b59      	ldr	r3, [pc, #356]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0ee      	beq.n	80036f0 <HAL_RCC_OscConfig+0x5f0>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fd fc2c 	bl	8000f70 <HAL_GetTick>
 8003718:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800371a:	e00a      	b.n	8003732 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fd fc28 	bl	8000f70 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e138      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003732:	4b4e      	ldr	r3, [pc, #312]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1ee      	bne.n	800371c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 812d 	beq.w	80039a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003748:	4b48      	ldr	r3, [pc, #288]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003750:	2b18      	cmp	r3, #24
 8003752:	f000 80bd 	beq.w	80038d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	2b02      	cmp	r3, #2
 800375c:	f040 809e 	bne.w	800389c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003760:	4b42      	ldr	r3, [pc, #264]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a41      	ldr	r2, [pc, #260]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800376a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7fd fc00 	bl	8000f70 <HAL_GetTick>
 8003770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003774:	f7fd fbfc 	bl	8000f70 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e10e      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003786:	4b39      	ldr	r3, [pc, #228]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003792:	4b36      	ldr	r3, [pc, #216]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003796:	4b37      	ldr	r3, [pc, #220]	; (8003874 <HAL_RCC_OscConfig+0x774>)
 8003798:	4013      	ands	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037a2:	0112      	lsls	r2, r2, #4
 80037a4:	430a      	orrs	r2, r1
 80037a6:	4931      	ldr	r1, [pc, #196]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	628b      	str	r3, [r1, #40]	; 0x28
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	3b01      	subs	r3, #1
 80037b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ba:	3b01      	subs	r3, #1
 80037bc:	025b      	lsls	r3, r3, #9
 80037be:	b29b      	uxth	r3, r3
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	3b01      	subs	r3, #1
 80037c8:	041b      	lsls	r3, r3, #16
 80037ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d4:	3b01      	subs	r3, #1
 80037d6:	061b      	lsls	r3, r3, #24
 80037d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037dc:	4923      	ldr	r1, [pc, #140]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80037e2:	4b22      	ldr	r3, [pc, #136]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	4a21      	ldr	r2, [pc, #132]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037ee:	4b1f      	ldr	r3, [pc, #124]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 80037f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f2:	4b21      	ldr	r3, [pc, #132]	; (8003878 <HAL_RCC_OscConfig+0x778>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037fa:	00d2      	lsls	r2, r2, #3
 80037fc:	491b      	ldr	r1, [pc, #108]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003802:	4b1a      	ldr	r3, [pc, #104]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	f023 020c 	bic.w	r2, r3, #12
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	4917      	ldr	r1, [pc, #92]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003810:	4313      	orrs	r3, r2
 8003812:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003814:	4b15      	ldr	r3, [pc, #84]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	f023 0202 	bic.w	r2, r3, #2
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003820:	4912      	ldr	r1, [pc, #72]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003822:	4313      	orrs	r3, r2
 8003824:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003826:	4b11      	ldr	r3, [pc, #68]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	4a10      	ldr	r2, [pc, #64]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003830:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003832:	4b0e      	ldr	r3, [pc, #56]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	4a0d      	ldr	r2, [pc, #52]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800383e:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	4a0a      	ldr	r2, [pc, #40]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003848:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800384a:	4b08      	ldr	r3, [pc, #32]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	4a07      	ldr	r2, [pc, #28]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a04      	ldr	r2, [pc, #16]	; (800386c <HAL_RCC_OscConfig+0x76c>)
 800385c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003862:	f7fd fb85 	bl	8000f70 <HAL_GetTick>
 8003866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003868:	e011      	b.n	800388e <HAL_RCC_OscConfig+0x78e>
 800386a:	bf00      	nop
 800386c:	58024400 	.word	0x58024400
 8003870:	58024800 	.word	0x58024800
 8003874:	fffffc0c 	.word	0xfffffc0c
 8003878:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387c:	f7fd fb78 	bl	8000f70 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e08a      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCC_OscConfig+0x8ac>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x77c>
 800389a:	e082      	b.n	80039a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389c:	4b43      	ldr	r3, [pc, #268]	; (80039ac <HAL_RCC_OscConfig+0x8ac>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a42      	ldr	r2, [pc, #264]	; (80039ac <HAL_RCC_OscConfig+0x8ac>)
 80038a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fd fb62 	bl	8000f70 <HAL_GetTick>
 80038ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fd fb5e 	bl	8000f70 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e070      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038c2:	4b3a      	ldr	r3, [pc, #232]	; (80039ac <HAL_RCC_OscConfig+0x8ac>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x7b0>
 80038ce:	e068      	b.n	80039a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038d0:	4b36      	ldr	r3, [pc, #216]	; (80039ac <HAL_RCC_OscConfig+0x8ac>)
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038d6:	4b35      	ldr	r3, [pc, #212]	; (80039ac <HAL_RCC_OscConfig+0x8ac>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d031      	beq.n	8003948 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f003 0203 	and.w	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d12a      	bne.n	8003948 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	429a      	cmp	r2, r3
 8003900:	d122      	bne.n	8003948 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d11a      	bne.n	8003948 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	0a5b      	lsrs	r3, r3, #9
 8003916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d111      	bne.n	8003948 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	0c1b      	lsrs	r3, r3, #16
 8003928:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003932:	429a      	cmp	r2, r3
 8003934:	d108      	bne.n	8003948 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	0e1b      	lsrs	r3, r3, #24
 800393a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e02b      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800394c:	4b17      	ldr	r3, [pc, #92]	; (80039ac <HAL_RCC_OscConfig+0x8ac>)
 800394e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003950:	08db      	lsrs	r3, r3, #3
 8003952:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003956:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	429a      	cmp	r2, r3
 8003960:	d01f      	beq.n	80039a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003962:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_RCC_OscConfig+0x8ac>)
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	4a11      	ldr	r2, [pc, #68]	; (80039ac <HAL_RCC_OscConfig+0x8ac>)
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800396e:	f7fd faff 	bl	8000f70 <HAL_GetTick>
 8003972:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003974:	bf00      	nop
 8003976:	f7fd fafb 	bl	8000f70 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	4293      	cmp	r3, r2
 8003980:	d0f9      	beq.n	8003976 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_RCC_OscConfig+0x8ac>)
 8003984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003986:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <HAL_RCC_OscConfig+0x8b0>)
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800398e:	00d2      	lsls	r2, r2, #3
 8003990:	4906      	ldr	r1, [pc, #24]	; (80039ac <HAL_RCC_OscConfig+0x8ac>)
 8003992:	4313      	orrs	r3, r2
 8003994:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003996:	4b05      	ldr	r3, [pc, #20]	; (80039ac <HAL_RCC_OscConfig+0x8ac>)
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	4a04      	ldr	r2, [pc, #16]	; (80039ac <HAL_RCC_OscConfig+0x8ac>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3730      	adds	r7, #48	; 0x30
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	58024400 	.word	0x58024400
 80039b0:	ffff0007 	.word	0xffff0007

080039b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e19c      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c8:	4b8a      	ldr	r3, [pc, #552]	; (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d910      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b87      	ldr	r3, [pc, #540]	; (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 020f 	bic.w	r2, r3, #15
 80039de:	4985      	ldr	r1, [pc, #532]	; (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b83      	ldr	r3, [pc, #524]	; (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e184      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d010      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	4b7b      	ldr	r3, [pc, #492]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d908      	bls.n	8003a26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a14:	4b78      	ldr	r3, [pc, #480]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	4975      	ldr	r1, [pc, #468]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d010      	beq.n	8003a54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	4b70      	ldr	r3, [pc, #448]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d908      	bls.n	8003a54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a42:	4b6d      	ldr	r3, [pc, #436]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	496a      	ldr	r1, [pc, #424]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d010      	beq.n	8003a82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	4b64      	ldr	r3, [pc, #400]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d908      	bls.n	8003a82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a70:	4b61      	ldr	r3, [pc, #388]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	495e      	ldr	r1, [pc, #376]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d010      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	4b59      	ldr	r3, [pc, #356]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d908      	bls.n	8003ab0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a9e:	4b56      	ldr	r3, [pc, #344]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	4953      	ldr	r1, [pc, #332]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d010      	beq.n	8003ade <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	4b4d      	ldr	r3, [pc, #308]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d908      	bls.n	8003ade <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003acc:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f023 020f 	bic.w	r2, r3, #15
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4947      	ldr	r1, [pc, #284]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d055      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003aea:	4b43      	ldr	r3, [pc, #268]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	4940      	ldr	r1, [pc, #256]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b04:	4b3c      	ldr	r3, [pc, #240]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d121      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0f6      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b1c:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d115      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0ea      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d107      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b34:	4b30      	ldr	r3, [pc, #192]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d109      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0de      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b44:	4b2c      	ldr	r3, [pc, #176]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0d6      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b54:	4b28      	ldr	r3, [pc, #160]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f023 0207 	bic.w	r2, r3, #7
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4925      	ldr	r1, [pc, #148]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b66:	f7fd fa03 	bl	8000f70 <HAL_GetTick>
 8003b6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6c:	e00a      	b.n	8003b84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6e:	f7fd f9ff 	bl	8000f70 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e0be      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b84:	4b1c      	ldr	r3, [pc, #112]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d1eb      	bne.n	8003b6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d010      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d208      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f023 020f 	bic.w	r2, r3, #15
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	490e      	ldr	r1, [pc, #56]	; (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d214      	bcs.n	8003bfc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 020f 	bic.w	r2, r3, #15
 8003bda:	4906      	ldr	r1, [pc, #24]	; (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e086      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>
 8003bf4:	52002000 	.word	0x52002000
 8003bf8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d010      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	4b3f      	ldr	r3, [pc, #252]	; (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d208      	bcs.n	8003c2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c18:	4b3c      	ldr	r3, [pc, #240]	; (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	4939      	ldr	r1, [pc, #228]	; (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d010      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	4b34      	ldr	r3, [pc, #208]	; (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d208      	bcs.n	8003c58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c46:	4b31      	ldr	r3, [pc, #196]	; (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	492e      	ldr	r1, [pc, #184]	; (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d010      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	4b28      	ldr	r3, [pc, #160]	; (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d208      	bcs.n	8003c86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c74:	4b25      	ldr	r3, [pc, #148]	; (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	4922      	ldr	r1, [pc, #136]	; (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d010      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d208      	bcs.n	8003cb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ca2:	4b1a      	ldr	r3, [pc, #104]	; (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	4917      	ldr	r1, [pc, #92]	; (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cb4:	f000 f834 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	4912      	ldr	r1, [pc, #72]	; (8003d10 <HAL_RCC_ClockConfig+0x35c>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	; (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	4a0d      	ldr	r2, [pc, #52]	; (8003d10 <HAL_RCC_ClockConfig+0x35c>)
 8003cdc:	5cd3      	ldrb	r3, [r2, r3]
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <HAL_RCC_ClockConfig+0x360>)
 8003cea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cec:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <HAL_RCC_ClockConfig+0x364>)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <HAL_RCC_ClockConfig+0x368>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd f8f0 	bl	8000edc <HAL_InitTick>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	58024400 	.word	0x58024400
 8003d10:	080120e4 	.word	0x080120e4
 8003d14:	24000004 	.word	0x24000004
 8003d18:	24000000 	.word	0x24000000
 8003d1c:	24000008 	.word	0x24000008

08003d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b089      	sub	sp, #36	; 0x24
 8003d24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d26:	4bb3      	ldr	r3, [pc, #716]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d2e:	2b18      	cmp	r3, #24
 8003d30:	f200 8155 	bhi.w	8003fde <HAL_RCC_GetSysClockFreq+0x2be>
 8003d34:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003da1 	.word	0x08003da1
 8003d40:	08003fdf 	.word	0x08003fdf
 8003d44:	08003fdf 	.word	0x08003fdf
 8003d48:	08003fdf 	.word	0x08003fdf
 8003d4c:	08003fdf 	.word	0x08003fdf
 8003d50:	08003fdf 	.word	0x08003fdf
 8003d54:	08003fdf 	.word	0x08003fdf
 8003d58:	08003fdf 	.word	0x08003fdf
 8003d5c:	08003dc7 	.word	0x08003dc7
 8003d60:	08003fdf 	.word	0x08003fdf
 8003d64:	08003fdf 	.word	0x08003fdf
 8003d68:	08003fdf 	.word	0x08003fdf
 8003d6c:	08003fdf 	.word	0x08003fdf
 8003d70:	08003fdf 	.word	0x08003fdf
 8003d74:	08003fdf 	.word	0x08003fdf
 8003d78:	08003fdf 	.word	0x08003fdf
 8003d7c:	08003dcd 	.word	0x08003dcd
 8003d80:	08003fdf 	.word	0x08003fdf
 8003d84:	08003fdf 	.word	0x08003fdf
 8003d88:	08003fdf 	.word	0x08003fdf
 8003d8c:	08003fdf 	.word	0x08003fdf
 8003d90:	08003fdf 	.word	0x08003fdf
 8003d94:	08003fdf 	.word	0x08003fdf
 8003d98:	08003fdf 	.word	0x08003fdf
 8003d9c:	08003dd3 	.word	0x08003dd3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003da0:	4b94      	ldr	r3, [pc, #592]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d009      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003dac:	4b91      	ldr	r3, [pc, #580]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	08db      	lsrs	r3, r3, #3
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	4a90      	ldr	r2, [pc, #576]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003dbe:	e111      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003dc0:	4b8d      	ldr	r3, [pc, #564]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dc2:	61bb      	str	r3, [r7, #24]
      break;
 8003dc4:	e10e      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003dc6:	4b8d      	ldr	r3, [pc, #564]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003dc8:	61bb      	str	r3, [r7, #24]
      break;
 8003dca:	e10b      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003dcc:	4b8c      	ldr	r3, [pc, #560]	; (8004000 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003dce:	61bb      	str	r3, [r7, #24]
      break;
 8003dd0:	e108      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003dd2:	4b88      	ldr	r3, [pc, #544]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ddc:	4b85      	ldr	r3, [pc, #532]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003de8:	4b82      	ldr	r3, [pc, #520]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003df2:	4b80      	ldr	r3, [pc, #512]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df6:	08db      	lsrs	r3, r3, #3
 8003df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	ee07 3a90 	vmov	s15, r3
 8003e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80e1 	beq.w	8003fd8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	f000 8083 	beq.w	8003f24 <HAL_RCC_GetSysClockFreq+0x204>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	f200 80a1 	bhi.w	8003f68 <HAL_RCC_GetSysClockFreq+0x248>
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0x114>
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d056      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e32:	e099      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e34:	4b6f      	ldr	r3, [pc, #444]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d02d      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e40:	4b6c      	ldr	r3, [pc, #432]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	08db      	lsrs	r3, r3, #3
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	4a6b      	ldr	r2, [pc, #428]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	ee07 3a90 	vmov	s15, r3
 8003e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6a:	4b62      	ldr	r3, [pc, #392]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003e9a:	e087      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004008 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eae:	4b51      	ldr	r3, [pc, #324]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ec2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ede:	e065      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800400c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef2:	4b40      	ldr	r3, [pc, #256]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f22:	e043      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004010 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f36:	4b2f      	ldr	r3, [pc, #188]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f66:	e021      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f72:	eddf 6a26 	vldr	s13, [pc, #152]	; 800400c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003faa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	0a5b      	lsrs	r3, r3, #9
 8003fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	ee07 3a90 	vmov	s15, r3
 8003fc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd0:	ee17 3a90 	vmov	r3, s15
 8003fd4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003fd6:	e005      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61bb      	str	r3, [r7, #24]
      break;
 8003fdc:	e002      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fe0:	61bb      	str	r3, [r7, #24]
      break;
 8003fe2:	bf00      	nop
  }

  return sysclockfreq;
 8003fe4:	69bb      	ldr	r3, [r7, #24]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3724      	adds	r7, #36	; 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	58024400 	.word	0x58024400
 8003ff8:	03d09000 	.word	0x03d09000
 8003ffc:	003d0900 	.word	0x003d0900
 8004000:	017d7840 	.word	0x017d7840
 8004004:	46000000 	.word	0x46000000
 8004008:	4c742400 	.word	0x4c742400
 800400c:	4a742400 	.word	0x4a742400
 8004010:	4bbebc20 	.word	0x4bbebc20

08004014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800401a:	f7ff fe81 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 800401e:	4602      	mov	r2, r0
 8004020:	4b10      	ldr	r3, [pc, #64]	; (8004064 <HAL_RCC_GetHCLKFreq+0x50>)
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	490f      	ldr	r1, [pc, #60]	; (8004068 <HAL_RCC_GetHCLKFreq+0x54>)
 800402c:	5ccb      	ldrb	r3, [r1, r3]
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004038:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <HAL_RCC_GetHCLKFreq+0x50>)
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	4a09      	ldr	r2, [pc, #36]	; (8004068 <HAL_RCC_GetHCLKFreq+0x54>)
 8004042:	5cd3      	ldrb	r3, [r2, r3]
 8004044:	f003 031f 	and.w	r3, r3, #31
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	fa22 f303 	lsr.w	r3, r2, r3
 800404e:	4a07      	ldr	r2, [pc, #28]	; (800406c <HAL_RCC_GetHCLKFreq+0x58>)
 8004050:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004052:	4a07      	ldr	r2, [pc, #28]	; (8004070 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004058:	4b04      	ldr	r3, [pc, #16]	; (800406c <HAL_RCC_GetHCLKFreq+0x58>)
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	58024400 	.word	0x58024400
 8004068:	080120e4 	.word	0x080120e4
 800406c:	24000004 	.word	0x24000004
 8004070:	24000000 	.word	0x24000000

08004074 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800407a:	4b8d      	ldr	r3, [pc, #564]	; (80042b0 <MX_LWIP_Init+0x23c>)
 800407c:	22c0      	movs	r2, #192	; 0xc0
 800407e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004080:	4b8b      	ldr	r3, [pc, #556]	; (80042b0 <MX_LWIP_Init+0x23c>)
 8004082:	22a8      	movs	r2, #168	; 0xa8
 8004084:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 11;
 8004086:	4b8a      	ldr	r3, [pc, #552]	; (80042b0 <MX_LWIP_Init+0x23c>)
 8004088:	220b      	movs	r2, #11
 800408a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 7;
 800408c:	4b88      	ldr	r3, [pc, #544]	; (80042b0 <MX_LWIP_Init+0x23c>)
 800408e:	2207      	movs	r2, #7
 8004090:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004092:	4b88      	ldr	r3, [pc, #544]	; (80042b4 <MX_LWIP_Init+0x240>)
 8004094:	22ff      	movs	r2, #255	; 0xff
 8004096:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004098:	4b86      	ldr	r3, [pc, #536]	; (80042b4 <MX_LWIP_Init+0x240>)
 800409a:	22ff      	movs	r2, #255	; 0xff
 800409c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800409e:	4b85      	ldr	r3, [pc, #532]	; (80042b4 <MX_LWIP_Init+0x240>)
 80040a0:	22ff      	movs	r2, #255	; 0xff
 80040a2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80040a4:	4b83      	ldr	r3, [pc, #524]	; (80042b4 <MX_LWIP_Init+0x240>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80040aa:	4b83      	ldr	r3, [pc, #524]	; (80042b8 <MX_LWIP_Init+0x244>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80040b0:	4b81      	ldr	r3, [pc, #516]	; (80042b8 <MX_LWIP_Init+0x244>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80040b6:	4b80      	ldr	r3, [pc, #512]	; (80042b8 <MX_LWIP_Init+0x244>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80040bc:	4b7e      	ldr	r3, [pc, #504]	; (80042b8 <MX_LWIP_Init+0x244>)
 80040be:	2200      	movs	r2, #0
 80040c0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80040c2:	f000 fe0f 	bl	8004ce4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80040c6:	4b7a      	ldr	r3, [pc, #488]	; (80042b0 <MX_LWIP_Init+0x23c>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	061a      	lsls	r2, r3, #24
 80040cc:	4b78      	ldr	r3, [pc, #480]	; (80042b0 <MX_LWIP_Init+0x23c>)
 80040ce:	785b      	ldrb	r3, [r3, #1]
 80040d0:	041b      	lsls	r3, r3, #16
 80040d2:	431a      	orrs	r2, r3
 80040d4:	4b76      	ldr	r3, [pc, #472]	; (80042b0 <MX_LWIP_Init+0x23c>)
 80040d6:	789b      	ldrb	r3, [r3, #2]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	4313      	orrs	r3, r2
 80040dc:	4a74      	ldr	r2, [pc, #464]	; (80042b0 <MX_LWIP_Init+0x23c>)
 80040de:	78d2      	ldrb	r2, [r2, #3]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	061a      	lsls	r2, r3, #24
 80040e4:	4b72      	ldr	r3, [pc, #456]	; (80042b0 <MX_LWIP_Init+0x23c>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	0619      	lsls	r1, r3, #24
 80040ea:	4b71      	ldr	r3, [pc, #452]	; (80042b0 <MX_LWIP_Init+0x23c>)
 80040ec:	785b      	ldrb	r3, [r3, #1]
 80040ee:	041b      	lsls	r3, r3, #16
 80040f0:	4319      	orrs	r1, r3
 80040f2:	4b6f      	ldr	r3, [pc, #444]	; (80042b0 <MX_LWIP_Init+0x23c>)
 80040f4:	789b      	ldrb	r3, [r3, #2]
 80040f6:	021b      	lsls	r3, r3, #8
 80040f8:	430b      	orrs	r3, r1
 80040fa:	496d      	ldr	r1, [pc, #436]	; (80042b0 <MX_LWIP_Init+0x23c>)
 80040fc:	78c9      	ldrb	r1, [r1, #3]
 80040fe:	430b      	orrs	r3, r1
 8004100:	021b      	lsls	r3, r3, #8
 8004102:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004106:	431a      	orrs	r2, r3
 8004108:	4b69      	ldr	r3, [pc, #420]	; (80042b0 <MX_LWIP_Init+0x23c>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	0619      	lsls	r1, r3, #24
 800410e:	4b68      	ldr	r3, [pc, #416]	; (80042b0 <MX_LWIP_Init+0x23c>)
 8004110:	785b      	ldrb	r3, [r3, #1]
 8004112:	041b      	lsls	r3, r3, #16
 8004114:	4319      	orrs	r1, r3
 8004116:	4b66      	ldr	r3, [pc, #408]	; (80042b0 <MX_LWIP_Init+0x23c>)
 8004118:	789b      	ldrb	r3, [r3, #2]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	430b      	orrs	r3, r1
 800411e:	4964      	ldr	r1, [pc, #400]	; (80042b0 <MX_LWIP_Init+0x23c>)
 8004120:	78c9      	ldrb	r1, [r1, #3]
 8004122:	430b      	orrs	r3, r1
 8004124:	0a1b      	lsrs	r3, r3, #8
 8004126:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800412a:	431a      	orrs	r2, r3
 800412c:	4b60      	ldr	r3, [pc, #384]	; (80042b0 <MX_LWIP_Init+0x23c>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	0619      	lsls	r1, r3, #24
 8004132:	4b5f      	ldr	r3, [pc, #380]	; (80042b0 <MX_LWIP_Init+0x23c>)
 8004134:	785b      	ldrb	r3, [r3, #1]
 8004136:	041b      	lsls	r3, r3, #16
 8004138:	4319      	orrs	r1, r3
 800413a:	4b5d      	ldr	r3, [pc, #372]	; (80042b0 <MX_LWIP_Init+0x23c>)
 800413c:	789b      	ldrb	r3, [r3, #2]
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	430b      	orrs	r3, r1
 8004142:	495b      	ldr	r1, [pc, #364]	; (80042b0 <MX_LWIP_Init+0x23c>)
 8004144:	78c9      	ldrb	r1, [r1, #3]
 8004146:	430b      	orrs	r3, r1
 8004148:	0e1b      	lsrs	r3, r3, #24
 800414a:	4313      	orrs	r3, r2
 800414c:	4a5b      	ldr	r2, [pc, #364]	; (80042bc <MX_LWIP_Init+0x248>)
 800414e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004150:	4b58      	ldr	r3, [pc, #352]	; (80042b4 <MX_LWIP_Init+0x240>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	061a      	lsls	r2, r3, #24
 8004156:	4b57      	ldr	r3, [pc, #348]	; (80042b4 <MX_LWIP_Init+0x240>)
 8004158:	785b      	ldrb	r3, [r3, #1]
 800415a:	041b      	lsls	r3, r3, #16
 800415c:	431a      	orrs	r2, r3
 800415e:	4b55      	ldr	r3, [pc, #340]	; (80042b4 <MX_LWIP_Init+0x240>)
 8004160:	789b      	ldrb	r3, [r3, #2]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	4313      	orrs	r3, r2
 8004166:	4a53      	ldr	r2, [pc, #332]	; (80042b4 <MX_LWIP_Init+0x240>)
 8004168:	78d2      	ldrb	r2, [r2, #3]
 800416a:	4313      	orrs	r3, r2
 800416c:	061a      	lsls	r2, r3, #24
 800416e:	4b51      	ldr	r3, [pc, #324]	; (80042b4 <MX_LWIP_Init+0x240>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	0619      	lsls	r1, r3, #24
 8004174:	4b4f      	ldr	r3, [pc, #316]	; (80042b4 <MX_LWIP_Init+0x240>)
 8004176:	785b      	ldrb	r3, [r3, #1]
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	4319      	orrs	r1, r3
 800417c:	4b4d      	ldr	r3, [pc, #308]	; (80042b4 <MX_LWIP_Init+0x240>)
 800417e:	789b      	ldrb	r3, [r3, #2]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	430b      	orrs	r3, r1
 8004184:	494b      	ldr	r1, [pc, #300]	; (80042b4 <MX_LWIP_Init+0x240>)
 8004186:	78c9      	ldrb	r1, [r1, #3]
 8004188:	430b      	orrs	r3, r1
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004190:	431a      	orrs	r2, r3
 8004192:	4b48      	ldr	r3, [pc, #288]	; (80042b4 <MX_LWIP_Init+0x240>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	0619      	lsls	r1, r3, #24
 8004198:	4b46      	ldr	r3, [pc, #280]	; (80042b4 <MX_LWIP_Init+0x240>)
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	041b      	lsls	r3, r3, #16
 800419e:	4319      	orrs	r1, r3
 80041a0:	4b44      	ldr	r3, [pc, #272]	; (80042b4 <MX_LWIP_Init+0x240>)
 80041a2:	789b      	ldrb	r3, [r3, #2]
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	430b      	orrs	r3, r1
 80041a8:	4942      	ldr	r1, [pc, #264]	; (80042b4 <MX_LWIP_Init+0x240>)
 80041aa:	78c9      	ldrb	r1, [r1, #3]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	0a1b      	lsrs	r3, r3, #8
 80041b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80041b4:	431a      	orrs	r2, r3
 80041b6:	4b3f      	ldr	r3, [pc, #252]	; (80042b4 <MX_LWIP_Init+0x240>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	0619      	lsls	r1, r3, #24
 80041bc:	4b3d      	ldr	r3, [pc, #244]	; (80042b4 <MX_LWIP_Init+0x240>)
 80041be:	785b      	ldrb	r3, [r3, #1]
 80041c0:	041b      	lsls	r3, r3, #16
 80041c2:	4319      	orrs	r1, r3
 80041c4:	4b3b      	ldr	r3, [pc, #236]	; (80042b4 <MX_LWIP_Init+0x240>)
 80041c6:	789b      	ldrb	r3, [r3, #2]
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	430b      	orrs	r3, r1
 80041cc:	4939      	ldr	r1, [pc, #228]	; (80042b4 <MX_LWIP_Init+0x240>)
 80041ce:	78c9      	ldrb	r1, [r1, #3]
 80041d0:	430b      	orrs	r3, r1
 80041d2:	0e1b      	lsrs	r3, r3, #24
 80041d4:	4313      	orrs	r3, r2
 80041d6:	4a3a      	ldr	r2, [pc, #232]	; (80042c0 <MX_LWIP_Init+0x24c>)
 80041d8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80041da:	4b37      	ldr	r3, [pc, #220]	; (80042b8 <MX_LWIP_Init+0x244>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	061a      	lsls	r2, r3, #24
 80041e0:	4b35      	ldr	r3, [pc, #212]	; (80042b8 <MX_LWIP_Init+0x244>)
 80041e2:	785b      	ldrb	r3, [r3, #1]
 80041e4:	041b      	lsls	r3, r3, #16
 80041e6:	431a      	orrs	r2, r3
 80041e8:	4b33      	ldr	r3, [pc, #204]	; (80042b8 <MX_LWIP_Init+0x244>)
 80041ea:	789b      	ldrb	r3, [r3, #2]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	4313      	orrs	r3, r2
 80041f0:	4a31      	ldr	r2, [pc, #196]	; (80042b8 <MX_LWIP_Init+0x244>)
 80041f2:	78d2      	ldrb	r2, [r2, #3]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	061a      	lsls	r2, r3, #24
 80041f8:	4b2f      	ldr	r3, [pc, #188]	; (80042b8 <MX_LWIP_Init+0x244>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	0619      	lsls	r1, r3, #24
 80041fe:	4b2e      	ldr	r3, [pc, #184]	; (80042b8 <MX_LWIP_Init+0x244>)
 8004200:	785b      	ldrb	r3, [r3, #1]
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	4319      	orrs	r1, r3
 8004206:	4b2c      	ldr	r3, [pc, #176]	; (80042b8 <MX_LWIP_Init+0x244>)
 8004208:	789b      	ldrb	r3, [r3, #2]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	430b      	orrs	r3, r1
 800420e:	492a      	ldr	r1, [pc, #168]	; (80042b8 <MX_LWIP_Init+0x244>)
 8004210:	78c9      	ldrb	r1, [r1, #3]
 8004212:	430b      	orrs	r3, r1
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800421a:	431a      	orrs	r2, r3
 800421c:	4b26      	ldr	r3, [pc, #152]	; (80042b8 <MX_LWIP_Init+0x244>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	0619      	lsls	r1, r3, #24
 8004222:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <MX_LWIP_Init+0x244>)
 8004224:	785b      	ldrb	r3, [r3, #1]
 8004226:	041b      	lsls	r3, r3, #16
 8004228:	4319      	orrs	r1, r3
 800422a:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <MX_LWIP_Init+0x244>)
 800422c:	789b      	ldrb	r3, [r3, #2]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	430b      	orrs	r3, r1
 8004232:	4921      	ldr	r1, [pc, #132]	; (80042b8 <MX_LWIP_Init+0x244>)
 8004234:	78c9      	ldrb	r1, [r1, #3]
 8004236:	430b      	orrs	r3, r1
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800423e:	431a      	orrs	r2, r3
 8004240:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <MX_LWIP_Init+0x244>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	0619      	lsls	r1, r3, #24
 8004246:	4b1c      	ldr	r3, [pc, #112]	; (80042b8 <MX_LWIP_Init+0x244>)
 8004248:	785b      	ldrb	r3, [r3, #1]
 800424a:	041b      	lsls	r3, r3, #16
 800424c:	4319      	orrs	r1, r3
 800424e:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <MX_LWIP_Init+0x244>)
 8004250:	789b      	ldrb	r3, [r3, #2]
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	430b      	orrs	r3, r1
 8004256:	4918      	ldr	r1, [pc, #96]	; (80042b8 <MX_LWIP_Init+0x244>)
 8004258:	78c9      	ldrb	r1, [r1, #3]
 800425a:	430b      	orrs	r3, r1
 800425c:	0e1b      	lsrs	r3, r3, #24
 800425e:	4313      	orrs	r3, r2
 8004260:	4a18      	ldr	r2, [pc, #96]	; (80042c4 <MX_LWIP_Init+0x250>)
 8004262:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004264:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <MX_LWIP_Init+0x254>)
 8004266:	9302      	str	r3, [sp, #8]
 8004268:	4b18      	ldr	r3, [pc, #96]	; (80042cc <MX_LWIP_Init+0x258>)
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	2300      	movs	r3, #0
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <MX_LWIP_Init+0x250>)
 8004272:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <MX_LWIP_Init+0x24c>)
 8004274:	4911      	ldr	r1, [pc, #68]	; (80042bc <MX_LWIP_Init+0x248>)
 8004276:	4816      	ldr	r0, [pc, #88]	; (80042d0 <MX_LWIP_Init+0x25c>)
 8004278:	f001 fa1c 	bl	80056b4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800427c:	4814      	ldr	r0, [pc, #80]	; (80042d0 <MX_LWIP_Init+0x25c>)
 800427e:	f001 fbcb 	bl	8005a18 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004282:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <MX_LWIP_Init+0x25c>)
 8004284:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004288:	089b      	lsrs	r3, r3, #2
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004294:	480e      	ldr	r0, [pc, #56]	; (80042d0 <MX_LWIP_Init+0x25c>)
 8004296:	f001 fbcf 	bl	8005a38 <netif_set_up>
 800429a:	e002      	b.n	80042a2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800429c:	480c      	ldr	r0, [pc, #48]	; (80042d0 <MX_LWIP_Init+0x25c>)
 800429e:	f001 fc37 	bl	8005b10 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80042a2:	490c      	ldr	r1, [pc, #48]	; (80042d4 <MX_LWIP_Init+0x260>)
 80042a4:	480a      	ldr	r0, [pc, #40]	; (80042d0 <MX_LWIP_Init+0x25c>)
 80042a6:	f001 fcc9 	bl	8005c3c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80042aa:	bf00      	nop
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	240000f4 	.word	0x240000f4
 80042b4:	240000f8 	.word	0x240000f8
 80042b8:	240000fc 	.word	0x240000fc
 80042bc:	240000e8 	.word	0x240000e8
 80042c0:	240000ec 	.word	0x240000ec
 80042c4:	240000f0 	.word	0x240000f0
 80042c8:	0800e545 	.word	0x0800e545
 80042cc:	080045e1 	.word	0x080045e1
 80042d0:	240000b4 	.word	0x240000b4
 80042d4:	08004329 	.word	0x08004329

080042d8 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80042e0:	f7fc fe46 	bl	8000f70 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b08      	ldr	r3, [pc, #32]	; (8004308 <Ethernet_Link_Periodic_Handle+0x30>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b63      	cmp	r3, #99	; 0x63
 80042ee:	d907      	bls.n	8004300 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80042f0:	f7fc fe3e 	bl	8000f70 <HAL_GetTick>
 80042f4:	4603      	mov	r3, r0
 80042f6:	4a04      	ldr	r2, [pc, #16]	; (8004308 <Ethernet_Link_Periodic_Handle+0x30>)
 80042f8:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fae4 	bl	80048c8 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	240000b0 	.word	0x240000b0

0800430c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004310:	4804      	ldr	r0, [pc, #16]	; (8004324 <MX_LWIP_Process+0x18>)
 8004312:	f000 f945 	bl	80045a0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004316:	f007 fd03 	bl	800bd20 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800431a:	4802      	ldr	r0, [pc, #8]	; (8004324 <MX_LWIP_Process+0x18>)
 800431c:	f7ff ffdc 	bl	80042d8 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004320:	bf00      	nop
 8004322:	bd80      	pop	{r7, pc}
 8004324:	240000b4 	.word	0x240000b4

08004328 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004348:	4b3f      	ldr	r3, [pc, #252]	; (8004448 <low_level_init+0x10c>)
 800434a:	4a40      	ldr	r2, [pc, #256]	; (800444c <low_level_init+0x110>)
 800434c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800434e:	2300      	movs	r3, #0
 8004350:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004356:	23e1      	movs	r3, #225	; 0xe1
 8004358:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800435a:	2300      	movs	r3, #0
 800435c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800435e:	2300      	movs	r3, #0
 8004360:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004362:	2300      	movs	r3, #0
 8004364:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004366:	4a38      	ldr	r2, [pc, #224]	; (8004448 <low_level_init+0x10c>)
 8004368:	f107 0308 	add.w	r3, r7, #8
 800436c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800436e:	4b36      	ldr	r3, [pc, #216]	; (8004448 <low_level_init+0x10c>)
 8004370:	2201      	movs	r2, #1
 8004372:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004374:	4b34      	ldr	r3, [pc, #208]	; (8004448 <low_level_init+0x10c>)
 8004376:	4a36      	ldr	r2, [pc, #216]	; (8004450 <low_level_init+0x114>)
 8004378:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800437a:	4b33      	ldr	r3, [pc, #204]	; (8004448 <low_level_init+0x10c>)
 800437c:	4a35      	ldr	r2, [pc, #212]	; (8004454 <low_level_init+0x118>)
 800437e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004380:	4b31      	ldr	r3, [pc, #196]	; (8004448 <low_level_init+0x10c>)
 8004382:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004386:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004388:	482f      	ldr	r0, [pc, #188]	; (8004448 <low_level_init+0x10c>)
 800438a:	f7fc ffa9 	bl	80012e0 <HAL_ETH_Init>
 800438e:	4603      	mov	r3, r0
 8004390:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004392:	2238      	movs	r2, #56	; 0x38
 8004394:	2100      	movs	r1, #0
 8004396:	4830      	ldr	r0, [pc, #192]	; (8004458 <low_level_init+0x11c>)
 8004398:	f00a fafd 	bl	800e996 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800439c:	4b2e      	ldr	r3, [pc, #184]	; (8004458 <low_level_init+0x11c>)
 800439e:	2221      	movs	r2, #33	; 0x21
 80043a0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80043a2:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <low_level_init+0x11c>)
 80043a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80043a8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80043aa:	4b2b      	ldr	r3, [pc, #172]	; (8004458 <low_level_init+0x11c>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80043b0:	482a      	ldr	r0, [pc, #168]	; (800445c <low_level_init+0x120>)
 80043b2:	f001 f847 	bl	8005444 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2206      	movs	r2, #6
 80043ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80043be:	4b22      	ldr	r3, [pc, #136]	; (8004448 <low_level_init+0x10c>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	781a      	ldrb	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80043ca:	4b1f      	ldr	r3, [pc, #124]	; (8004448 <low_level_init+0x10c>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	785a      	ldrb	r2, [r3, #1]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80043d6:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <low_level_init+0x10c>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	789a      	ldrb	r2, [r3, #2]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80043e2:	4b19      	ldr	r3, [pc, #100]	; (8004448 <low_level_init+0x10c>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	78da      	ldrb	r2, [r3, #3]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80043ee:	4b16      	ldr	r3, [pc, #88]	; (8004448 <low_level_init+0x10c>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	791a      	ldrb	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80043fa:	4b13      	ldr	r3, [pc, #76]	; (8004448 <low_level_init+0x10c>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	795a      	ldrb	r2, [r3, #5]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800440c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004414:	f043 030a 	orr.w	r3, r3, #10
 8004418:	b2da      	uxtb	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004420:	490f      	ldr	r1, [pc, #60]	; (8004460 <low_level_init+0x124>)
 8004422:	4810      	ldr	r0, [pc, #64]	; (8004464 <low_level_init+0x128>)
 8004424:	f7fc fbbd 	bl	8000ba2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004428:	480e      	ldr	r0, [pc, #56]	; (8004464 <low_level_init+0x128>)
 800442a:	f7fc fbec 	bl	8000c06 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d103      	bne.n	800443c <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fa47 	bl	80048c8 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800443a:	e001      	b.n	8004440 <low_level_init+0x104>
    Error_Handler();
 800443c:	f7fc f9e2 	bl	8000804 <Error_Handler>
}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	24004a8c 	.word	0x24004a8c
 800444c:	40028000 	.word	0x40028000
 8004450:	30040060 	.word	0x30040060
 8004454:	30040000 	.word	0x30040000
 8004458:	24004b3c 	.word	0x24004b3c
 800445c:	080120f4 	.word	0x080120f4
 8004460:	24000010 	.word	0x24000010
 8004464:	24004b74 	.word	0x24004b74

08004468 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b092      	sub	sp, #72	; 0x48
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004476:	2300      	movs	r3, #0
 8004478:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004480:	f107 030c 	add.w	r3, r7, #12
 8004484:	2230      	movs	r2, #48	; 0x30
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f00a fa84 	bl	800e996 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800448e:	f107 030c 	add.w	r3, r7, #12
 8004492:	2230      	movs	r2, #48	; 0x30
 8004494:	2100      	movs	r1, #0
 8004496:	4618      	mov	r0, r3
 8004498:	f00a fa7d 	bl	800e996 <memset>

  for(q = p; q != NULL; q = q->next)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	643b      	str	r3, [r7, #64]	; 0x40
 80044a0:	e045      	b.n	800452e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80044a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d902      	bls.n	80044ae <low_level_output+0x46>
      return ERR_IF;
 80044a8:	f06f 030b 	mvn.w	r3, #11
 80044ac:	e055      	b.n	800455a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80044ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b0:	6859      	ldr	r1, [r3, #4]
 80044b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044b4:	4613      	mov	r3, r2
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	3348      	adds	r3, #72	; 0x48
 80044be:	443b      	add	r3, r7
 80044c0:	3b3c      	subs	r3, #60	; 0x3c
 80044c2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80044c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c6:	895b      	ldrh	r3, [r3, #10]
 80044c8:	4619      	mov	r1, r3
 80044ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044cc:	4613      	mov	r3, r2
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	3348      	adds	r3, #72	; 0x48
 80044d6:	443b      	add	r3, r7
 80044d8:	3b38      	subs	r3, #56	; 0x38
 80044da:	6019      	str	r1, [r3, #0]

    if(i>0)
 80044dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d011      	beq.n	8004506 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80044e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e4:	1e5a      	subs	r2, r3, #1
 80044e6:	f107 000c 	add.w	r0, r7, #12
 80044ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044ec:	460b      	mov	r3, r1
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	440b      	add	r3, r1
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	18c1      	adds	r1, r0, r3
 80044f6:	4613      	mov	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	3348      	adds	r3, #72	; 0x48
 8004500:	443b      	add	r3, r7
 8004502:	3b34      	subs	r3, #52	; 0x34
 8004504:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800450e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004510:	4613      	mov	r3, r2
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	3348      	adds	r3, #72	; 0x48
 800451a:	443b      	add	r3, r7
 800451c:	3b34      	subs	r3, #52	; 0x34
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004524:	3301      	adds	r3, #1
 8004526:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	643b      	str	r3, [r7, #64]	; 0x40
 800452e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1b6      	bne.n	80044a2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	891b      	ldrh	r3, [r3, #8]
 8004538:	461a      	mov	r2, r3
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <low_level_output+0xfc>)
 800453c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800453e:	4a09      	ldr	r2, [pc, #36]	; (8004564 <low_level_output+0xfc>)
 8004540:	f107 030c 	add.w	r3, r7, #12
 8004544:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004546:	4a07      	ldr	r2, [pc, #28]	; (8004564 <low_level_output+0xfc>)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800454c:	2214      	movs	r2, #20
 800454e:	4905      	ldr	r1, [pc, #20]	; (8004564 <low_level_output+0xfc>)
 8004550:	4805      	ldr	r0, [pc, #20]	; (8004568 <low_level_output+0x100>)
 8004552:	f7fd f85d 	bl	8001610 <HAL_ETH_Transmit>

  return errval;
 8004556:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800455a:	4618      	mov	r0, r3
 800455c:	3748      	adds	r7, #72	; 0x48
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	24004b3c 	.word	0x24004b3c
 8004568:	24004a8c 	.word	0x24004a8c

0800456c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004578:	4b07      	ldr	r3, [pc, #28]	; (8004598 <low_level_input+0x2c>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d105      	bne.n	800458c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004580:	f107 030c 	add.w	r3, r7, #12
 8004584:	4619      	mov	r1, r3
 8004586:	4805      	ldr	r0, [pc, #20]	; (800459c <low_level_input+0x30>)
 8004588:	f7fd f8d9 	bl	800173e <HAL_ETH_ReadData>
  }

  return p;
 800458c:	68fb      	ldr	r3, [r7, #12]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	24004a88 	.word	0x24004a88
 800459c:	24004a8c 	.word	0x24004a8c

080045a0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff ffdd 	bl	800456c <low_level_input>
 80045b2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	4798      	blx	r3
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f001 feb6 	bl	800633c <pbuf_free>
      }
    }
  } while(p!=NULL);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1ea      	bne.n	80045ac <ethernetif_input+0xc>
}
 80045d6:	bf00      	nop
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <ethernetif_init+0x1c>
 80045ee:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <ethernetif_init+0x48>)
 80045f0:	f240 127b 	movw	r2, #379	; 0x17b
 80045f4:	490d      	ldr	r1, [pc, #52]	; (800462c <ethernetif_init+0x4c>)
 80045f6:	480e      	ldr	r0, [pc, #56]	; (8004630 <ethernetif_init+0x50>)
 80045f8:	f00a f968 	bl	800e8cc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2273      	movs	r2, #115	; 0x73
 8004600:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2274      	movs	r2, #116	; 0x74
 8004608:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a09      	ldr	r2, [pc, #36]	; (8004634 <ethernetif_init+0x54>)
 8004610:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a08      	ldr	r2, [pc, #32]	; (8004638 <ethernetif_init+0x58>)
 8004616:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff fe8f 	bl	800433c <low_level_init>

  return ERR_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	0800f704 	.word	0x0800f704
 800462c:	0800f720 	.word	0x0800f720
 8004630:	0800f730 	.word	0x0800f730
 8004634:	0800c9b1 	.word	0x0800c9b1
 8004638:	08004469 	.word	0x08004469

0800463c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004648:	68f9      	ldr	r1, [r7, #12]
 800464a:	4807      	ldr	r0, [pc, #28]	; (8004668 <pbuf_free_custom+0x2c>)
 800464c:	f000 ffdc 	bl	8005608 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <pbuf_free_custom+0x30>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d102      	bne.n	800465e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004658:	4b04      	ldr	r3, [pc, #16]	; (800466c <pbuf_free_custom+0x30>)
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
  }
}
 800465e:	bf00      	nop
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	080120f4 	.word	0x080120f4
 800466c:	24004a88 	.word	0x24004a88

08004670 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004674:	f7fc fc7c 	bl	8000f70 <HAL_GetTick>
 8004678:	4603      	mov	r3, r0
}
 800467a:	4618      	mov	r0, r3
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08e      	sub	sp, #56	; 0x38
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a5d      	ldr	r2, [pc, #372]	; (8004814 <HAL_ETH_MspInit+0x194>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	f040 80b3 	bne.w	800480a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80046a4:	4b5c      	ldr	r3, [pc, #368]	; (8004818 <HAL_ETH_MspInit+0x198>)
 80046a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80046aa:	4a5b      	ldr	r2, [pc, #364]	; (8004818 <HAL_ETH_MspInit+0x198>)
 80046ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80046b4:	4b58      	ldr	r3, [pc, #352]	; (8004818 <HAL_ETH_MspInit+0x198>)
 80046b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80046ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046be:	623b      	str	r3, [r7, #32]
 80046c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80046c2:	4b55      	ldr	r3, [pc, #340]	; (8004818 <HAL_ETH_MspInit+0x198>)
 80046c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80046c8:	4a53      	ldr	r2, [pc, #332]	; (8004818 <HAL_ETH_MspInit+0x198>)
 80046ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80046d2:	4b51      	ldr	r3, [pc, #324]	; (8004818 <HAL_ETH_MspInit+0x198>)
 80046d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80046d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80046e0:	4b4d      	ldr	r3, [pc, #308]	; (8004818 <HAL_ETH_MspInit+0x198>)
 80046e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80046e6:	4a4c      	ldr	r2, [pc, #304]	; (8004818 <HAL_ETH_MspInit+0x198>)
 80046e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80046f0:	4b49      	ldr	r3, [pc, #292]	; (8004818 <HAL_ETH_MspInit+0x198>)
 80046f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	61bb      	str	r3, [r7, #24]
 80046fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046fe:	4b46      	ldr	r3, [pc, #280]	; (8004818 <HAL_ETH_MspInit+0x198>)
 8004700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004704:	4a44      	ldr	r2, [pc, #272]	; (8004818 <HAL_ETH_MspInit+0x198>)
 8004706:	f043 0304 	orr.w	r3, r3, #4
 800470a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800470e:	4b42      	ldr	r3, [pc, #264]	; (8004818 <HAL_ETH_MspInit+0x198>)
 8004710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800471c:	4b3e      	ldr	r3, [pc, #248]	; (8004818 <HAL_ETH_MspInit+0x198>)
 800471e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004722:	4a3d      	ldr	r2, [pc, #244]	; (8004818 <HAL_ETH_MspInit+0x198>)
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800472c:	4b3a      	ldr	r3, [pc, #232]	; (8004818 <HAL_ETH_MspInit+0x198>)
 800472e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800473a:	4b37      	ldr	r3, [pc, #220]	; (8004818 <HAL_ETH_MspInit+0x198>)
 800473c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004740:	4a35      	ldr	r2, [pc, #212]	; (8004818 <HAL_ETH_MspInit+0x198>)
 8004742:	f043 0302 	orr.w	r3, r3, #2
 8004746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800474a:	4b33      	ldr	r3, [pc, #204]	; (8004818 <HAL_ETH_MspInit+0x198>)
 800474c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004758:	4b2f      	ldr	r3, [pc, #188]	; (8004818 <HAL_ETH_MspInit+0x198>)
 800475a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800475e:	4a2e      	ldr	r2, [pc, #184]	; (8004818 <HAL_ETH_MspInit+0x198>)
 8004760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004768:	4b2b      	ldr	r3, [pc, #172]	; (8004818 <HAL_ETH_MspInit+0x198>)
 800476a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800476e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004776:	2332      	movs	r3, #50	; 0x32
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477a:	2302      	movs	r3, #2
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477e:	2300      	movs	r3, #0
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004782:	2300      	movs	r3, #0
 8004784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004786:	230b      	movs	r3, #11
 8004788:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800478a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800478e:	4619      	mov	r1, r3
 8004790:	4822      	ldr	r0, [pc, #136]	; (800481c <HAL_ETH_MspInit+0x19c>)
 8004792:	f7fe fab1 	bl	8002cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004796:	2386      	movs	r3, #134	; 0x86
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479a:	2302      	movs	r3, #2
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a2:	2300      	movs	r3, #0
 80047a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047a6:	230b      	movs	r3, #11
 80047a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ae:	4619      	mov	r1, r3
 80047b0:	481b      	ldr	r0, [pc, #108]	; (8004820 <HAL_ETH_MspInit+0x1a0>)
 80047b2:	f7fe faa1 	bl	8002cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80047b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047bc:	2302      	movs	r3, #2
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c4:	2300      	movs	r3, #0
 80047c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047c8:	230b      	movs	r3, #11
 80047ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047d0:	4619      	mov	r1, r3
 80047d2:	4814      	ldr	r0, [pc, #80]	; (8004824 <HAL_ETH_MspInit+0x1a4>)
 80047d4:	f7fe fa90 	bl	8002cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80047d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047de:	2302      	movs	r3, #2
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e6:	2300      	movs	r3, #0
 80047e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047ea:	230b      	movs	r3, #11
 80047ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80047ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f2:	4619      	mov	r1, r3
 80047f4:	480c      	ldr	r0, [pc, #48]	; (8004828 <HAL_ETH_MspInit+0x1a8>)
 80047f6:	f7fe fa7f 	bl	8002cf8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80047fa:	2200      	movs	r2, #0
 80047fc:	2100      	movs	r1, #0
 80047fe:	203d      	movs	r0, #61	; 0x3d
 8004800:	f7fc fcbd 	bl	800117e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004804:	203d      	movs	r0, #61	; 0x3d
 8004806:	f7fc fcd4 	bl	80011b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800480a:	bf00      	nop
 800480c:	3738      	adds	r7, #56	; 0x38
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40028000 	.word	0x40028000
 8004818:	58024400 	.word	0x58024400
 800481c:	58020800 	.word	0x58020800
 8004820:	58020000 	.word	0x58020000
 8004824:	58020400 	.word	0x58020400
 8004828:	58021800 	.word	0x58021800

0800482c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004830:	4802      	ldr	r0, [pc, #8]	; (800483c <ETH_PHY_IO_Init+0x10>)
 8004832:	f7fd fc95 	bl	8002160 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	bd80      	pop	{r7, pc}
 800483c:	24004a8c 	.word	0x24004a8c

08004840 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return 0;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	68f9      	ldr	r1, [r7, #12]
 8004862:	4807      	ldr	r0, [pc, #28]	; (8004880 <ETH_PHY_IO_ReadReg+0x30>)
 8004864:	f7fd f9e6 	bl	8001c34 <HAL_ETH_ReadPHYRegister>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800486e:	f04f 33ff 	mov.w	r3, #4294967295
 8004872:	e000      	b.n	8004876 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	24004a8c 	.word	0x24004a8c

08004884 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	68f9      	ldr	r1, [r7, #12]
 8004896:	4807      	ldr	r0, [pc, #28]	; (80048b4 <ETH_PHY_IO_WriteReg+0x30>)
 8004898:	f7fd fa20 	bl	8001cdc <HAL_ETH_WritePHYRegister>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80048a2:	f04f 33ff 	mov.w	r3, #4294967295
 80048a6:	e000      	b.n	80048aa <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	24004a8c 	.word	0x24004a8c

080048b8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80048bc:	f7fc fb58 	bl	8000f70 <HAL_GetTick>
 80048c0:	4603      	mov	r3, r0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b0a0      	sub	sp, #128	; 0x80
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80048d0:	f107 030c 	add.w	r3, r7, #12
 80048d4:	2264      	movs	r2, #100	; 0x64
 80048d6:	2100      	movs	r1, #0
 80048d8:	4618      	mov	r0, r3
 80048da:	f00a f85c 	bl	800e996 <memset>
  int32_t PHYLinkState = 0;
 80048de:	2300      	movs	r3, #0
 80048e0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048e6:	2300      	movs	r3, #0
 80048e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80048ea:	2300      	movs	r3, #0
 80048ec:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80048ee:	483a      	ldr	r0, [pc, #232]	; (80049d8 <ethernet_link_check_state+0x110>)
 80048f0:	f7fc fa31 	bl	8000d56 <LAN8742_GetLinkState>
 80048f4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00c      	beq.n	8004922 <ethernet_link_check_state+0x5a>
 8004908:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800490a:	2b01      	cmp	r3, #1
 800490c:	dc09      	bgt.n	8004922 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800490e:	4833      	ldr	r0, [pc, #204]	; (80049dc <ethernet_link_check_state+0x114>)
 8004910:	f7fc fe2e 	bl	8001570 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f001 f8fb 	bl	8005b10 <netif_set_down>
    netif_set_link_down(netif);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f001 f95e 	bl	8005bdc <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004920:	e055      	b.n	80049ce <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d14e      	bne.n	80049ce <ethernet_link_check_state+0x106>
 8004930:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004932:	2b01      	cmp	r3, #1
 8004934:	dd4b      	ble.n	80049ce <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004938:	3b02      	subs	r3, #2
 800493a:	2b03      	cmp	r3, #3
 800493c:	d82a      	bhi.n	8004994 <ethernet_link_check_state+0xcc>
 800493e:	a201      	add	r2, pc, #4	; (adr r2, 8004944 <ethernet_link_check_state+0x7c>)
 8004940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004944:	08004955 	.word	0x08004955
 8004948:	08004967 	.word	0x08004967
 800494c:	08004977 	.word	0x08004977
 8004950:	08004987 	.word	0x08004987
      duplex = ETH_FULLDUPLEX_MODE;
 8004954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004958:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800495a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800495e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004960:	2301      	movs	r3, #1
 8004962:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004964:	e017      	b.n	8004996 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004966:	2300      	movs	r3, #0
 8004968:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800496a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800496e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004970:	2301      	movs	r3, #1
 8004972:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004974:	e00f      	b.n	8004996 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800497a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800497c:	2300      	movs	r3, #0
 800497e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004980:	2301      	movs	r3, #1
 8004982:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004984:	e007      	b.n	8004996 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004986:	2300      	movs	r3, #0
 8004988:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800498a:	2300      	movs	r3, #0
 800498c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800498e:	2301      	movs	r3, #1
 8004990:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004992:	e000      	b.n	8004996 <ethernet_link_check_state+0xce>
      break;
 8004994:	bf00      	nop
    if(linkchanged)
 8004996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d018      	beq.n	80049ce <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800499c:	f107 030c 	add.w	r3, r7, #12
 80049a0:	4619      	mov	r1, r3
 80049a2:	480e      	ldr	r0, [pc, #56]	; (80049dc <ethernet_link_check_state+0x114>)
 80049a4:	f7fd f9ee 	bl	8001d84 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80049a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80049ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ae:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80049b0:	f107 030c 	add.w	r3, r7, #12
 80049b4:	4619      	mov	r1, r3
 80049b6:	4809      	ldr	r0, [pc, #36]	; (80049dc <ethernet_link_check_state+0x114>)
 80049b8:	f7fd fbb8 	bl	800212c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80049bc:	4807      	ldr	r0, [pc, #28]	; (80049dc <ethernet_link_check_state+0x114>)
 80049be:	f7fc fd75 	bl	80014ac <HAL_ETH_Start>
      netif_set_up(netif);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f001 f838 	bl	8005a38 <netif_set_up>
      netif_set_link_up(netif);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f001 f8d3 	bl	8005b74 <netif_set_link_up>
}
 80049ce:	bf00      	nop
 80049d0:	3780      	adds	r7, #128	; 0x80
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	24004b74 	.word	0x24004b74
 80049dc:	24004a8c 	.word	0x24004a8c

080049e0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80049e8:	4812      	ldr	r0, [pc, #72]	; (8004a34 <HAL_ETH_RxAllocateCallback+0x54>)
 80049ea:	f000 fd9f 	bl	800552c <memp_malloc_pool>
 80049ee:	60f8      	str	r0, [r7, #12]
  if (p)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d014      	beq.n	8004a20 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f103 0220 	add.w	r2, r3, #32
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a0d      	ldr	r2, [pc, #52]	; (8004a38 <HAL_ETH_RxAllocateCallback+0x58>)
 8004a04:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004a0e:	9201      	str	r2, [sp, #4]
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2241      	movs	r2, #65	; 0x41
 8004a16:	2100      	movs	r1, #0
 8004a18:	2000      	movs	r0, #0
 8004a1a:	f001 fad5 	bl	8005fc8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004a1e:	e005      	b.n	8004a2c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004a20:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <HAL_ETH_RxAllocateCallback+0x5c>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	080120f4 	.word	0x080120f4
 8004a38:	0800463d 	.word	0x0800463d
 8004a3c:	24004a88 	.word	0x24004a88

08004a40 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b08d      	sub	sp, #52	; 0x34
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3b20      	subs	r3, #32
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a68:	2200      	movs	r2, #0
 8004a6a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	887a      	ldrh	r2, [r7, #2]
 8004a70:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d103      	bne.n	8004a82 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	e003      	b.n	8004a8a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a88:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a8e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a96:	e009      	b.n	8004aac <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9a:	891a      	ldrh	r2, [r3, #8]
 8004a9c:	887b      	ldrh	r3, [r7, #2]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f2      	bne.n	8004a98 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8004ab2:	887b      	ldrh	r3, [r7, #2]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	623a      	str	r2, [r7, #32]
 8004ab8:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	dd1d      	ble.n	8004afc <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	f003 021f 	and.w	r2, r3, #31
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ad0:	f3bf 8f4f 	dsb	sy
}
 8004ad4:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004ad6:	4a0d      	ldr	r2, [pc, #52]	; (8004b0c <HAL_ETH_RxLinkCallback+0xcc>)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	3320      	adds	r3, #32
 8004ae2:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	3b20      	subs	r3, #32
 8004ae8:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	dcf2      	bgt.n	8004ad6 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8004af0:	f3bf 8f4f 	dsb	sy
}
 8004af4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004af6:	f3bf 8f6f 	isb	sy
}
 8004afa:	bf00      	nop
}
 8004afc:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004afe:	bf00      	nop
 8004b00:	3734      	adds	r7, #52	; 0x34
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	e000ed00 	.word	0xe000ed00

08004b10 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	021b      	lsls	r3, r3, #8
 8004b1e:	b21a      	sxth	r2, r3
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	0a1b      	lsrs	r3, r3, #8
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	b21b      	sxth	r3, r3
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	b21b      	sxth	r3, r3
 8004b2c:	b29b      	uxth	r3, r3
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	061a      	lsls	r2, r3, #24
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	0a1b      	lsrs	r3, r3, #8
 8004b54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	0e1b      	lsrs	r3, r3, #24
 8004b5e:	4313      	orrs	r3, r2
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b089      	sub	sp, #36	; 0x24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <lwip_standard_chksum+0x40>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	dd0a      	ble.n	8004bac <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	1c53      	adds	r3, r2, #1
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	f107 030e 	add.w	r3, r7, #14
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	7812      	ldrb	r2, [r2, #0]
 8004ba4:	701a      	strb	r2, [r3, #0]
    len--;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8004bb0:	e00a      	b.n	8004bc8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	1c9a      	adds	r2, r3, #2
 8004bb6:	61ba      	str	r2, [r7, #24]
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
    len -= 2;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	3b02      	subs	r3, #2
 8004bc6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	dcf1      	bgt.n	8004bb2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	dd04      	ble.n	8004bde <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8004bd4:	f107 030e 	add.w	r3, r7, #14
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	7812      	ldrb	r2, [r2, #0]
 8004bdc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8004bde:	89fb      	ldrh	r3, [r7, #14]
 8004be0:	461a      	mov	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	4413      	add	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	0c1a      	lsrs	r2, r3, #16
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	0c1a      	lsrs	r2, r3, #16
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d007      	beq.n	8004c16 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	021b      	lsls	r3, r3, #8
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	0a1b      	lsrs	r3, r3, #8
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	b29b      	uxth	r3, r3
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3724      	adds	r7, #36	; 0x24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8004c32:	887b      	ldrh	r3, [r7, #2]
 8004c34:	4619      	mov	r1, r3
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff ff98 	bl	8004b6c <lwip_standard_chksum>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	b29b      	uxth	r3, r3
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b086      	sub	sp, #24
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	e02b      	b.n	8004cb8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	895b      	ldrh	r3, [r3, #10]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	f7ff ff7e 	bl	8004b6c <lwip_standard_chksum>
 8004c70:	4603      	mov	r3, r0
 8004c72:	461a      	mov	r2, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	4413      	add	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	0c1a      	lsrs	r2, r3, #16
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	4413      	add	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	895b      	ldrh	r3, [r3, #10]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00e      	beq.n	8004cb2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bf0c      	ite	eq
 8004c9a:	2301      	moveq	r3, #1
 8004c9c:	2300      	movne	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	021b      	lsls	r3, r3, #8
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1d0      	bne.n	8004c60 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	0a1b      	lsrs	r3, r3, #8
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	b29b      	uxth	r3, r3
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004cee:	f000 f8d5 	bl	8004e9c <mem_init>
  memp_init();
 8004cf2:	f000 fbd7 	bl	80054a4 <memp_init>
  pbuf_init();
  netif_init();
 8004cf6:	f000 fcd5 	bl	80056a4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004cfa:	f007 f853 	bl	800bda4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004cfe:	f001 fdab 	bl	8006858 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004d02:	f006 ffc5 	bl	800bc90 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004d1a:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <ptr_to_mem+0x20>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	4413      	add	r3, r2
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	24004bac 	.word	0x24004bac

08004d34 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <mem_to_ptr+0x20>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	b29b      	uxth	r3, r3
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	24004bac 	.word	0x24004bac

08004d58 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004d58:	b590      	push	{r4, r7, lr}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004d60:	4b45      	ldr	r3, [pc, #276]	; (8004e78 <plug_holes+0x120>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d206      	bcs.n	8004d78 <plug_holes+0x20>
 8004d6a:	4b44      	ldr	r3, [pc, #272]	; (8004e7c <plug_holes+0x124>)
 8004d6c:	f240 12df 	movw	r2, #479	; 0x1df
 8004d70:	4943      	ldr	r1, [pc, #268]	; (8004e80 <plug_holes+0x128>)
 8004d72:	4844      	ldr	r0, [pc, #272]	; (8004e84 <plug_holes+0x12c>)
 8004d74:	f009 fdaa 	bl	800e8cc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004d78:	4b43      	ldr	r3, [pc, #268]	; (8004e88 <plug_holes+0x130>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d306      	bcc.n	8004d90 <plug_holes+0x38>
 8004d82:	4b3e      	ldr	r3, [pc, #248]	; (8004e7c <plug_holes+0x124>)
 8004d84:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004d88:	4940      	ldr	r1, [pc, #256]	; (8004e8c <plug_holes+0x134>)
 8004d8a:	483e      	ldr	r0, [pc, #248]	; (8004e84 <plug_holes+0x12c>)
 8004d8c:	f009 fd9e 	bl	800e8cc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	791b      	ldrb	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d006      	beq.n	8004da6 <plug_holes+0x4e>
 8004d98:	4b38      	ldr	r3, [pc, #224]	; (8004e7c <plug_holes+0x124>)
 8004d9a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004d9e:	493c      	ldr	r1, [pc, #240]	; (8004e90 <plug_holes+0x138>)
 8004da0:	4838      	ldr	r0, [pc, #224]	; (8004e84 <plug_holes+0x12c>)
 8004da2:	f009 fd93 	bl	800e8cc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004dae:	d906      	bls.n	8004dbe <plug_holes+0x66>
 8004db0:	4b32      	ldr	r3, [pc, #200]	; (8004e7c <plug_holes+0x124>)
 8004db2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004db6:	4937      	ldr	r1, [pc, #220]	; (8004e94 <plug_holes+0x13c>)
 8004db8:	4832      	ldr	r0, [pc, #200]	; (8004e84 <plug_holes+0x12c>)
 8004dba:	f009 fd87 	bl	800e8cc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff ffa4 	bl	8004d10 <ptr_to_mem>
 8004dc8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d024      	beq.n	8004e1c <plug_holes+0xc4>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	791b      	ldrb	r3, [r3, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d120      	bne.n	8004e1c <plug_holes+0xc4>
 8004dda:	4b2b      	ldr	r3, [pc, #172]	; (8004e88 <plug_holes+0x130>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d01b      	beq.n	8004e1c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004de4:	4b2c      	ldr	r3, [pc, #176]	; (8004e98 <plug_holes+0x140>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d102      	bne.n	8004df4 <plug_holes+0x9c>
      lfree = mem;
 8004dee:	4a2a      	ldr	r2, [pc, #168]	; (8004e98 <plug_holes+0x140>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	881a      	ldrh	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e04:	d00a      	beq.n	8004e1c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff ff80 	bl	8004d10 <ptr_to_mem>
 8004e10:	4604      	mov	r4, r0
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff ff8e 	bl	8004d34 <mem_to_ptr>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	885b      	ldrh	r3, [r3, #2]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff ff75 	bl	8004d10 <ptr_to_mem>
 8004e26:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d01f      	beq.n	8004e70 <plug_holes+0x118>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	791b      	ldrb	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d11b      	bne.n	8004e70 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004e38:	4b17      	ldr	r3, [pc, #92]	; (8004e98 <plug_holes+0x140>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d102      	bne.n	8004e48 <plug_holes+0xf0>
      lfree = pmem;
 8004e42:	4a15      	ldr	r2, [pc, #84]	; (8004e98 <plug_holes+0x140>)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	881a      	ldrh	r2, [r3, #0]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e58:	d00a      	beq.n	8004e70 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff ff56 	bl	8004d10 <ptr_to_mem>
 8004e64:	4604      	mov	r4, r0
 8004e66:	68b8      	ldr	r0, [r7, #8]
 8004e68:	f7ff ff64 	bl	8004d34 <mem_to_ptr>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004e70:	bf00      	nop
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd90      	pop	{r4, r7, pc}
 8004e78:	24004bac 	.word	0x24004bac
 8004e7c:	0800f758 	.word	0x0800f758
 8004e80:	0800f788 	.word	0x0800f788
 8004e84:	0800f7a0 	.word	0x0800f7a0
 8004e88:	24004bb0 	.word	0x24004bb0
 8004e8c:	0800f7c8 	.word	0x0800f7c8
 8004e90:	0800f7e4 	.word	0x0800f7e4
 8004e94:	0800f800 	.word	0x0800f800
 8004e98:	24004bb4 	.word	0x24004bb4

08004e9c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004ea2:	4b16      	ldr	r3, [pc, #88]	; (8004efc <mem_init+0x60>)
 8004ea4:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <mem_init+0x64>)
 8004ea6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004ea8:	4b14      	ldr	r3, [pc, #80]	; (8004efc <mem_init+0x60>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004eb4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004ec2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004ec6:	f7ff ff23 	bl	8004d10 <ptr_to_mem>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4a0d      	ldr	r2, [pc, #52]	; (8004f04 <mem_init+0x68>)
 8004ece:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <mem_init+0x68>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <mem_init+0x68>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004ee0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004ee2:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <mem_init+0x68>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004eea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004eec:	4b03      	ldr	r3, [pc, #12]	; (8004efc <mem_init+0x60>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a05      	ldr	r2, [pc, #20]	; (8004f08 <mem_init+0x6c>)
 8004ef2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	24004bac 	.word	0x24004bac
 8004f00:	30044000 	.word	0x30044000
 8004f04:	24004bb0 	.word	0x24004bb0
 8004f08:	24004bb4 	.word	0x24004bb4

08004f0c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff ff0d 	bl	8004d34 <mem_to_ptr>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff fef4 	bl	8004d10 <ptr_to_mem>
 8004f28:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	885b      	ldrh	r3, [r3, #2]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff feee 	bl	8004d10 <ptr_to_mem>
 8004f34:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f3e:	d818      	bhi.n	8004f72 <mem_link_valid+0x66>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	885b      	ldrh	r3, [r3, #2]
 8004f44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f48:	d813      	bhi.n	8004f72 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004f4e:	8afa      	ldrh	r2, [r7, #22]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d004      	beq.n	8004f5e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	8afa      	ldrh	r2, [r7, #22]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d109      	bne.n	8004f72 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004f5e:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <mem_link_valid+0x74>)
 8004f60:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d006      	beq.n	8004f76 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	885b      	ldrh	r3, [r3, #2]
 8004f6c:	8afa      	ldrh	r2, [r7, #22]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d001      	beq.n	8004f76 <mem_link_valid+0x6a>
    return 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	e000      	b.n	8004f78 <mem_link_valid+0x6c>
  }
  return 1;
 8004f76:	2301      	movs	r3, #1
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	24004bb0 	.word	0x24004bb0

08004f84 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d04c      	beq.n	800502c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004f9c:	4b25      	ldr	r3, [pc, #148]	; (8005034 <mem_free+0xb0>)
 8004f9e:	f240 2273 	movw	r2, #627	; 0x273
 8004fa2:	4925      	ldr	r1, [pc, #148]	; (8005038 <mem_free+0xb4>)
 8004fa4:	4825      	ldr	r0, [pc, #148]	; (800503c <mem_free+0xb8>)
 8004fa6:	f009 fc91 	bl	800e8cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004faa:	e040      	b.n	800502e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3b08      	subs	r3, #8
 8004fb0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004fb2:	4b23      	ldr	r3, [pc, #140]	; (8005040 <mem_free+0xbc>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d306      	bcc.n	8004fca <mem_free+0x46>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f103 020c 	add.w	r2, r3, #12
 8004fc2:	4b20      	ldr	r3, [pc, #128]	; (8005044 <mem_free+0xc0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d907      	bls.n	8004fda <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004fca:	4b1a      	ldr	r3, [pc, #104]	; (8005034 <mem_free+0xb0>)
 8004fcc:	f240 227f 	movw	r2, #639	; 0x27f
 8004fd0:	491d      	ldr	r1, [pc, #116]	; (8005048 <mem_free+0xc4>)
 8004fd2:	481a      	ldr	r0, [pc, #104]	; (800503c <mem_free+0xb8>)
 8004fd4:	f009 fc7a 	bl	800e8cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004fd8:	e029      	b.n	800502e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	791b      	ldrb	r3, [r3, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d107      	bne.n	8004ff2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004fe2:	4b14      	ldr	r3, [pc, #80]	; (8005034 <mem_free+0xb0>)
 8004fe4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004fe8:	4918      	ldr	r1, [pc, #96]	; (800504c <mem_free+0xc8>)
 8004fea:	4814      	ldr	r0, [pc, #80]	; (800503c <mem_free+0xb8>)
 8004fec:	f009 fc6e 	bl	800e8cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ff0:	e01d      	b.n	800502e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff ff8a 	bl	8004f0c <mem_link_valid>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d107      	bne.n	800500e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004ffe:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <mem_free+0xb0>)
 8005000:	f240 2295 	movw	r2, #661	; 0x295
 8005004:	4912      	ldr	r1, [pc, #72]	; (8005050 <mem_free+0xcc>)
 8005006:	480d      	ldr	r0, [pc, #52]	; (800503c <mem_free+0xb8>)
 8005008:	f009 fc60 	bl	800e8cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800500c:	e00f      	b.n	800502e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005014:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <mem_free+0xd0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	429a      	cmp	r2, r3
 800501c:	d202      	bcs.n	8005024 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800501e:	4a0d      	ldr	r2, [pc, #52]	; (8005054 <mem_free+0xd0>)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f7ff fe97 	bl	8004d58 <plug_holes>
 800502a:	e000      	b.n	800502e <mem_free+0xaa>
    return;
 800502c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	0800f758 	.word	0x0800f758
 8005038:	0800f82c 	.word	0x0800f82c
 800503c:	0800f7a0 	.word	0x0800f7a0
 8005040:	24004bac 	.word	0x24004bac
 8005044:	24004bb0 	.word	0x24004bb0
 8005048:	0800f850 	.word	0x0800f850
 800504c:	0800f86c 	.word	0x0800f86c
 8005050:	0800f894 	.word	0x0800f894
 8005054:	24004bb4 	.word	0x24004bb4

08005058 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005064:	887b      	ldrh	r3, [r7, #2]
 8005066:	3303      	adds	r3, #3
 8005068:	b29b      	uxth	r3, r3
 800506a:	f023 0303 	bic.w	r3, r3, #3
 800506e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005070:	8bfb      	ldrh	r3, [r7, #30]
 8005072:	2b0b      	cmp	r3, #11
 8005074:	d801      	bhi.n	800507a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005076:	230c      	movs	r3, #12
 8005078:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800507a:	8bfb      	ldrh	r3, [r7, #30]
 800507c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005080:	d803      	bhi.n	800508a <mem_trim+0x32>
 8005082:	8bfa      	ldrh	r2, [r7, #30]
 8005084:	887b      	ldrh	r3, [r7, #2]
 8005086:	429a      	cmp	r2, r3
 8005088:	d201      	bcs.n	800508e <mem_trim+0x36>
    return NULL;
 800508a:	2300      	movs	r3, #0
 800508c:	e0cc      	b.n	8005228 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800508e:	4b68      	ldr	r3, [pc, #416]	; (8005230 <mem_trim+0x1d8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	429a      	cmp	r2, r3
 8005096:	d304      	bcc.n	80050a2 <mem_trim+0x4a>
 8005098:	4b66      	ldr	r3, [pc, #408]	; (8005234 <mem_trim+0x1dc>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d306      	bcc.n	80050b0 <mem_trim+0x58>
 80050a2:	4b65      	ldr	r3, [pc, #404]	; (8005238 <mem_trim+0x1e0>)
 80050a4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80050a8:	4964      	ldr	r1, [pc, #400]	; (800523c <mem_trim+0x1e4>)
 80050aa:	4865      	ldr	r0, [pc, #404]	; (8005240 <mem_trim+0x1e8>)
 80050ac:	f009 fc0e 	bl	800e8cc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80050b0:	4b5f      	ldr	r3, [pc, #380]	; (8005230 <mem_trim+0x1d8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d304      	bcc.n	80050c4 <mem_trim+0x6c>
 80050ba:	4b5e      	ldr	r3, [pc, #376]	; (8005234 <mem_trim+0x1dc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d301      	bcc.n	80050c8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	e0af      	b.n	8005228 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3b08      	subs	r3, #8
 80050cc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80050ce:	69b8      	ldr	r0, [r7, #24]
 80050d0:	f7ff fe30 	bl	8004d34 <mem_to_ptr>
 80050d4:	4603      	mov	r3, r0
 80050d6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	881a      	ldrh	r2, [r3, #0]
 80050dc:	8afb      	ldrh	r3, [r7, #22]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b08      	subs	r3, #8
 80050e4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80050e6:	8bfa      	ldrh	r2, [r7, #30]
 80050e8:	8abb      	ldrh	r3, [r7, #20]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d906      	bls.n	80050fc <mem_trim+0xa4>
 80050ee:	4b52      	ldr	r3, [pc, #328]	; (8005238 <mem_trim+0x1e0>)
 80050f0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80050f4:	4953      	ldr	r1, [pc, #332]	; (8005244 <mem_trim+0x1ec>)
 80050f6:	4852      	ldr	r0, [pc, #328]	; (8005240 <mem_trim+0x1e8>)
 80050f8:	f009 fbe8 	bl	800e8cc <iprintf>
  if (newsize > size) {
 80050fc:	8bfa      	ldrh	r2, [r7, #30]
 80050fe:	8abb      	ldrh	r3, [r7, #20]
 8005100:	429a      	cmp	r2, r3
 8005102:	d901      	bls.n	8005108 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005104:	2300      	movs	r3, #0
 8005106:	e08f      	b.n	8005228 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005108:	8bfa      	ldrh	r2, [r7, #30]
 800510a:	8abb      	ldrh	r3, [r7, #20]
 800510c:	429a      	cmp	r2, r3
 800510e:	d101      	bne.n	8005114 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	e089      	b.n	8005228 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff fdf9 	bl	8004d10 <ptr_to_mem>
 800511e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	791b      	ldrb	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d13f      	bne.n	80051a8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005130:	d106      	bne.n	8005140 <mem_trim+0xe8>
 8005132:	4b41      	ldr	r3, [pc, #260]	; (8005238 <mem_trim+0x1e0>)
 8005134:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005138:	4943      	ldr	r1, [pc, #268]	; (8005248 <mem_trim+0x1f0>)
 800513a:	4841      	ldr	r0, [pc, #260]	; (8005240 <mem_trim+0x1e8>)
 800513c:	f009 fbc6 	bl	800e8cc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005146:	8afa      	ldrh	r2, [r7, #22]
 8005148:	8bfb      	ldrh	r3, [r7, #30]
 800514a:	4413      	add	r3, r2
 800514c:	b29b      	uxth	r3, r3
 800514e:	3308      	adds	r3, #8
 8005150:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005152:	4b3e      	ldr	r3, [pc, #248]	; (800524c <mem_trim+0x1f4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	429a      	cmp	r2, r3
 800515a:	d106      	bne.n	800516a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800515c:	89fb      	ldrh	r3, [r7, #14]
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff fdd6 	bl	8004d10 <ptr_to_mem>
 8005164:	4603      	mov	r3, r0
 8005166:	4a39      	ldr	r2, [pc, #228]	; (800524c <mem_trim+0x1f4>)
 8005168:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800516a:	89fb      	ldrh	r3, [r7, #14]
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff fdcf 	bl	8004d10 <ptr_to_mem>
 8005172:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2200      	movs	r2, #0
 8005178:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	89ba      	ldrh	r2, [r7, #12]
 800517e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	8afa      	ldrh	r2, [r7, #22]
 8005184:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	89fa      	ldrh	r2, [r7, #14]
 800518a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005194:	d047      	beq.n	8005226 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff fdb8 	bl	8004d10 <ptr_to_mem>
 80051a0:	4602      	mov	r2, r0
 80051a2:	89fb      	ldrh	r3, [r7, #14]
 80051a4:	8053      	strh	r3, [r2, #2]
 80051a6:	e03e      	b.n	8005226 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80051a8:	8bfb      	ldrh	r3, [r7, #30]
 80051aa:	f103 0214 	add.w	r2, r3, #20
 80051ae:	8abb      	ldrh	r3, [r7, #20]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d838      	bhi.n	8005226 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80051b4:	8afa      	ldrh	r2, [r7, #22]
 80051b6:	8bfb      	ldrh	r3, [r7, #30]
 80051b8:	4413      	add	r3, r2
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3308      	adds	r3, #8
 80051be:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80051c8:	d106      	bne.n	80051d8 <mem_trim+0x180>
 80051ca:	4b1b      	ldr	r3, [pc, #108]	; (8005238 <mem_trim+0x1e0>)
 80051cc:	f240 3216 	movw	r2, #790	; 0x316
 80051d0:	491d      	ldr	r1, [pc, #116]	; (8005248 <mem_trim+0x1f0>)
 80051d2:	481b      	ldr	r0, [pc, #108]	; (8005240 <mem_trim+0x1e8>)
 80051d4:	f009 fb7a 	bl	800e8cc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80051d8:	89fb      	ldrh	r3, [r7, #14]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff fd98 	bl	8004d10 <ptr_to_mem>
 80051e0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80051e2:	4b1a      	ldr	r3, [pc, #104]	; (800524c <mem_trim+0x1f4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d202      	bcs.n	80051f2 <mem_trim+0x19a>
      lfree = mem2;
 80051ec:	4a17      	ldr	r2, [pc, #92]	; (800524c <mem_trim+0x1f4>)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	2200      	movs	r2, #0
 80051f6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	881a      	ldrh	r2, [r3, #0]
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	8afa      	ldrh	r2, [r7, #22]
 8005204:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	89fa      	ldrh	r2, [r7, #14]
 800520a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005214:	d007      	beq.n	8005226 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff fd78 	bl	8004d10 <ptr_to_mem>
 8005220:	4602      	mov	r2, r0
 8005222:	89fb      	ldrh	r3, [r7, #14]
 8005224:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005226:	687b      	ldr	r3, [r7, #4]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	24004bac 	.word	0x24004bac
 8005234:	24004bb0 	.word	0x24004bb0
 8005238:	0800f758 	.word	0x0800f758
 800523c:	0800f8c8 	.word	0x0800f8c8
 8005240:	0800f7a0 	.word	0x0800f7a0
 8005244:	0800f8e0 	.word	0x0800f8e0
 8005248:	0800f900 	.word	0x0800f900
 800524c:	24004bb4 	.word	0x24004bb4

08005250 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <mem_malloc+0x14>
    return NULL;
 8005260:	2300      	movs	r3, #0
 8005262:	e0d9      	b.n	8005418 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005264:	88fb      	ldrh	r3, [r7, #6]
 8005266:	3303      	adds	r3, #3
 8005268:	b29b      	uxth	r3, r3
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005270:	8bbb      	ldrh	r3, [r7, #28]
 8005272:	2b0b      	cmp	r3, #11
 8005274:	d801      	bhi.n	800527a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005276:	230c      	movs	r3, #12
 8005278:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800527a:	8bbb      	ldrh	r3, [r7, #28]
 800527c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005280:	d803      	bhi.n	800528a <mem_malloc+0x3a>
 8005282:	8bba      	ldrh	r2, [r7, #28]
 8005284:	88fb      	ldrh	r3, [r7, #6]
 8005286:	429a      	cmp	r2, r3
 8005288:	d201      	bcs.n	800528e <mem_malloc+0x3e>
    return NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	e0c4      	b.n	8005418 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800528e:	4b64      	ldr	r3, [pc, #400]	; (8005420 <mem_malloc+0x1d0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff fd4e 	bl	8004d34 <mem_to_ptr>
 8005298:	4603      	mov	r3, r0
 800529a:	83fb      	strh	r3, [r7, #30]
 800529c:	e0b4      	b.n	8005408 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800529e:	8bfb      	ldrh	r3, [r7, #30]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff fd35 	bl	8004d10 <ptr_to_mem>
 80052a6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	791b      	ldrb	r3, [r3, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f040 80a4 	bne.w	80053fa <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	8bfb      	ldrh	r3, [r7, #30]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f1a3 0208 	sub.w	r2, r3, #8
 80052c0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80052c2:	429a      	cmp	r2, r3
 80052c4:	f0c0 8099 	bcc.w	80053fa <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	8bfb      	ldrh	r3, [r7, #30]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f1a3 0208 	sub.w	r2, r3, #8
 80052d6:	8bbb      	ldrh	r3, [r7, #28]
 80052d8:	3314      	adds	r3, #20
 80052da:	429a      	cmp	r2, r3
 80052dc:	d333      	bcc.n	8005346 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80052de:	8bfa      	ldrh	r2, [r7, #30]
 80052e0:	8bbb      	ldrh	r3, [r7, #28]
 80052e2:	4413      	add	r3, r2
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	3308      	adds	r3, #8
 80052e8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80052ea:	8a7b      	ldrh	r3, [r7, #18]
 80052ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80052f0:	d106      	bne.n	8005300 <mem_malloc+0xb0>
 80052f2:	4b4c      	ldr	r3, [pc, #304]	; (8005424 <mem_malloc+0x1d4>)
 80052f4:	f240 3287 	movw	r2, #903	; 0x387
 80052f8:	494b      	ldr	r1, [pc, #300]	; (8005428 <mem_malloc+0x1d8>)
 80052fa:	484c      	ldr	r0, [pc, #304]	; (800542c <mem_malloc+0x1dc>)
 80052fc:	f009 fae6 	bl	800e8cc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005300:	8a7b      	ldrh	r3, [r7, #18]
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff fd04 	bl	8004d10 <ptr_to_mem>
 8005308:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	881a      	ldrh	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8bfa      	ldrh	r2, [r7, #30]
 800531c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	8a7a      	ldrh	r2, [r7, #18]
 8005322:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2201      	movs	r2, #1
 8005328:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005332:	d00b      	beq.n	800534c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff fce9 	bl	8004d10 <ptr_to_mem>
 800533e:	4602      	mov	r2, r0
 8005340:	8a7b      	ldrh	r3, [r7, #18]
 8005342:	8053      	strh	r3, [r2, #2]
 8005344:	e002      	b.n	800534c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2201      	movs	r2, #1
 800534a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800534c:	4b34      	ldr	r3, [pc, #208]	; (8005420 <mem_malloc+0x1d0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	429a      	cmp	r2, r3
 8005354:	d127      	bne.n	80053a6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005356:	4b32      	ldr	r3, [pc, #200]	; (8005420 <mem_malloc+0x1d0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800535c:	e005      	b.n	800536a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fcd4 	bl	8004d10 <ptr_to_mem>
 8005368:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	791b      	ldrb	r3, [r3, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d004      	beq.n	800537c <mem_malloc+0x12c>
 8005372:	4b2f      	ldr	r3, [pc, #188]	; (8005430 <mem_malloc+0x1e0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	429a      	cmp	r2, r3
 800537a:	d1f0      	bne.n	800535e <mem_malloc+0x10e>
          }
          lfree = cur;
 800537c:	4a28      	ldr	r2, [pc, #160]	; (8005420 <mem_malloc+0x1d0>)
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005382:	4b27      	ldr	r3, [pc, #156]	; (8005420 <mem_malloc+0x1d0>)
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b2a      	ldr	r3, [pc, #168]	; (8005430 <mem_malloc+0x1e0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d00b      	beq.n	80053a6 <mem_malloc+0x156>
 800538e:	4b24      	ldr	r3, [pc, #144]	; (8005420 <mem_malloc+0x1d0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	791b      	ldrb	r3, [r3, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d006      	beq.n	80053a6 <mem_malloc+0x156>
 8005398:	4b22      	ldr	r3, [pc, #136]	; (8005424 <mem_malloc+0x1d4>)
 800539a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800539e:	4925      	ldr	r1, [pc, #148]	; (8005434 <mem_malloc+0x1e4>)
 80053a0:	4822      	ldr	r0, [pc, #136]	; (800542c <mem_malloc+0x1dc>)
 80053a2:	f009 fa93 	bl	800e8cc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80053a6:	8bba      	ldrh	r2, [r7, #28]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	4413      	add	r3, r2
 80053ac:	3308      	adds	r3, #8
 80053ae:	4a20      	ldr	r2, [pc, #128]	; (8005430 <mem_malloc+0x1e0>)
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d906      	bls.n	80053c4 <mem_malloc+0x174>
 80053b6:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <mem_malloc+0x1d4>)
 80053b8:	f240 32b9 	movw	r2, #953	; 0x3b9
 80053bc:	491e      	ldr	r1, [pc, #120]	; (8005438 <mem_malloc+0x1e8>)
 80053be:	481b      	ldr	r0, [pc, #108]	; (800542c <mem_malloc+0x1dc>)
 80053c0:	f009 fa84 	bl	800e8cc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d006      	beq.n	80053dc <mem_malloc+0x18c>
 80053ce:	4b15      	ldr	r3, [pc, #84]	; (8005424 <mem_malloc+0x1d4>)
 80053d0:	f240 32bb 	movw	r2, #955	; 0x3bb
 80053d4:	4919      	ldr	r1, [pc, #100]	; (800543c <mem_malloc+0x1ec>)
 80053d6:	4815      	ldr	r0, [pc, #84]	; (800542c <mem_malloc+0x1dc>)
 80053d8:	f009 fa78 	bl	800e8cc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d006      	beq.n	80053f4 <mem_malloc+0x1a4>
 80053e6:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <mem_malloc+0x1d4>)
 80053e8:	f240 32bd 	movw	r2, #957	; 0x3bd
 80053ec:	4914      	ldr	r1, [pc, #80]	; (8005440 <mem_malloc+0x1f0>)
 80053ee:	480f      	ldr	r0, [pc, #60]	; (800542c <mem_malloc+0x1dc>)
 80053f0:	f009 fa6c 	bl	800e8cc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	3308      	adds	r3, #8
 80053f8:	e00e      	b.n	8005418 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80053fa:	8bfb      	ldrh	r3, [r7, #30]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff fc87 	bl	8004d10 <ptr_to_mem>
 8005402:	4603      	mov	r3, r0
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005408:	8bfa      	ldrh	r2, [r7, #30]
 800540a:	8bbb      	ldrh	r3, [r7, #28]
 800540c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005410:	429a      	cmp	r2, r3
 8005412:	f4ff af44 	bcc.w	800529e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3720      	adds	r7, #32
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	24004bb4 	.word	0x24004bb4
 8005424:	0800f758 	.word	0x0800f758
 8005428:	0800f900 	.word	0x0800f900
 800542c:	0800f7a0 	.word	0x0800f7a0
 8005430:	24004bb0 	.word	0x24004bb0
 8005434:	0800f914 	.word	0x0800f914
 8005438:	0800f930 	.word	0x0800f930
 800543c:	0800f960 	.word	0x0800f960
 8005440:	0800f990 	.word	0x0800f990

08005444 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	3303      	adds	r3, #3
 800545a:	f023 0303 	bic.w	r3, r3, #3
 800545e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e011      	b.n	800548a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4413      	add	r3, r2
 8005482:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3301      	adds	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	885b      	ldrh	r3, [r3, #2]
 800548e:	461a      	mov	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4293      	cmp	r3, r2
 8005494:	dbe7      	blt.n	8005466 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005496:	bf00      	nop
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80054aa:	2300      	movs	r3, #0
 80054ac:	80fb      	strh	r3, [r7, #6]
 80054ae:	e009      	b.n	80054c4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80054b0:	88fb      	ldrh	r3, [r7, #6]
 80054b2:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <memp_init+0x30>)
 80054b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff ffc3 	bl	8005444 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80054be:	88fb      	ldrh	r3, [r7, #6]
 80054c0:	3301      	adds	r3, #1
 80054c2:	80fb      	strh	r3, [r7, #6]
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d9f2      	bls.n	80054b0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	0801216c 	.word	0x0801216c

080054d8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d012      	beq.n	8005514 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d006      	beq.n	8005510 <do_memp_malloc_pool+0x38>
 8005502:	4b07      	ldr	r3, [pc, #28]	; (8005520 <do_memp_malloc_pool+0x48>)
 8005504:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005508:	4906      	ldr	r1, [pc, #24]	; (8005524 <do_memp_malloc_pool+0x4c>)
 800550a:	4807      	ldr	r0, [pc, #28]	; (8005528 <do_memp_malloc_pool+0x50>)
 800550c:	f009 f9de 	bl	800e8cc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	e000      	b.n	8005516 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	0800f9b4 	.word	0x0800f9b4
 8005524:	0800f9e4 	.word	0x0800f9e4
 8005528:	0800fa08 	.word	0x0800fa08

0800552c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <memp_malloc_pool+0x1c>
 800553a:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <memp_malloc_pool+0x38>)
 800553c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005540:	4909      	ldr	r1, [pc, #36]	; (8005568 <memp_malloc_pool+0x3c>)
 8005542:	480a      	ldr	r0, [pc, #40]	; (800556c <memp_malloc_pool+0x40>)
 8005544:	f009 f9c2 	bl	800e8cc <iprintf>
  if (desc == NULL) {
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <memp_malloc_pool+0x26>
    return NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	e003      	b.n	800555a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff ffc0 	bl	80054d8 <do_memp_malloc_pool>
 8005558:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	0800f9b4 	.word	0x0800f9b4
 8005568:	0800fa30 	.word	0x0800fa30
 800556c:	0800fa08 	.word	0x0800fa08

08005570 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	2b08      	cmp	r3, #8
 800557e:	d908      	bls.n	8005592 <memp_malloc+0x22>
 8005580:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <memp_malloc+0x3c>)
 8005582:	f240 1257 	movw	r2, #343	; 0x157
 8005586:	490a      	ldr	r1, [pc, #40]	; (80055b0 <memp_malloc+0x40>)
 8005588:	480a      	ldr	r0, [pc, #40]	; (80055b4 <memp_malloc+0x44>)
 800558a:	f009 f99f 	bl	800e8cc <iprintf>
 800558e:	2300      	movs	r3, #0
 8005590:	e008      	b.n	80055a4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	4a08      	ldr	r2, [pc, #32]	; (80055b8 <memp_malloc+0x48>)
 8005596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff ff9c 	bl	80054d8 <do_memp_malloc_pool>
 80055a0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80055a2:	68fb      	ldr	r3, [r7, #12]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	0800f9b4 	.word	0x0800f9b4
 80055b0:	0800fa44 	.word	0x0800fa44
 80055b4:	0800fa08 	.word	0x0800fa08
 80055b8:	0801216c 	.word	0x0801216c

080055bc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d006      	beq.n	80055de <do_memp_free_pool+0x22>
 80055d0:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <do_memp_free_pool+0x40>)
 80055d2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80055d6:	490a      	ldr	r1, [pc, #40]	; (8005600 <do_memp_free_pool+0x44>)
 80055d8:	480a      	ldr	r0, [pc, #40]	; (8005604 <do_memp_free_pool+0x48>)
 80055da:	f009 f977 	bl	800e8cc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80055f4:	bf00      	nop
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	0800f9b4 	.word	0x0800f9b4
 8005600:	0800fa64 	.word	0x0800fa64
 8005604:	0800fa08 	.word	0x0800fa08

08005608 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d106      	bne.n	8005626 <memp_free_pool+0x1e>
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <memp_free_pool+0x3c>)
 800561a:	f240 1295 	movw	r2, #405	; 0x195
 800561e:	490a      	ldr	r1, [pc, #40]	; (8005648 <memp_free_pool+0x40>)
 8005620:	480a      	ldr	r0, [pc, #40]	; (800564c <memp_free_pool+0x44>)
 8005622:	f009 f953 	bl	800e8cc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <memp_free_pool+0x34>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff ffc1 	bl	80055bc <do_memp_free_pool>
 800563a:	e000      	b.n	800563e <memp_free_pool+0x36>
    return;
 800563c:	bf00      	nop
}
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	0800f9b4 	.word	0x0800f9b4
 8005648:	0800fa30 	.word	0x0800fa30
 800564c:	0800fa08 	.word	0x0800fa08

08005650 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	4603      	mov	r3, r0
 8005658:	6039      	str	r1, [r7, #0]
 800565a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	2b08      	cmp	r3, #8
 8005660:	d907      	bls.n	8005672 <memp_free+0x22>
 8005662:	4b0c      	ldr	r3, [pc, #48]	; (8005694 <memp_free+0x44>)
 8005664:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005668:	490b      	ldr	r1, [pc, #44]	; (8005698 <memp_free+0x48>)
 800566a:	480c      	ldr	r0, [pc, #48]	; (800569c <memp_free+0x4c>)
 800566c:	f009 f92e 	bl	800e8cc <iprintf>
 8005670:	e00c      	b.n	800568c <memp_free+0x3c>

  if (mem == NULL) {
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <memp_free+0x50>)
 800567c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff ff9a 	bl	80055bc <do_memp_free_pool>
 8005688:	e000      	b.n	800568c <memp_free+0x3c>
    return;
 800568a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	0800f9b4 	.word	0x0800f9b4
 8005698:	0800fa84 	.word	0x0800fa84
 800569c:	0800fa08 	.word	0x0800fa08
 80056a0:	0801216c 	.word	0x0801216c

080056a4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80056a8:	bf00      	nop
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d108      	bne.n	80056da <netif_add+0x26>
 80056c8:	4b57      	ldr	r3, [pc, #348]	; (8005828 <netif_add+0x174>)
 80056ca:	f240 1227 	movw	r2, #295	; 0x127
 80056ce:	4957      	ldr	r1, [pc, #348]	; (800582c <netif_add+0x178>)
 80056d0:	4857      	ldr	r0, [pc, #348]	; (8005830 <netif_add+0x17c>)
 80056d2:	f009 f8fb 	bl	800e8cc <iprintf>
 80056d6:	2300      	movs	r3, #0
 80056d8:	e0a2      	b.n	8005820 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d108      	bne.n	80056f2 <netif_add+0x3e>
 80056e0:	4b51      	ldr	r3, [pc, #324]	; (8005828 <netif_add+0x174>)
 80056e2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80056e6:	4953      	ldr	r1, [pc, #332]	; (8005834 <netif_add+0x180>)
 80056e8:	4851      	ldr	r0, [pc, #324]	; (8005830 <netif_add+0x17c>)
 80056ea:	f009 f8ef 	bl	800e8cc <iprintf>
 80056ee:	2300      	movs	r3, #0
 80056f0:	e096      	b.n	8005820 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80056f8:	4b4f      	ldr	r3, [pc, #316]	; (8005838 <netif_add+0x184>)
 80056fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005702:	4b4d      	ldr	r3, [pc, #308]	; (8005838 <netif_add+0x184>)
 8005704:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800570c:	4b4a      	ldr	r3, [pc, #296]	; (8005838 <netif_add+0x184>)
 800570e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4a45      	ldr	r2, [pc, #276]	; (800583c <netif_add+0x188>)
 8005726:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a3a      	ldr	r2, [r7, #32]
 8005740:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005742:	4b3f      	ldr	r3, [pc, #252]	; (8005840 <netif_add+0x18c>)
 8005744:	781a      	ldrb	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005750:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f913 	bl	8005984 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	4798      	blx	r3
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <netif_add+0xba>
    return NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	e058      	b.n	8005820 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005774:	2bff      	cmp	r3, #255	; 0xff
 8005776:	d103      	bne.n	8005780 <netif_add+0xcc>
        netif->num = 0;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005780:	2300      	movs	r3, #0
 8005782:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005784:	4b2f      	ldr	r3, [pc, #188]	; (8005844 <netif_add+0x190>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	e02b      	b.n	80057e4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	429a      	cmp	r2, r3
 8005792:	d106      	bne.n	80057a2 <netif_add+0xee>
 8005794:	4b24      	ldr	r3, [pc, #144]	; (8005828 <netif_add+0x174>)
 8005796:	f240 128b 	movw	r2, #395	; 0x18b
 800579a:	492b      	ldr	r1, [pc, #172]	; (8005848 <netif_add+0x194>)
 800579c:	4824      	ldr	r0, [pc, #144]	; (8005830 <netif_add+0x17c>)
 800579e:	f009 f895 	bl	800e8cc <iprintf>
        num_netifs++;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	3301      	adds	r3, #1
 80057a6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	2bff      	cmp	r3, #255	; 0xff
 80057ac:	dd06      	ble.n	80057bc <netif_add+0x108>
 80057ae:	4b1e      	ldr	r3, [pc, #120]	; (8005828 <netif_add+0x174>)
 80057b0:	f240 128d 	movw	r2, #397	; 0x18d
 80057b4:	4925      	ldr	r1, [pc, #148]	; (800584c <netif_add+0x198>)
 80057b6:	481e      	ldr	r0, [pc, #120]	; (8005830 <netif_add+0x17c>)
 80057b8:	f009 f888 	bl	800e8cc <iprintf>
        if (netif2->num == netif->num) {
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d108      	bne.n	80057de <netif_add+0x12a>
          netif->num++;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057d2:	3301      	adds	r3, #1
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80057dc:	e005      	b.n	80057ea <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1d0      	bne.n	800578c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1be      	bne.n	800576e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057f6:	2bfe      	cmp	r3, #254	; 0xfe
 80057f8:	d103      	bne.n	8005802 <netif_add+0x14e>
    netif_num = 0;
 80057fa:	4b11      	ldr	r3, [pc, #68]	; (8005840 <netif_add+0x18c>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	e006      	b.n	8005810 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005808:	3301      	adds	r3, #1
 800580a:	b2da      	uxtb	r2, r3
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <netif_add+0x18c>)
 800580e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005810:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <netif_add+0x190>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005818:	4a0a      	ldr	r2, [pc, #40]	; (8005844 <netif_add+0x190>)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800581e:	68fb      	ldr	r3, [r7, #12]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	0800faa0 	.word	0x0800faa0
 800582c:	0800fb34 	.word	0x0800fb34
 8005830:	0800faf0 	.word	0x0800faf0
 8005834:	0800fb50 	.word	0x0800fb50
 8005838:	080121d0 	.word	0x080121d0
 800583c:	08005c5f 	.word	0x08005c5f
 8005840:	24007aac 	.word	0x24007aac
 8005844:	24007aa4 	.word	0x24007aa4
 8005848:	0800fb74 	.word	0x0800fb74
 800584c:	0800fb88 	.word	0x0800fb88

08005850 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f002 fb43 	bl	8007ee8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f006 fc27 	bl	800c0b8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <netif_do_set_ipaddr+0x20>
 8005886:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <netif_do_set_ipaddr+0x88>)
 8005888:	f240 12cb 	movw	r2, #459	; 0x1cb
 800588c:	491c      	ldr	r1, [pc, #112]	; (8005900 <netif_do_set_ipaddr+0x8c>)
 800588e:	481d      	ldr	r0, [pc, #116]	; (8005904 <netif_do_set_ipaddr+0x90>)
 8005890:	f009 f81c 	bl	800e8cc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <netif_do_set_ipaddr+0x34>
 800589a:	4b18      	ldr	r3, [pc, #96]	; (80058fc <netif_do_set_ipaddr+0x88>)
 800589c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80058a0:	4917      	ldr	r1, [pc, #92]	; (8005900 <netif_do_set_ipaddr+0x8c>)
 80058a2:	4818      	ldr	r0, [pc, #96]	; (8005904 <netif_do_set_ipaddr+0x90>)
 80058a4:	f009 f812 	bl	800e8cc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3304      	adds	r3, #4
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d01c      	beq.n	80058f0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3304      	adds	r3, #4
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80058c6:	f107 0314 	add.w	r3, r7, #20
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff ffbf 	bl	8005850 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <netif_do_set_ipaddr+0x6a>
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	e000      	b.n	80058e0 <netif_do_set_ipaddr+0x6c>
 80058de:	2300      	movs	r3, #0
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80058e4:	2101      	movs	r1, #1
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 f8d2 	bl	8005a90 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80058ec:	2301      	movs	r3, #1
 80058ee:	e000      	b.n	80058f2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	0800faa0 	.word	0x0800faa0
 8005900:	0800fbb8 	.word	0x0800fbb8
 8005904:	0800faf0 	.word	0x0800faf0

08005908 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3308      	adds	r3, #8
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d00a      	beq.n	8005938 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <netif_do_set_netmask+0x26>
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	e000      	b.n	8005930 <netif_do_set_netmask+0x28>
 800592e:	2300      	movs	r3, #0
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005934:	2301      	movs	r3, #1
 8005936:	e000      	b.n	800593a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	330c      	adds	r3, #12
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d00a      	beq.n	8005976 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <netif_do_set_gw+0x26>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	e000      	b.n	800596e <netif_do_set_gw+0x28>
 800596c:	2300      	movs	r3, #0
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005992:	2300      	movs	r3, #0
 8005994:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005996:	2300      	movs	r3, #0
 8005998:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80059a0:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <netif_set_addr+0x90>)
 80059a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80059aa:	4b1a      	ldr	r3, [pc, #104]	; (8005a14 <netif_set_addr+0x90>)
 80059ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80059b4:	4b17      	ldr	r3, [pc, #92]	; (8005a14 <netif_set_addr+0x90>)
 80059b6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <netif_set_addr+0x42>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <netif_set_addr+0x46>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e000      	b.n	80059cc <netif_set_addr+0x48>
 80059ca:	2300      	movs	r3, #0
 80059cc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d006      	beq.n	80059e2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80059d4:	f107 0310 	add.w	r3, r7, #16
 80059d8:	461a      	mov	r2, r3
 80059da:	68b9      	ldr	r1, [r7, #8]
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f7ff ff49 	bl	8005874 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff ff8e 	bl	8005908 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	6839      	ldr	r1, [r7, #0]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f7ff ffa8 	bl	8005946 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d106      	bne.n	8005a0a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80059fc:	f107 0310 	add.w	r3, r7, #16
 8005a00:	461a      	mov	r2, r3
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7ff ff35 	bl	8005874 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005a0a:	bf00      	nop
 8005a0c:	3720      	adds	r7, #32
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	080121d0 	.word	0x080121d0

08005a18 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005a20:	4a04      	ldr	r2, [pc, #16]	; (8005a34 <netif_set_default+0x1c>)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	24007aa8 	.word	0x24007aa8

08005a38 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d107      	bne.n	8005a56 <netif_set_up+0x1e>
 8005a46:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <netif_set_up+0x4c>)
 8005a48:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005a4c:	490e      	ldr	r1, [pc, #56]	; (8005a88 <netif_set_up+0x50>)
 8005a4e:	480f      	ldr	r0, [pc, #60]	; (8005a8c <netif_set_up+0x54>)
 8005a50:	f008 ff3c 	bl	800e8cc <iprintf>
 8005a54:	e013      	b.n	8005a7e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10c      	bne.n	8005a7e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005a76:	2103      	movs	r1, #3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f809 	bl	8005a90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	0800faa0 	.word	0x0800faa0
 8005a88:	0800fc28 	.word	0x0800fc28
 8005a8c:	0800faf0 	.word	0x0800faf0

08005a90 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <netif_issue_reports+0x20>
 8005aa2:	4b18      	ldr	r3, [pc, #96]	; (8005b04 <netif_issue_reports+0x74>)
 8005aa4:	f240 326d 	movw	r2, #877	; 0x36d
 8005aa8:	4917      	ldr	r1, [pc, #92]	; (8005b08 <netif_issue_reports+0x78>)
 8005aaa:	4818      	ldr	r0, [pc, #96]	; (8005b0c <netif_issue_reports+0x7c>)
 8005aac:	f008 ff0e 	bl	800e8cc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d01e      	beq.n	8005afc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ac4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d017      	beq.n	8005afc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d013      	beq.n	8005afe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00e      	beq.n	8005afe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3304      	adds	r3, #4
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f007 fa49 	bl	800cf8c <etharp_request>
 8005afa:	e000      	b.n	8005afe <netif_issue_reports+0x6e>
    return;
 8005afc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	0800faa0 	.word	0x0800faa0
 8005b08:	0800fc44 	.word	0x0800fc44
 8005b0c:	0800faf0 	.word	0x0800faf0

08005b10 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d107      	bne.n	8005b2e <netif_set_down+0x1e>
 8005b1e:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <netif_set_down+0x58>)
 8005b20:	f240 329b 	movw	r2, #923	; 0x39b
 8005b24:	4911      	ldr	r1, [pc, #68]	; (8005b6c <netif_set_down+0x5c>)
 8005b26:	4812      	ldr	r0, [pc, #72]	; (8005b70 <netif_set_down+0x60>)
 8005b28:	f008 fed0 	bl	800e8cc <iprintf>
 8005b2c:	e019      	b.n	8005b62 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d012      	beq.n	8005b62 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f006 fdd3 	bl	800c708 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	0800faa0 	.word	0x0800faa0
 8005b6c:	0800fc68 	.word	0x0800fc68
 8005b70:	0800faf0 	.word	0x0800faf0

08005b74 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d107      	bne.n	8005b92 <netif_set_link_up+0x1e>
 8005b82:	4b13      	ldr	r3, [pc, #76]	; (8005bd0 <netif_set_link_up+0x5c>)
 8005b84:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005b88:	4912      	ldr	r1, [pc, #72]	; (8005bd4 <netif_set_link_up+0x60>)
 8005b8a:	4813      	ldr	r0, [pc, #76]	; (8005bd8 <netif_set_link_up+0x64>)
 8005b8c:	f008 fe9e 	bl	800e8cc <iprintf>
 8005b90:	e01b      	b.n	8005bca <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d114      	bne.n	8005bca <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ba6:	f043 0304 	orr.w	r3, r3, #4
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005bb2:	2103      	movs	r1, #3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff ff6b 	bl	8005a90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <netif_set_link_up+0x56>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	0800faa0 	.word	0x0800faa0
 8005bd4:	0800fc88 	.word	0x0800fc88
 8005bd8:	0800faf0 	.word	0x0800faf0

08005bdc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d107      	bne.n	8005bfa <netif_set_link_down+0x1e>
 8005bea:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <netif_set_link_down+0x54>)
 8005bec:	f240 4206 	movw	r2, #1030	; 0x406
 8005bf0:	4910      	ldr	r1, [pc, #64]	; (8005c34 <netif_set_link_down+0x58>)
 8005bf2:	4811      	ldr	r0, [pc, #68]	; (8005c38 <netif_set_link_down+0x5c>)
 8005bf4:	f008 fe6a 	bl	800e8cc <iprintf>
 8005bf8:	e017      	b.n	8005c2a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d010      	beq.n	8005c2a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c0e:	f023 0304 	bic.w	r3, r3, #4
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <netif_set_link_down+0x4e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	0800faa0 	.word	0x0800faa0
 8005c34:	0800fcac 	.word	0x0800fcac
 8005c38:	0800faf0 	.word	0x0800faf0

08005c3c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	61da      	str	r2, [r3, #28]
  }
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005c6a:	f06f 030b 	mvn.w	r3, #11
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
	...

08005c7c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005c86:	79fb      	ldrb	r3, [r7, #7]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d013      	beq.n	8005cb4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005c8c:	4b0d      	ldr	r3, [pc, #52]	; (8005cc4 <netif_get_by_index+0x48>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	e00c      	b.n	8005cae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	79fa      	ldrb	r2, [r7, #7]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d101      	bne.n	8005ca8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	e006      	b.n	8005cb6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1ef      	bne.n	8005c94 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	24007aa4 	.word	0x24007aa4

08005cc8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005cce:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <pbuf_free_ooseq+0x38>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <pbuf_free_ooseq+0x3c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	607b      	str	r3, [r7, #4]
 8005cda:	e00a      	b.n	8005cf2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f002 f93d 	bl	8007f64 <tcp_free_ooseq>
      return;
 8005cea:	e005      	b.n	8005cf8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	607b      	str	r3, [r7, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f1      	bne.n	8005cdc <pbuf_free_ooseq+0x14>
    }
  }
}
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	24007aad 	.word	0x24007aad
 8005d04:	24007abc 	.word	0x24007abc

08005d08 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005d0c:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <pbuf_pool_is_empty+0x14>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005d12:	bf00      	nop
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	24007aad 	.word	0x24007aad

08005d20 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	460b      	mov	r3, r1
 8005d30:	80fb      	strh	r3, [r7, #6]
 8005d32:	4613      	mov	r3, r2
 8005d34:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	88fa      	ldrh	r2, [r7, #6]
 8005d46:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	88ba      	ldrh	r2, [r7, #4]
 8005d4c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005d4e:	8b3b      	ldrh	r3, [r7, #24]
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	7f3a      	ldrb	r2, [r7, #28]
 8005d5a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	73da      	strb	r2, [r3, #15]
}
 8005d68:	bf00      	nop
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08c      	sub	sp, #48	; 0x30
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	71fb      	strb	r3, [r7, #7]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	80bb      	strh	r3, [r7, #4]
 8005d82:	4613      	mov	r3, r2
 8005d84:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005d86:	79fb      	ldrb	r3, [r7, #7]
 8005d88:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005d8a:	887b      	ldrh	r3, [r7, #2]
 8005d8c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005d90:	d07f      	beq.n	8005e92 <pbuf_alloc+0x11e>
 8005d92:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005d96:	f300 80c8 	bgt.w	8005f2a <pbuf_alloc+0x1b6>
 8005d9a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005d9e:	d010      	beq.n	8005dc2 <pbuf_alloc+0x4e>
 8005da0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005da4:	f300 80c1 	bgt.w	8005f2a <pbuf_alloc+0x1b6>
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d002      	beq.n	8005db2 <pbuf_alloc+0x3e>
 8005dac:	2b41      	cmp	r3, #65	; 0x41
 8005dae:	f040 80bc 	bne.w	8005f2a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005db2:	887a      	ldrh	r2, [r7, #2]
 8005db4:	88bb      	ldrh	r3, [r7, #4]
 8005db6:	4619      	mov	r1, r3
 8005db8:	2000      	movs	r0, #0
 8005dba:	f000 f8d1 	bl	8005f60 <pbuf_alloc_reference>
 8005dbe:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005dc0:	e0bd      	b.n	8005f3e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005dca:	88bb      	ldrh	r3, [r7, #4]
 8005dcc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005dce:	2008      	movs	r0, #8
 8005dd0:	f7ff fbce 	bl	8005570 <memp_malloc>
 8005dd4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d109      	bne.n	8005df0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005ddc:	f7ff ff94 	bl	8005d08 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <pbuf_alloc+0x78>
            pbuf_free(p);
 8005de6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005de8:	f000 faa8 	bl	800633c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005dec:	2300      	movs	r3, #0
 8005dee:	e0a7      	b.n	8005f40 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005df0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005df2:	3303      	adds	r3, #3
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f023 0303 	bic.w	r3, r3, #3
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	8b7a      	ldrh	r2, [r7, #26]
 8005e04:	4293      	cmp	r3, r2
 8005e06:	bf28      	it	cs
 8005e08:	4613      	movcs	r3, r2
 8005e0a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005e0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e0e:	3310      	adds	r3, #16
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4413      	add	r3, r2
 8005e14:	3303      	adds	r3, #3
 8005e16:	f023 0303 	bic.w	r3, r3, #3
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	89f9      	ldrh	r1, [r7, #14]
 8005e1e:	8b7a      	ldrh	r2, [r7, #26]
 8005e20:	2300      	movs	r3, #0
 8005e22:	9301      	str	r3, [sp, #4]
 8005e24:	887b      	ldrh	r3, [r7, #2]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4601      	mov	r1, r0
 8005e2c:	6938      	ldr	r0, [r7, #16]
 8005e2e:	f7ff ff77 	bl	8005d20 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d006      	beq.n	8005e4c <pbuf_alloc+0xd8>
 8005e3e:	4b42      	ldr	r3, [pc, #264]	; (8005f48 <pbuf_alloc+0x1d4>)
 8005e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e44:	4941      	ldr	r1, [pc, #260]	; (8005f4c <pbuf_alloc+0x1d8>)
 8005e46:	4842      	ldr	r0, [pc, #264]	; (8005f50 <pbuf_alloc+0x1dc>)
 8005e48:	f008 fd40 	bl	800e8cc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005e4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e4e:	3303      	adds	r3, #3
 8005e50:	f023 0303 	bic.w	r3, r3, #3
 8005e54:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005e58:	d106      	bne.n	8005e68 <pbuf_alloc+0xf4>
 8005e5a:	4b3b      	ldr	r3, [pc, #236]	; (8005f48 <pbuf_alloc+0x1d4>)
 8005e5c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005e60:	493c      	ldr	r1, [pc, #240]	; (8005f54 <pbuf_alloc+0x1e0>)
 8005e62:	483b      	ldr	r0, [pc, #236]	; (8005f50 <pbuf_alloc+0x1dc>)
 8005e64:	f008 fd32 	bl	800e8cc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d102      	bne.n	8005e74 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
 8005e72:	e002      	b.n	8005e7a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005e7e:	8b7a      	ldrh	r2, [r7, #26]
 8005e80:	89fb      	ldrh	r3, [r7, #14]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005e86:	2300      	movs	r3, #0
 8005e88:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005e8a:	8b7b      	ldrh	r3, [r7, #26]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d19e      	bne.n	8005dce <pbuf_alloc+0x5a>
      break;
 8005e90:	e055      	b.n	8005f3e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005e92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e94:	3303      	adds	r3, #3
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f023 0303 	bic.w	r3, r3, #3
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	88bb      	ldrh	r3, [r7, #4]
 8005ea0:	3303      	adds	r3, #3
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f023 0303 	bic.w	r3, r3, #3
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	4413      	add	r3, r2
 8005eac:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005eae:	8b3b      	ldrh	r3, [r7, #24]
 8005eb0:	3310      	adds	r3, #16
 8005eb2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005eb4:	8b3a      	ldrh	r2, [r7, #24]
 8005eb6:	88bb      	ldrh	r3, [r7, #4]
 8005eb8:	3303      	adds	r3, #3
 8005eba:	f023 0303 	bic.w	r3, r3, #3
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d306      	bcc.n	8005ed0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005ec2:	8afa      	ldrh	r2, [r7, #22]
 8005ec4:	88bb      	ldrh	r3, [r7, #4]
 8005ec6:	3303      	adds	r3, #3
 8005ec8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d201      	bcs.n	8005ed4 <pbuf_alloc+0x160>
        return NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e035      	b.n	8005f40 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005ed4:	8afb      	ldrh	r3, [r7, #22]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff f9ba 	bl	8005250 <mem_malloc>
 8005edc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <pbuf_alloc+0x174>
        return NULL;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e02b      	b.n	8005f40 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005ee8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005eea:	3310      	adds	r3, #16
 8005eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eee:	4413      	add	r3, r2
 8005ef0:	3303      	adds	r3, #3
 8005ef2:	f023 0303 	bic.w	r3, r3, #3
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	88b9      	ldrh	r1, [r7, #4]
 8005efa:	88ba      	ldrh	r2, [r7, #4]
 8005efc:	2300      	movs	r3, #0
 8005efe:	9301      	str	r3, [sp, #4]
 8005f00:	887b      	ldrh	r3, [r7, #2]
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	460b      	mov	r3, r1
 8005f06:	4601      	mov	r1, r0
 8005f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f0a:	f7ff ff09 	bl	8005d20 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d010      	beq.n	8005f3c <pbuf_alloc+0x1c8>
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <pbuf_alloc+0x1d4>)
 8005f1c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005f20:	490d      	ldr	r1, [pc, #52]	; (8005f58 <pbuf_alloc+0x1e4>)
 8005f22:	480b      	ldr	r0, [pc, #44]	; (8005f50 <pbuf_alloc+0x1dc>)
 8005f24:	f008 fcd2 	bl	800e8cc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005f28:	e008      	b.n	8005f3c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005f2a:	4b07      	ldr	r3, [pc, #28]	; (8005f48 <pbuf_alloc+0x1d4>)
 8005f2c:	f240 1227 	movw	r2, #295	; 0x127
 8005f30:	490a      	ldr	r1, [pc, #40]	; (8005f5c <pbuf_alloc+0x1e8>)
 8005f32:	4807      	ldr	r0, [pc, #28]	; (8005f50 <pbuf_alloc+0x1dc>)
 8005f34:	f008 fcca 	bl	800e8cc <iprintf>
      return NULL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e001      	b.n	8005f40 <pbuf_alloc+0x1cc>
      break;
 8005f3c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3728      	adds	r7, #40	; 0x28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	0800fcd0 	.word	0x0800fcd0
 8005f4c:	0800fd00 	.word	0x0800fd00
 8005f50:	0800fd30 	.word	0x0800fd30
 8005f54:	0800fd58 	.word	0x0800fd58
 8005f58:	0800fd8c 	.word	0x0800fd8c
 8005f5c:	0800fdb8 	.word	0x0800fdb8

08005f60 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	807b      	strh	r3, [r7, #2]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005f70:	883b      	ldrh	r3, [r7, #0]
 8005f72:	2b41      	cmp	r3, #65	; 0x41
 8005f74:	d009      	beq.n	8005f8a <pbuf_alloc_reference+0x2a>
 8005f76:	883b      	ldrh	r3, [r7, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d006      	beq.n	8005f8a <pbuf_alloc_reference+0x2a>
 8005f7c:	4b0f      	ldr	r3, [pc, #60]	; (8005fbc <pbuf_alloc_reference+0x5c>)
 8005f7e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005f82:	490f      	ldr	r1, [pc, #60]	; (8005fc0 <pbuf_alloc_reference+0x60>)
 8005f84:	480f      	ldr	r0, [pc, #60]	; (8005fc4 <pbuf_alloc_reference+0x64>)
 8005f86:	f008 fca1 	bl	800e8cc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005f8a:	2007      	movs	r0, #7
 8005f8c:	f7ff faf0 	bl	8005570 <memp_malloc>
 8005f90:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e00b      	b.n	8005fb4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005f9c:	8879      	ldrh	r1, [r7, #2]
 8005f9e:	887a      	ldrh	r2, [r7, #2]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	9301      	str	r3, [sp, #4]
 8005fa4:	883b      	ldrh	r3, [r7, #0]
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7ff feb7 	bl	8005d20 <pbuf_init_alloced_pbuf>
  return p;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	0800fcd0 	.word	0x0800fcd0
 8005fc0:	0800fdd4 	.word	0x0800fdd4
 8005fc4:	0800fd30 	.word	0x0800fd30

08005fc8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	607b      	str	r3, [r7, #4]
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	73fb      	strb	r3, [r7, #15]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	81bb      	strh	r3, [r7, #12]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005fe0:	8a7b      	ldrh	r3, [r7, #18]
 8005fe2:	3303      	adds	r3, #3
 8005fe4:	f023 0203 	bic.w	r2, r3, #3
 8005fe8:	89bb      	ldrh	r3, [r7, #12]
 8005fea:	441a      	add	r2, r3
 8005fec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d901      	bls.n	8005ff6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e018      	b.n	8006028 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005ffc:	8a7b      	ldrh	r3, [r7, #18]
 8005ffe:	3303      	adds	r3, #3
 8006000:	f023 0303 	bic.w	r3, r3, #3
 8006004:	6a3a      	ldr	r2, [r7, #32]
 8006006:	4413      	add	r3, r2
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	e001      	b.n	8006010 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800600c:	2300      	movs	r3, #0
 800600e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	89b9      	ldrh	r1, [r7, #12]
 8006014:	89ba      	ldrh	r2, [r7, #12]
 8006016:	2302      	movs	r3, #2
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	897b      	ldrh	r3, [r7, #10]
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	460b      	mov	r3, r1
 8006020:	6979      	ldr	r1, [r7, #20]
 8006022:	f7ff fe7d 	bl	8005d20 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006026:	687b      	ldr	r3, [r7, #4]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3718      	adds	r7, #24
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <pbuf_realloc+0x20>
 8006042:	4b3a      	ldr	r3, [pc, #232]	; (800612c <pbuf_realloc+0xfc>)
 8006044:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006048:	4939      	ldr	r1, [pc, #228]	; (8006130 <pbuf_realloc+0x100>)
 800604a:	483a      	ldr	r0, [pc, #232]	; (8006134 <pbuf_realloc+0x104>)
 800604c:	f008 fc3e 	bl	800e8cc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	891b      	ldrh	r3, [r3, #8]
 8006054:	887a      	ldrh	r2, [r7, #2]
 8006056:	429a      	cmp	r2, r3
 8006058:	d263      	bcs.n	8006122 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	891a      	ldrh	r2, [r3, #8]
 800605e:	887b      	ldrh	r3, [r7, #2]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006064:	887b      	ldrh	r3, [r7, #2]
 8006066:	817b      	strh	r3, [r7, #10]
  q = p;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800606c:	e018      	b.n	80060a0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	895b      	ldrh	r3, [r3, #10]
 8006072:	897a      	ldrh	r2, [r7, #10]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	891a      	ldrh	r2, [r3, #8]
 800607c:	893b      	ldrh	r3, [r7, #8]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	b29a      	uxth	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <pbuf_realloc+0x70>
 8006092:	4b26      	ldr	r3, [pc, #152]	; (800612c <pbuf_realloc+0xfc>)
 8006094:	f240 12af 	movw	r2, #431	; 0x1af
 8006098:	4927      	ldr	r1, [pc, #156]	; (8006138 <pbuf_realloc+0x108>)
 800609a:	4826      	ldr	r0, [pc, #152]	; (8006134 <pbuf_realloc+0x104>)
 800609c:	f008 fc16 	bl	800e8cc <iprintf>
  while (rem_len > q->len) {
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	895b      	ldrh	r3, [r3, #10]
 80060a4:	897a      	ldrh	r2, [r7, #10]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d8e1      	bhi.n	800606e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	7b1b      	ldrb	r3, [r3, #12]
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d121      	bne.n	80060fa <pbuf_realloc+0xca>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	895b      	ldrh	r3, [r3, #10]
 80060ba:	897a      	ldrh	r2, [r7, #10]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d01c      	beq.n	80060fa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	7b5b      	ldrb	r3, [r3, #13]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d116      	bne.n	80060fa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	897b      	ldrh	r3, [r7, #10]
 80060d8:	4413      	add	r3, r2
 80060da:	b29b      	uxth	r3, r3
 80060dc:	4619      	mov	r1, r3
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f7fe ffba 	bl	8005058 <mem_trim>
 80060e4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d106      	bne.n	80060fa <pbuf_realloc+0xca>
 80060ec:	4b0f      	ldr	r3, [pc, #60]	; (800612c <pbuf_realloc+0xfc>)
 80060ee:	f240 12bd 	movw	r2, #445	; 0x1bd
 80060f2:	4912      	ldr	r1, [pc, #72]	; (800613c <pbuf_realloc+0x10c>)
 80060f4:	480f      	ldr	r0, [pc, #60]	; (8006134 <pbuf_realloc+0x104>)
 80060f6:	f008 fbe9 	bl	800e8cc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	897a      	ldrh	r2, [r7, #10]
 80060fe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	895a      	ldrh	r2, [r3, #10]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f000 f911 	bl	800633c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	e000      	b.n	8006124 <pbuf_realloc+0xf4>
    return;
 8006122:	bf00      	nop

}
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	0800fcd0 	.word	0x0800fcd0
 8006130:	0800fde8 	.word	0x0800fde8
 8006134:	0800fd30 	.word	0x0800fd30
 8006138:	0800fe00 	.word	0x0800fe00
 800613c:	0800fe18 	.word	0x0800fe18

08006140 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	4613      	mov	r3, r2
 800614c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d106      	bne.n	8006162 <pbuf_add_header_impl+0x22>
 8006154:	4b2b      	ldr	r3, [pc, #172]	; (8006204 <pbuf_add_header_impl+0xc4>)
 8006156:	f240 12df 	movw	r2, #479	; 0x1df
 800615a:	492b      	ldr	r1, [pc, #172]	; (8006208 <pbuf_add_header_impl+0xc8>)
 800615c:	482b      	ldr	r0, [pc, #172]	; (800620c <pbuf_add_header_impl+0xcc>)
 800615e:	f008 fbb5 	bl	800e8cc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <pbuf_add_header_impl+0x30>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800616e:	d301      	bcc.n	8006174 <pbuf_add_header_impl+0x34>
    return 1;
 8006170:	2301      	movs	r3, #1
 8006172:	e043      	b.n	80061fc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <pbuf_add_header_impl+0x3e>
    return 0;
 800617a:	2300      	movs	r3, #0
 800617c:	e03e      	b.n	80061fc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	891a      	ldrh	r2, [r3, #8]
 8006186:	8a7b      	ldrh	r3, [r7, #18]
 8006188:	4413      	add	r3, r2
 800618a:	b29b      	uxth	r3, r3
 800618c:	8a7a      	ldrh	r2, [r7, #18]
 800618e:	429a      	cmp	r2, r3
 8006190:	d901      	bls.n	8006196 <pbuf_add_header_impl+0x56>
    return 1;
 8006192:	2301      	movs	r3, #1
 8006194:	e032      	b.n	80061fc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	7b1b      	ldrb	r3, [r3, #12]
 800619a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800619c:	8a3b      	ldrh	r3, [r7, #16]
 800619e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00c      	beq.n	80061c0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	425b      	negs	r3, r3
 80061ae:	4413      	add	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3310      	adds	r3, #16
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d20d      	bcs.n	80061d8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80061bc:	2301      	movs	r3, #1
 80061be:	e01d      	b.n	80061fc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d006      	beq.n	80061d4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	425b      	negs	r3, r3
 80061ce:	4413      	add	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	e001      	b.n	80061d8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e011      	b.n	80061fc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	895a      	ldrh	r2, [r3, #10]
 80061e2:	8a7b      	ldrh	r3, [r7, #18]
 80061e4:	4413      	add	r3, r2
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	891a      	ldrh	r2, [r3, #8]
 80061f0:	8a7b      	ldrh	r3, [r7, #18]
 80061f2:	4413      	add	r3, r2
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	811a      	strh	r2, [r3, #8]


  return 0;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	0800fcd0 	.word	0x0800fcd0
 8006208:	0800fe34 	.word	0x0800fe34
 800620c:	0800fd30 	.word	0x0800fd30

08006210 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800621a:	2200      	movs	r2, #0
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff ff8e 	bl	8006140 <pbuf_add_header_impl>
 8006224:	4603      	mov	r3, r0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d106      	bne.n	800624e <pbuf_remove_header+0x1e>
 8006240:	4b20      	ldr	r3, [pc, #128]	; (80062c4 <pbuf_remove_header+0x94>)
 8006242:	f240 224b 	movw	r2, #587	; 0x24b
 8006246:	4920      	ldr	r1, [pc, #128]	; (80062c8 <pbuf_remove_header+0x98>)
 8006248:	4820      	ldr	r0, [pc, #128]	; (80062cc <pbuf_remove_header+0x9c>)
 800624a:	f008 fb3f 	bl	800e8cc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <pbuf_remove_header+0x2c>
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800625a:	d301      	bcc.n	8006260 <pbuf_remove_header+0x30>
    return 1;
 800625c:	2301      	movs	r3, #1
 800625e:	e02c      	b.n	80062ba <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <pbuf_remove_header+0x3a>
    return 0;
 8006266:	2300      	movs	r3, #0
 8006268:	e027      	b.n	80062ba <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	895b      	ldrh	r3, [r3, #10]
 8006272:	89fa      	ldrh	r2, [r7, #14]
 8006274:	429a      	cmp	r2, r3
 8006276:	d908      	bls.n	800628a <pbuf_remove_header+0x5a>
 8006278:	4b12      	ldr	r3, [pc, #72]	; (80062c4 <pbuf_remove_header+0x94>)
 800627a:	f240 2255 	movw	r2, #597	; 0x255
 800627e:	4914      	ldr	r1, [pc, #80]	; (80062d0 <pbuf_remove_header+0xa0>)
 8006280:	4812      	ldr	r0, [pc, #72]	; (80062cc <pbuf_remove_header+0x9c>)
 8006282:	f008 fb23 	bl	800e8cc <iprintf>
 8006286:	2301      	movs	r3, #1
 8006288:	e017      	b.n	80062ba <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	441a      	add	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	895a      	ldrh	r2, [r3, #10]
 80062a0:	89fb      	ldrh	r3, [r7, #14]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	891a      	ldrh	r2, [r3, #8]
 80062ae:	89fb      	ldrh	r3, [r7, #14]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	0800fcd0 	.word	0x0800fcd0
 80062c8:	0800fe34 	.word	0x0800fe34
 80062cc:	0800fd30 	.word	0x0800fd30
 80062d0:	0800fe40 	.word	0x0800fe40

080062d4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	807b      	strh	r3, [r7, #2]
 80062e0:	4613      	mov	r3, r2
 80062e2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80062e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	da08      	bge.n	80062fe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80062ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062f0:	425b      	negs	r3, r3
 80062f2:	4619      	mov	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff ff9b 	bl	8006230 <pbuf_remove_header>
 80062fa:	4603      	mov	r3, r0
 80062fc:	e007      	b.n	800630e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80062fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006302:	787a      	ldrb	r2, [r7, #1]
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff ff1a 	bl	8006140 <pbuf_add_header_impl>
 800630c:	4603      	mov	r3, r0
  }
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	460b      	mov	r3, r1
 8006320:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006322:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006326:	2201      	movs	r2, #1
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7ff ffd2 	bl	80062d4 <pbuf_header_impl>
 8006330:	4603      	mov	r3, r0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10b      	bne.n	8006362 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d106      	bne.n	800635e <pbuf_free+0x22>
 8006350:	4b38      	ldr	r3, [pc, #224]	; (8006434 <pbuf_free+0xf8>)
 8006352:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006356:	4938      	ldr	r1, [pc, #224]	; (8006438 <pbuf_free+0xfc>)
 8006358:	4838      	ldr	r0, [pc, #224]	; (800643c <pbuf_free+0x100>)
 800635a:	f008 fab7 	bl	800e8cc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800635e:	2300      	movs	r3, #0
 8006360:	e063      	b.n	800642a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006362:	2300      	movs	r3, #0
 8006364:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006366:	e05c      	b.n	8006422 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	7b9b      	ldrb	r3, [r3, #14]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d106      	bne.n	800637e <pbuf_free+0x42>
 8006370:	4b30      	ldr	r3, [pc, #192]	; (8006434 <pbuf_free+0xf8>)
 8006372:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006376:	4932      	ldr	r1, [pc, #200]	; (8006440 <pbuf_free+0x104>)
 8006378:	4830      	ldr	r0, [pc, #192]	; (800643c <pbuf_free+0x100>)
 800637a:	f008 faa7 	bl	800e8cc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	7b9b      	ldrb	r3, [r3, #14]
 8006382:	3b01      	subs	r3, #1
 8006384:	b2da      	uxtb	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	739a      	strb	r2, [r3, #14]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	7b9b      	ldrb	r3, [r3, #14]
 800638e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006390:	7dbb      	ldrb	r3, [r7, #22]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d143      	bne.n	800641e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	7b1b      	ldrb	r3, [r3, #12]
 80063a0:	f003 030f 	and.w	r3, r3, #15
 80063a4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	7b5b      	ldrb	r3, [r3, #13]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d011      	beq.n	80063d6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <pbuf_free+0x90>
 80063be:	4b1d      	ldr	r3, [pc, #116]	; (8006434 <pbuf_free+0xf8>)
 80063c0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80063c4:	491f      	ldr	r1, [pc, #124]	; (8006444 <pbuf_free+0x108>)
 80063c6:	481d      	ldr	r0, [pc, #116]	; (800643c <pbuf_free+0x100>)
 80063c8:	f008 fa80 	bl	800e8cc <iprintf>
        pc->custom_free_function(p);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
 80063d4:	e01d      	b.n	8006412 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d104      	bne.n	80063e6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	2008      	movs	r0, #8
 80063e0:	f7ff f936 	bl	8005650 <memp_free>
 80063e4:	e015      	b.n	8006412 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d104      	bne.n	80063f6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80063ec:	6879      	ldr	r1, [r7, #4]
 80063ee:	2007      	movs	r0, #7
 80063f0:	f7ff f92e 	bl	8005650 <memp_free>
 80063f4:	e00d      	b.n	8006412 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d103      	bne.n	8006404 <pbuf_free+0xc8>
          mem_free(p);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7fe fdc1 	bl	8004f84 <mem_free>
 8006402:	e006      	b.n	8006412 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006404:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <pbuf_free+0xf8>)
 8006406:	f240 320f 	movw	r2, #783	; 0x30f
 800640a:	490f      	ldr	r1, [pc, #60]	; (8006448 <pbuf_free+0x10c>)
 800640c:	480b      	ldr	r0, [pc, #44]	; (800643c <pbuf_free+0x100>)
 800640e:	f008 fa5d 	bl	800e8cc <iprintf>
        }
      }
      count++;
 8006412:	7dfb      	ldrb	r3, [r7, #23]
 8006414:	3301      	adds	r3, #1
 8006416:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	607b      	str	r3, [r7, #4]
 800641c:	e001      	b.n	8006422 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d19f      	bne.n	8006368 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006428:	7dfb      	ldrb	r3, [r7, #23]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	0800fcd0 	.word	0x0800fcd0
 8006438:	0800fe34 	.word	0x0800fe34
 800643c:	0800fd30 	.word	0x0800fd30
 8006440:	0800fe60 	.word	0x0800fe60
 8006444:	0800fe78 	.word	0x0800fe78
 8006448:	0800fe9c 	.word	0x0800fe9c

0800644c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006454:	2300      	movs	r3, #0
 8006456:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006458:	e005      	b.n	8006466 <pbuf_clen+0x1a>
    ++len;
 800645a:	89fb      	ldrh	r3, [r7, #14]
 800645c:	3301      	adds	r3, #1
 800645e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1f6      	bne.n	800645a <pbuf_clen+0xe>
  }
  return len;
 800646c:	89fb      	ldrh	r3, [r7, #14]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
	...

0800647c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d010      	beq.n	80064ac <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	7b9b      	ldrb	r3, [r3, #14]
 800648e:	3301      	adds	r3, #1
 8006490:	b2da      	uxtb	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	7b9b      	ldrb	r3, [r3, #14]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <pbuf_ref+0x30>
 800649e:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <pbuf_ref+0x38>)
 80064a0:	f240 3242 	movw	r2, #834	; 0x342
 80064a4:	4904      	ldr	r1, [pc, #16]	; (80064b8 <pbuf_ref+0x3c>)
 80064a6:	4805      	ldr	r0, [pc, #20]	; (80064bc <pbuf_ref+0x40>)
 80064a8:	f008 fa10 	bl	800e8cc <iprintf>
  }
}
 80064ac:	bf00      	nop
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	0800fcd0 	.word	0x0800fcd0
 80064b8:	0800feb0 	.word	0x0800feb0
 80064bc:	0800fd30 	.word	0x0800fd30

080064c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <pbuf_cat+0x16>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d107      	bne.n	80064e6 <pbuf_cat+0x26>
 80064d6:	4b20      	ldr	r3, [pc, #128]	; (8006558 <pbuf_cat+0x98>)
 80064d8:	f240 3259 	movw	r2, #857	; 0x359
 80064dc:	491f      	ldr	r1, [pc, #124]	; (800655c <pbuf_cat+0x9c>)
 80064de:	4820      	ldr	r0, [pc, #128]	; (8006560 <pbuf_cat+0xa0>)
 80064e0:	f008 f9f4 	bl	800e8cc <iprintf>
 80064e4:	e034      	b.n	8006550 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	e00a      	b.n	8006502 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	891a      	ldrh	r2, [r3, #8]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	891b      	ldrh	r3, [r3, #8]
 80064f4:	4413      	add	r3, r2
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f0      	bne.n	80064ec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	891a      	ldrh	r2, [r3, #8]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	895b      	ldrh	r3, [r3, #10]
 8006512:	429a      	cmp	r2, r3
 8006514:	d006      	beq.n	8006524 <pbuf_cat+0x64>
 8006516:	4b10      	ldr	r3, [pc, #64]	; (8006558 <pbuf_cat+0x98>)
 8006518:	f240 3262 	movw	r2, #866	; 0x362
 800651c:	4911      	ldr	r1, [pc, #68]	; (8006564 <pbuf_cat+0xa4>)
 800651e:	4810      	ldr	r0, [pc, #64]	; (8006560 <pbuf_cat+0xa0>)
 8006520:	f008 f9d4 	bl	800e8cc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d006      	beq.n	800653a <pbuf_cat+0x7a>
 800652c:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <pbuf_cat+0x98>)
 800652e:	f240 3263 	movw	r2, #867	; 0x363
 8006532:	490d      	ldr	r1, [pc, #52]	; (8006568 <pbuf_cat+0xa8>)
 8006534:	480a      	ldr	r0, [pc, #40]	; (8006560 <pbuf_cat+0xa0>)
 8006536:	f008 f9c9 	bl	800e8cc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	891a      	ldrh	r2, [r3, #8]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	891b      	ldrh	r3, [r3, #8]
 8006542:	4413      	add	r3, r2
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	0800fcd0 	.word	0x0800fcd0
 800655c:	0800fec4 	.word	0x0800fec4
 8006560:	0800fd30 	.word	0x0800fd30
 8006564:	0800fefc 	.word	0x0800fefc
 8006568:	0800ff2c 	.word	0x0800ff2c

0800656c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006576:	2300      	movs	r3, #0
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	2300      	movs	r3, #0
 800657c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <pbuf_copy+0x2a>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <pbuf_copy+0x2a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	891a      	ldrh	r2, [r3, #8]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	891b      	ldrh	r3, [r3, #8]
 8006592:	429a      	cmp	r2, r3
 8006594:	d209      	bcs.n	80065aa <pbuf_copy+0x3e>
 8006596:	4b57      	ldr	r3, [pc, #348]	; (80066f4 <pbuf_copy+0x188>)
 8006598:	f240 32c9 	movw	r2, #969	; 0x3c9
 800659c:	4956      	ldr	r1, [pc, #344]	; (80066f8 <pbuf_copy+0x18c>)
 800659e:	4857      	ldr	r0, [pc, #348]	; (80066fc <pbuf_copy+0x190>)
 80065a0:	f008 f994 	bl	800e8cc <iprintf>
 80065a4:	f06f 030f 	mvn.w	r3, #15
 80065a8:	e09f      	b.n	80066ea <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	895b      	ldrh	r3, [r3, #10]
 80065ae:	461a      	mov	r2, r3
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	1ad2      	subs	r2, r2, r3
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	895b      	ldrh	r3, [r3, #10]
 80065b8:	4619      	mov	r1, r3
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1acb      	subs	r3, r1, r3
 80065be:	429a      	cmp	r2, r3
 80065c0:	d306      	bcc.n	80065d0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	895b      	ldrh	r3, [r3, #10]
 80065c6:	461a      	mov	r2, r3
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	e005      	b.n	80065dc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	895b      	ldrh	r3, [r3, #10]
 80065d4:	461a      	mov	r2, r3
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	18d0      	adds	r0, r2, r3
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	4413      	add	r3, r2
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4619      	mov	r1, r3
 80065f0:	f008 fa46 	bl	800ea80 <memcpy>
    offset_to += len;
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4413      	add	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	895b      	ldrh	r3, [r3, #10]
 8006608:	461a      	mov	r2, r3
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	4293      	cmp	r3, r2
 800660e:	d906      	bls.n	800661e <pbuf_copy+0xb2>
 8006610:	4b38      	ldr	r3, [pc, #224]	; (80066f4 <pbuf_copy+0x188>)
 8006612:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006616:	493a      	ldr	r1, [pc, #232]	; (8006700 <pbuf_copy+0x194>)
 8006618:	4838      	ldr	r0, [pc, #224]	; (80066fc <pbuf_copy+0x190>)
 800661a:	f008 f957 	bl	800e8cc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	895b      	ldrh	r3, [r3, #10]
 8006622:	461a      	mov	r2, r3
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4293      	cmp	r3, r2
 8006628:	d906      	bls.n	8006638 <pbuf_copy+0xcc>
 800662a:	4b32      	ldr	r3, [pc, #200]	; (80066f4 <pbuf_copy+0x188>)
 800662c:	f240 32da 	movw	r2, #986	; 0x3da
 8006630:	4934      	ldr	r1, [pc, #208]	; (8006704 <pbuf_copy+0x198>)
 8006632:	4832      	ldr	r0, [pc, #200]	; (80066fc <pbuf_copy+0x190>)
 8006634:	f008 f94a 	bl	800e8cc <iprintf>
    if (offset_from >= p_from->len) {
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	895b      	ldrh	r3, [r3, #10]
 800663c:	461a      	mov	r2, r3
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	4293      	cmp	r3, r2
 8006642:	d304      	bcc.n	800664e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	895b      	ldrh	r3, [r3, #10]
 8006652:	461a      	mov	r2, r3
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	4293      	cmp	r3, r2
 8006658:	d114      	bne.n	8006684 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800665a:	2300      	movs	r3, #0
 800665c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10c      	bne.n	8006684 <pbuf_copy+0x118>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d009      	beq.n	8006684 <pbuf_copy+0x118>
 8006670:	4b20      	ldr	r3, [pc, #128]	; (80066f4 <pbuf_copy+0x188>)
 8006672:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006676:	4924      	ldr	r1, [pc, #144]	; (8006708 <pbuf_copy+0x19c>)
 8006678:	4820      	ldr	r0, [pc, #128]	; (80066fc <pbuf_copy+0x190>)
 800667a:	f008 f927 	bl	800e8cc <iprintf>
 800667e:	f06f 030f 	mvn.w	r3, #15
 8006682:	e032      	b.n	80066ea <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d013      	beq.n	80066b2 <pbuf_copy+0x146>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	895a      	ldrh	r2, [r3, #10]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	891b      	ldrh	r3, [r3, #8]
 8006692:	429a      	cmp	r2, r3
 8006694:	d10d      	bne.n	80066b2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d009      	beq.n	80066b2 <pbuf_copy+0x146>
 800669e:	4b15      	ldr	r3, [pc, #84]	; (80066f4 <pbuf_copy+0x188>)
 80066a0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80066a4:	4919      	ldr	r1, [pc, #100]	; (800670c <pbuf_copy+0x1a0>)
 80066a6:	4815      	ldr	r0, [pc, #84]	; (80066fc <pbuf_copy+0x190>)
 80066a8:	f008 f910 	bl	800e8cc <iprintf>
 80066ac:	f06f 0305 	mvn.w	r3, #5
 80066b0:	e01b      	b.n	80066ea <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d013      	beq.n	80066e0 <pbuf_copy+0x174>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	895a      	ldrh	r2, [r3, #10]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	891b      	ldrh	r3, [r3, #8]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d10d      	bne.n	80066e0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d009      	beq.n	80066e0 <pbuf_copy+0x174>
 80066cc:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <pbuf_copy+0x188>)
 80066ce:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80066d2:	490e      	ldr	r1, [pc, #56]	; (800670c <pbuf_copy+0x1a0>)
 80066d4:	4809      	ldr	r0, [pc, #36]	; (80066fc <pbuf_copy+0x190>)
 80066d6:	f008 f8f9 	bl	800e8cc <iprintf>
 80066da:	f06f 0305 	mvn.w	r3, #5
 80066de:	e004      	b.n	80066ea <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f47f af61 	bne.w	80065aa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	0800fcd0 	.word	0x0800fcd0
 80066f8:	0800ff78 	.word	0x0800ff78
 80066fc:	0800fd30 	.word	0x0800fd30
 8006700:	0800ffa8 	.word	0x0800ffa8
 8006704:	0800ffc0 	.word	0x0800ffc0
 8006708:	0800ffdc 	.word	0x0800ffdc
 800670c:	0800ffec 	.word	0x0800ffec

08006710 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4611      	mov	r1, r2
 800671c:	461a      	mov	r2, r3
 800671e:	460b      	mov	r3, r1
 8006720:	80fb      	strh	r3, [r7, #6]
 8006722:	4613      	mov	r3, r2
 8006724:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d108      	bne.n	8006746 <pbuf_copy_partial+0x36>
 8006734:	4b2b      	ldr	r3, [pc, #172]	; (80067e4 <pbuf_copy_partial+0xd4>)
 8006736:	f240 420a 	movw	r2, #1034	; 0x40a
 800673a:	492b      	ldr	r1, [pc, #172]	; (80067e8 <pbuf_copy_partial+0xd8>)
 800673c:	482b      	ldr	r0, [pc, #172]	; (80067ec <pbuf_copy_partial+0xdc>)
 800673e:	f008 f8c5 	bl	800e8cc <iprintf>
 8006742:	2300      	movs	r3, #0
 8006744:	e04a      	b.n	80067dc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d108      	bne.n	800675e <pbuf_copy_partial+0x4e>
 800674c:	4b25      	ldr	r3, [pc, #148]	; (80067e4 <pbuf_copy_partial+0xd4>)
 800674e:	f240 420b 	movw	r2, #1035	; 0x40b
 8006752:	4927      	ldr	r1, [pc, #156]	; (80067f0 <pbuf_copy_partial+0xe0>)
 8006754:	4825      	ldr	r0, [pc, #148]	; (80067ec <pbuf_copy_partial+0xdc>)
 8006756:	f008 f8b9 	bl	800e8cc <iprintf>
 800675a:	2300      	movs	r3, #0
 800675c:	e03e      	b.n	80067dc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	61fb      	str	r3, [r7, #28]
 8006762:	e034      	b.n	80067ce <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006764:	88bb      	ldrh	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <pbuf_copy_partial+0x70>
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	895b      	ldrh	r3, [r3, #10]
 800676e:	88ba      	ldrh	r2, [r7, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	d305      	bcc.n	8006780 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	895b      	ldrh	r3, [r3, #10]
 8006778:	88ba      	ldrh	r2, [r7, #4]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	80bb      	strh	r3, [r7, #4]
 800677e:	e023      	b.n	80067c8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	895a      	ldrh	r2, [r3, #10]
 8006784:	88bb      	ldrh	r3, [r7, #4]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800678a:	8b3a      	ldrh	r2, [r7, #24]
 800678c:	88fb      	ldrh	r3, [r7, #6]
 800678e:	429a      	cmp	r2, r3
 8006790:	d901      	bls.n	8006796 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006792:	88fb      	ldrh	r3, [r7, #6]
 8006794:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006796:	8b7b      	ldrh	r3, [r7, #26]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	18d0      	adds	r0, r2, r3
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	88bb      	ldrh	r3, [r7, #4]
 80067a2:	4413      	add	r3, r2
 80067a4:	8b3a      	ldrh	r2, [r7, #24]
 80067a6:	4619      	mov	r1, r3
 80067a8:	f008 f96a 	bl	800ea80 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80067ac:	8afa      	ldrh	r2, [r7, #22]
 80067ae:	8b3b      	ldrh	r3, [r7, #24]
 80067b0:	4413      	add	r3, r2
 80067b2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80067b4:	8b7a      	ldrh	r2, [r7, #26]
 80067b6:	8b3b      	ldrh	r3, [r7, #24]
 80067b8:	4413      	add	r3, r2
 80067ba:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80067bc:	88fa      	ldrh	r2, [r7, #6]
 80067be:	8b3b      	ldrh	r3, [r7, #24]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	61fb      	str	r3, [r7, #28]
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <pbuf_copy_partial+0xca>
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1c4      	bne.n	8006764 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80067da:	8afb      	ldrh	r3, [r7, #22]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3720      	adds	r7, #32
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	0800fcd0 	.word	0x0800fcd0
 80067e8:	08010018 	.word	0x08010018
 80067ec:	0800fd30 	.word	0x0800fd30
 80067f0:	08010038 	.word	0x08010038

080067f4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	4603      	mov	r3, r0
 80067fc:	603a      	str	r2, [r7, #0]
 80067fe:	71fb      	strb	r3, [r7, #7]
 8006800:	460b      	mov	r3, r1
 8006802:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	8919      	ldrh	r1, [r3, #8]
 8006808:	88ba      	ldrh	r2, [r7, #4]
 800680a:	79fb      	ldrb	r3, [r7, #7]
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff fab1 	bl	8005d74 <pbuf_alloc>
 8006812:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <pbuf_clone+0x2a>
    return NULL;
 800681a:	2300      	movs	r3, #0
 800681c:	e011      	b.n	8006842 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f7ff fea3 	bl	800656c <pbuf_copy>
 8006826:	4603      	mov	r3, r0
 8006828:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800682a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d006      	beq.n	8006840 <pbuf_clone+0x4c>
 8006832:	4b06      	ldr	r3, [pc, #24]	; (800684c <pbuf_clone+0x58>)
 8006834:	f240 5224 	movw	r2, #1316	; 0x524
 8006838:	4905      	ldr	r1, [pc, #20]	; (8006850 <pbuf_clone+0x5c>)
 800683a:	4806      	ldr	r0, [pc, #24]	; (8006854 <pbuf_clone+0x60>)
 800683c:	f008 f846 	bl	800e8cc <iprintf>
  return q;
 8006840:	68fb      	ldr	r3, [r7, #12]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	0800fcd0 	.word	0x0800fcd0
 8006850:	08010144 	.word	0x08010144
 8006854:	0800fd30 	.word	0x0800fd30

08006858 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800685c:	f007 ff48 	bl	800e6f0 <rand>
 8006860:	4603      	mov	r3, r0
 8006862:	b29b      	uxth	r3, r3
 8006864:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006868:	b29b      	uxth	r3, r3
 800686a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800686e:	b29a      	uxth	r2, r3
 8006870:	4b01      	ldr	r3, [pc, #4]	; (8006878 <tcp_init+0x20>)
 8006872:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006874:	bf00      	nop
 8006876:	bd80      	pop	{r7, pc}
 8006878:	24000024 	.word	0x24000024

0800687c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	7d1b      	ldrb	r3, [r3, #20]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d105      	bne.n	8006898 <tcp_free+0x1c>
 800688c:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <tcp_free+0x2c>)
 800688e:	22d4      	movs	r2, #212	; 0xd4
 8006890:	4906      	ldr	r1, [pc, #24]	; (80068ac <tcp_free+0x30>)
 8006892:	4807      	ldr	r0, [pc, #28]	; (80068b0 <tcp_free+0x34>)
 8006894:	f008 f81a 	bl	800e8cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	2001      	movs	r0, #1
 800689c:	f7fe fed8 	bl	8005650 <memp_free>
}
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	080101d0 	.word	0x080101d0
 80068ac:	08010200 	.word	0x08010200
 80068b0:	08010214 	.word	0x08010214

080068b4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	7d1b      	ldrb	r3, [r3, #20]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d105      	bne.n	80068d0 <tcp_free_listen+0x1c>
 80068c4:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <tcp_free_listen+0x2c>)
 80068c6:	22df      	movs	r2, #223	; 0xdf
 80068c8:	4906      	ldr	r1, [pc, #24]	; (80068e4 <tcp_free_listen+0x30>)
 80068ca:	4807      	ldr	r0, [pc, #28]	; (80068e8 <tcp_free_listen+0x34>)
 80068cc:	f007 fffe 	bl	800e8cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	2002      	movs	r0, #2
 80068d4:	f7fe febc 	bl	8005650 <memp_free>
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	080101d0 	.word	0x080101d0
 80068e4:	0801023c 	.word	0x0801023c
 80068e8:	08010214 	.word	0x08010214

080068ec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80068f0:	f000 fea2 	bl	8007638 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80068f4:	4b07      	ldr	r3, [pc, #28]	; (8006914 <tcp_tmr+0x28>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	3301      	adds	r3, #1
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	4b05      	ldr	r3, [pc, #20]	; (8006914 <tcp_tmr+0x28>)
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	4b04      	ldr	r3, [pc, #16]	; (8006914 <tcp_tmr+0x28>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800690c:	f000 fb54 	bl	8006fb8 <tcp_slowtmr>
  }
}
 8006910:	bf00      	nop
 8006912:	bd80      	pop	{r7, pc}
 8006914:	24007ac5 	.word	0x24007ac5

08006918 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d105      	bne.n	8006934 <tcp_remove_listener+0x1c>
 8006928:	4b0d      	ldr	r3, [pc, #52]	; (8006960 <tcp_remove_listener+0x48>)
 800692a:	22ff      	movs	r2, #255	; 0xff
 800692c:	490d      	ldr	r1, [pc, #52]	; (8006964 <tcp_remove_listener+0x4c>)
 800692e:	480e      	ldr	r0, [pc, #56]	; (8006968 <tcp_remove_listener+0x50>)
 8006930:	f007 ffcc 	bl	800e8cc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	e00a      	b.n	8006950 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d102      	bne.n	800694a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f1      	bne.n	800693a <tcp_remove_listener+0x22>
    }
  }
}
 8006956:	bf00      	nop
 8006958:	bf00      	nop
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	080101d0 	.word	0x080101d0
 8006964:	08010258 	.word	0x08010258
 8006968:	08010214 	.word	0x08010214

0800696c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <tcp_listen_closed+0x1c>
 800697a:	4b14      	ldr	r3, [pc, #80]	; (80069cc <tcp_listen_closed+0x60>)
 800697c:	f240 1211 	movw	r2, #273	; 0x111
 8006980:	4913      	ldr	r1, [pc, #76]	; (80069d0 <tcp_listen_closed+0x64>)
 8006982:	4814      	ldr	r0, [pc, #80]	; (80069d4 <tcp_listen_closed+0x68>)
 8006984:	f007 ffa2 	bl	800e8cc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	7d1b      	ldrb	r3, [r3, #20]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d006      	beq.n	800699e <tcp_listen_closed+0x32>
 8006990:	4b0e      	ldr	r3, [pc, #56]	; (80069cc <tcp_listen_closed+0x60>)
 8006992:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006996:	4910      	ldr	r1, [pc, #64]	; (80069d8 <tcp_listen_closed+0x6c>)
 8006998:	480e      	ldr	r0, [pc, #56]	; (80069d4 <tcp_listen_closed+0x68>)
 800699a:	f007 ff97 	bl	800e8cc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800699e:	2301      	movs	r3, #1
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	e00b      	b.n	80069bc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80069a4:	4a0d      	ldr	r2, [pc, #52]	; (80069dc <tcp_listen_closed+0x70>)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff ffb1 	bl	8006918 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3301      	adds	r3, #1
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d9f0      	bls.n	80069a4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80069c2:	bf00      	nop
 80069c4:	bf00      	nop
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	080101d0 	.word	0x080101d0
 80069d0:	08010280 	.word	0x08010280
 80069d4:	08010214 	.word	0x08010214
 80069d8:	0801028c 	.word	0x0801028c
 80069dc:	080121a8 	.word	0x080121a8

080069e0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80069e0:	b5b0      	push	{r4, r5, r7, lr}
 80069e2:	b088      	sub	sp, #32
 80069e4:	af04      	add	r7, sp, #16
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d106      	bne.n	8006a00 <tcp_close_shutdown+0x20>
 80069f2:	4b63      	ldr	r3, [pc, #396]	; (8006b80 <tcp_close_shutdown+0x1a0>)
 80069f4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80069f8:	4962      	ldr	r1, [pc, #392]	; (8006b84 <tcp_close_shutdown+0x1a4>)
 80069fa:	4863      	ldr	r0, [pc, #396]	; (8006b88 <tcp_close_shutdown+0x1a8>)
 80069fc:	f007 ff66 	bl	800e8cc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d066      	beq.n	8006ad4 <tcp_close_shutdown+0xf4>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	7d1b      	ldrb	r3, [r3, #20]
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d003      	beq.n	8006a16 <tcp_close_shutdown+0x36>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	7d1b      	ldrb	r3, [r3, #20]
 8006a12:	2b07      	cmp	r3, #7
 8006a14:	d15e      	bne.n	8006ad4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d104      	bne.n	8006a28 <tcp_close_shutdown+0x48>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a22:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006a26:	d055      	beq.n	8006ad4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	8b5b      	ldrh	r3, [r3, #26]
 8006a2c:	f003 0310 	and.w	r3, r3, #16
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d106      	bne.n	8006a42 <tcp_close_shutdown+0x62>
 8006a34:	4b52      	ldr	r3, [pc, #328]	; (8006b80 <tcp_close_shutdown+0x1a0>)
 8006a36:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006a3a:	4954      	ldr	r1, [pc, #336]	; (8006b8c <tcp_close_shutdown+0x1ac>)
 8006a3c:	4852      	ldr	r0, [pc, #328]	; (8006b88 <tcp_close_shutdown+0x1a8>)
 8006a3e:	f007 ff45 	bl	800e8cc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006a4a:	687d      	ldr	r5, [r7, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3304      	adds	r3, #4
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	8ad2      	ldrh	r2, [r2, #22]
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	8b09      	ldrh	r1, [r1, #24]
 8006a58:	9102      	str	r1, [sp, #8]
 8006a5a:	9201      	str	r2, [sp, #4]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	462b      	mov	r3, r5
 8006a60:	4622      	mov	r2, r4
 8006a62:	4601      	mov	r1, r0
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f004 fe91 	bl	800b78c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f001 f8c6 	bl	8007bfc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006a70:	4b47      	ldr	r3, [pc, #284]	; (8006b90 <tcp_close_shutdown+0x1b0>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d105      	bne.n	8006a86 <tcp_close_shutdown+0xa6>
 8006a7a:	4b45      	ldr	r3, [pc, #276]	; (8006b90 <tcp_close_shutdown+0x1b0>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	4a43      	ldr	r2, [pc, #268]	; (8006b90 <tcp_close_shutdown+0x1b0>)
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	e013      	b.n	8006aae <tcp_close_shutdown+0xce>
 8006a86:	4b42      	ldr	r3, [pc, #264]	; (8006b90 <tcp_close_shutdown+0x1b0>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	e00c      	b.n	8006aa8 <tcp_close_shutdown+0xc8>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d104      	bne.n	8006aa2 <tcp_close_shutdown+0xc2>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	60da      	str	r2, [r3, #12]
 8006aa0:	e005      	b.n	8006aae <tcp_close_shutdown+0xce>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1ef      	bne.n	8006a8e <tcp_close_shutdown+0xae>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	60da      	str	r2, [r3, #12]
 8006ab4:	4b37      	ldr	r3, [pc, #220]	; (8006b94 <tcp_close_shutdown+0x1b4>)
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006aba:	4b37      	ldr	r3, [pc, #220]	; (8006b98 <tcp_close_shutdown+0x1b8>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d102      	bne.n	8006aca <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006ac4:	f003 fd5e 	bl	800a584 <tcp_trigger_input_pcb_close>
 8006ac8:	e002      	b.n	8006ad0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fed6 	bl	800687c <tcp_free>
      }
      return ERR_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e050      	b.n	8006b76 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	7d1b      	ldrb	r3, [r3, #20]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d03b      	beq.n	8006b54 <tcp_close_shutdown+0x174>
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	dc44      	bgt.n	8006b6a <tcp_close_shutdown+0x18a>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <tcp_close_shutdown+0x10a>
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d02a      	beq.n	8006b3e <tcp_close_shutdown+0x15e>
 8006ae8:	e03f      	b.n	8006b6a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	8adb      	ldrh	r3, [r3, #22]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d021      	beq.n	8006b36 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006af2:	4b2a      	ldr	r3, [pc, #168]	; (8006b9c <tcp_close_shutdown+0x1bc>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d105      	bne.n	8006b08 <tcp_close_shutdown+0x128>
 8006afc:	4b27      	ldr	r3, [pc, #156]	; (8006b9c <tcp_close_shutdown+0x1bc>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	4a26      	ldr	r2, [pc, #152]	; (8006b9c <tcp_close_shutdown+0x1bc>)
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	e013      	b.n	8006b30 <tcp_close_shutdown+0x150>
 8006b08:	4b24      	ldr	r3, [pc, #144]	; (8006b9c <tcp_close_shutdown+0x1bc>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	60bb      	str	r3, [r7, #8]
 8006b0e:	e00c      	b.n	8006b2a <tcp_close_shutdown+0x14a>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d104      	bne.n	8006b24 <tcp_close_shutdown+0x144>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	60da      	str	r2, [r3, #12]
 8006b22:	e005      	b.n	8006b30 <tcp_close_shutdown+0x150>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	60bb      	str	r3, [r7, #8]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1ef      	bne.n	8006b10 <tcp_close_shutdown+0x130>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff fea0 	bl	800687c <tcp_free>
      break;
 8006b3c:	e01a      	b.n	8006b74 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff ff14 	bl	800696c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006b44:	6879      	ldr	r1, [r7, #4]
 8006b46:	4816      	ldr	r0, [pc, #88]	; (8006ba0 <tcp_close_shutdown+0x1c0>)
 8006b48:	f001 f8a8 	bl	8007c9c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff feb1 	bl	80068b4 <tcp_free_listen>
      break;
 8006b52:	e00f      	b.n	8006b74 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	480e      	ldr	r0, [pc, #56]	; (8006b90 <tcp_close_shutdown+0x1b0>)
 8006b58:	f001 f8a0 	bl	8007c9c <tcp_pcb_remove>
 8006b5c:	4b0d      	ldr	r3, [pc, #52]	; (8006b94 <tcp_close_shutdown+0x1b4>)
 8006b5e:	2201      	movs	r2, #1
 8006b60:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff fe8a 	bl	800687c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006b68:	e004      	b.n	8006b74 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f81a 	bl	8006ba4 <tcp_close_shutdown_fin>
 8006b70:	4603      	mov	r3, r0
 8006b72:	e000      	b.n	8006b76 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	080101d0 	.word	0x080101d0
 8006b84:	080102a4 	.word	0x080102a4
 8006b88:	08010214 	.word	0x08010214
 8006b8c:	080102c4 	.word	0x080102c4
 8006b90:	24007abc 	.word	0x24007abc
 8006b94:	24007ac4 	.word	0x24007ac4
 8006b98:	24007afc 	.word	0x24007afc
 8006b9c:	24007ab4 	.word	0x24007ab4
 8006ba0:	24007ab8 	.word	0x24007ab8

08006ba4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d106      	bne.n	8006bc0 <tcp_close_shutdown_fin+0x1c>
 8006bb2:	4b2e      	ldr	r3, [pc, #184]	; (8006c6c <tcp_close_shutdown_fin+0xc8>)
 8006bb4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006bb8:	492d      	ldr	r1, [pc, #180]	; (8006c70 <tcp_close_shutdown_fin+0xcc>)
 8006bba:	482e      	ldr	r0, [pc, #184]	; (8006c74 <tcp_close_shutdown_fin+0xd0>)
 8006bbc:	f007 fe86 	bl	800e8cc <iprintf>

  switch (pcb->state) {
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	7d1b      	ldrb	r3, [r3, #20]
 8006bc4:	2b07      	cmp	r3, #7
 8006bc6:	d020      	beq.n	8006c0a <tcp_close_shutdown_fin+0x66>
 8006bc8:	2b07      	cmp	r3, #7
 8006bca:	dc2b      	bgt.n	8006c24 <tcp_close_shutdown_fin+0x80>
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d002      	beq.n	8006bd6 <tcp_close_shutdown_fin+0x32>
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d00d      	beq.n	8006bf0 <tcp_close_shutdown_fin+0x4c>
 8006bd4:	e026      	b.n	8006c24 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f003 fee6 	bl	800a9a8 <tcp_send_fin>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d11f      	bne.n	8006c28 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2205      	movs	r2, #5
 8006bec:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006bee:	e01b      	b.n	8006c28 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f003 fed9 	bl	800a9a8 <tcp_send_fin>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d114      	bne.n	8006c2c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2205      	movs	r2, #5
 8006c06:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c08:	e010      	b.n	8006c2c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f003 fecc 	bl	800a9a8 <tcp_send_fin>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d109      	bne.n	8006c30 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2209      	movs	r2, #9
 8006c20:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c22:	e005      	b.n	8006c30 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	e01c      	b.n	8006c62 <tcp_close_shutdown_fin+0xbe>
      break;
 8006c28:	bf00      	nop
 8006c2a:	e002      	b.n	8006c32 <tcp_close_shutdown_fin+0x8e>
      break;
 8006c2c:	bf00      	nop
 8006c2e:	e000      	b.n	8006c32 <tcp_close_shutdown_fin+0x8e>
      break;
 8006c30:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d103      	bne.n	8006c42 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f003 fff2 	bl	800ac24 <tcp_output>
 8006c40:	e00d      	b.n	8006c5e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4a:	d108      	bne.n	8006c5e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	8b5b      	ldrh	r3, [r3, #26]
 8006c50:	f043 0308 	orr.w	r3, r3, #8
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e001      	b.n	8006c62 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	080101d0 	.word	0x080101d0
 8006c70:	08010280 	.word	0x08010280
 8006c74:	08010214 	.word	0x08010214

08006c78 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d109      	bne.n	8006c9a <tcp_close+0x22>
 8006c86:	4b0f      	ldr	r3, [pc, #60]	; (8006cc4 <tcp_close+0x4c>)
 8006c88:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006c8c:	490e      	ldr	r1, [pc, #56]	; (8006cc8 <tcp_close+0x50>)
 8006c8e:	480f      	ldr	r0, [pc, #60]	; (8006ccc <tcp_close+0x54>)
 8006c90:	f007 fe1c 	bl	800e8cc <iprintf>
 8006c94:	f06f 030f 	mvn.w	r3, #15
 8006c98:	e00f      	b.n	8006cba <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	7d1b      	ldrb	r3, [r3, #20]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d006      	beq.n	8006cb0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	8b5b      	ldrh	r3, [r3, #26]
 8006ca6:	f043 0310 	orr.w	r3, r3, #16
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7ff fe94 	bl	80069e0 <tcp_close_shutdown>
 8006cb8:	4603      	mov	r3, r0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	080101d0 	.word	0x080101d0
 8006cc8:	080102e0 	.word	0x080102e0
 8006ccc:	08010214 	.word	0x08010214

08006cd0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08e      	sub	sp, #56	; 0x38
 8006cd4:	af04      	add	r7, sp, #16
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d107      	bne.n	8006cf0 <tcp_abandon+0x20>
 8006ce0:	4b52      	ldr	r3, [pc, #328]	; (8006e2c <tcp_abandon+0x15c>)
 8006ce2:	f240 223d 	movw	r2, #573	; 0x23d
 8006ce6:	4952      	ldr	r1, [pc, #328]	; (8006e30 <tcp_abandon+0x160>)
 8006ce8:	4852      	ldr	r0, [pc, #328]	; (8006e34 <tcp_abandon+0x164>)
 8006cea:	f007 fdef 	bl	800e8cc <iprintf>
 8006cee:	e099      	b.n	8006e24 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	7d1b      	ldrb	r3, [r3, #20]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d106      	bne.n	8006d06 <tcp_abandon+0x36>
 8006cf8:	4b4c      	ldr	r3, [pc, #304]	; (8006e2c <tcp_abandon+0x15c>)
 8006cfa:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006cfe:	494e      	ldr	r1, [pc, #312]	; (8006e38 <tcp_abandon+0x168>)
 8006d00:	484c      	ldr	r0, [pc, #304]	; (8006e34 <tcp_abandon+0x164>)
 8006d02:	f007 fde3 	bl	800e8cc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	7d1b      	ldrb	r3, [r3, #20]
 8006d0a:	2b0a      	cmp	r3, #10
 8006d0c:	d107      	bne.n	8006d1e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	484a      	ldr	r0, [pc, #296]	; (8006e3c <tcp_abandon+0x16c>)
 8006d12:	f000 ffc3 	bl	8007c9c <tcp_pcb_remove>
    tcp_free(pcb);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff fdb0 	bl	800687c <tcp_free>
 8006d1c:	e082      	b.n	8006e24 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d2a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d38:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	7d1b      	ldrb	r3, [r3, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d126      	bne.n	8006d96 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	8adb      	ldrh	r3, [r3, #22]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d02e      	beq.n	8006dae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006d50:	4b3b      	ldr	r3, [pc, #236]	; (8006e40 <tcp_abandon+0x170>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d105      	bne.n	8006d66 <tcp_abandon+0x96>
 8006d5a:	4b39      	ldr	r3, [pc, #228]	; (8006e40 <tcp_abandon+0x170>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	4a37      	ldr	r2, [pc, #220]	; (8006e40 <tcp_abandon+0x170>)
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	e013      	b.n	8006d8e <tcp_abandon+0xbe>
 8006d66:	4b36      	ldr	r3, [pc, #216]	; (8006e40 <tcp_abandon+0x170>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	61fb      	str	r3, [r7, #28]
 8006d6c:	e00c      	b.n	8006d88 <tcp_abandon+0xb8>
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d104      	bne.n	8006d82 <tcp_abandon+0xb2>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	60da      	str	r2, [r3, #12]
 8006d80:	e005      	b.n	8006d8e <tcp_abandon+0xbe>
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	61fb      	str	r3, [r7, #28]
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1ef      	bne.n	8006d6e <tcp_abandon+0x9e>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	60da      	str	r2, [r3, #12]
 8006d94:	e00b      	b.n	8006dae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	8adb      	ldrh	r3, [r3, #22]
 8006d9e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	4828      	ldr	r0, [pc, #160]	; (8006e44 <tcp_abandon+0x174>)
 8006da4:	f000 ff7a 	bl	8007c9c <tcp_pcb_remove>
 8006da8:	4b27      	ldr	r3, [pc, #156]	; (8006e48 <tcp_abandon+0x178>)
 8006daa:	2201      	movs	r2, #1
 8006dac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d004      	beq.n	8006dc0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fd1c 	bl	80077f8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d004      	beq.n	8006dd2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fd13 	bl	80077f8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d004      	beq.n	8006de4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fd0a 	bl	80077f8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00e      	beq.n	8006e08 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3304      	adds	r3, #4
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	8b12      	ldrh	r2, [r2, #24]
 8006df4:	9202      	str	r2, [sp, #8]
 8006df6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006df8:	9201      	str	r2, [sp, #4]
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	69b9      	ldr	r1, [r7, #24]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f004 fcc2 	bl	800b78c <tcp_rst>
    }
    last_state = pcb->state;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	7d1b      	ldrb	r3, [r3, #20]
 8006e0c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff fd34 	bl	800687c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <tcp_abandon+0x154>
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f06f 010c 	mvn.w	r1, #12
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	4798      	blx	r3
  }
}
 8006e24:	3728      	adds	r7, #40	; 0x28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	080101d0 	.word	0x080101d0
 8006e30:	08010314 	.word	0x08010314
 8006e34:	08010214 	.word	0x08010214
 8006e38:	08010330 	.word	0x08010330
 8006e3c:	24007ac0 	.word	0x24007ac0
 8006e40:	24007ab4 	.word	0x24007ab4
 8006e44:	24007abc 	.word	0x24007abc
 8006e48:	24007ac4 	.word	0x24007ac4

08006e4c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006e54:	2101      	movs	r1, #1
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff ff3a 	bl	8006cd0 <tcp_abandon>
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d106      	bne.n	8006e80 <tcp_update_rcv_ann_wnd+0x1c>
 8006e72:	4b25      	ldr	r3, [pc, #148]	; (8006f08 <tcp_update_rcv_ann_wnd+0xa4>)
 8006e74:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006e78:	4924      	ldr	r1, [pc, #144]	; (8006f0c <tcp_update_rcv_ann_wnd+0xa8>)
 8006e7a:	4825      	ldr	r0, [pc, #148]	; (8006f10 <tcp_update_rcv_ann_wnd+0xac>)
 8006e7c:	f007 fd26 	bl	800e8cc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006e88:	4413      	add	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006e94:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006e98:	bf28      	it	cs
 8006e9a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006e9e:	b292      	uxth	r2, r2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	db08      	blt.n	8006ebc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	e020      	b.n	8006efe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	dd03      	ble.n	8006ed2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ed0:	e014      	b.n	8006efc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee4:	d306      	bcc.n	8006ef4 <tcp_update_rcv_ann_wnd+0x90>
 8006ee6:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <tcp_update_rcv_ann_wnd+0xa4>)
 8006ee8:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006eec:	4909      	ldr	r1, [pc, #36]	; (8006f14 <tcp_update_rcv_ann_wnd+0xb0>)
 8006eee:	4808      	ldr	r0, [pc, #32]	; (8006f10 <tcp_update_rcv_ann_wnd+0xac>)
 8006ef0:	f007 fcec 	bl	800e8cc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006efc:	2300      	movs	r3, #0
  }
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	080101d0 	.word	0x080101d0
 8006f0c:	0801042c 	.word	0x0801042c
 8006f10:	08010214 	.word	0x08010214
 8006f14:	08010450 	.word	0x08010450

08006f18 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d107      	bne.n	8006f3a <tcp_recved+0x22>
 8006f2a:	4b1f      	ldr	r3, [pc, #124]	; (8006fa8 <tcp_recved+0x90>)
 8006f2c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006f30:	491e      	ldr	r1, [pc, #120]	; (8006fac <tcp_recved+0x94>)
 8006f32:	481f      	ldr	r0, [pc, #124]	; (8006fb0 <tcp_recved+0x98>)
 8006f34:	f007 fcca 	bl	800e8cc <iprintf>
 8006f38:	e032      	b.n	8006fa0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	7d1b      	ldrb	r3, [r3, #20]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d106      	bne.n	8006f50 <tcp_recved+0x38>
 8006f42:	4b19      	ldr	r3, [pc, #100]	; (8006fa8 <tcp_recved+0x90>)
 8006f44:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006f48:	491a      	ldr	r1, [pc, #104]	; (8006fb4 <tcp_recved+0x9c>)
 8006f4a:	4819      	ldr	r0, [pc, #100]	; (8006fb0 <tcp_recved+0x98>)
 8006f4c:	f007 fcbe 	bl	800e8cc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006f54:	887b      	ldrh	r3, [r7, #2]
 8006f56:	4413      	add	r3, r2
 8006f58:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006f5a:	89fb      	ldrh	r3, [r7, #14]
 8006f5c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006f60:	d804      	bhi.n	8006f6c <tcp_recved+0x54>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f66:	89fa      	ldrh	r2, [r7, #14]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d204      	bcs.n	8006f76 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006f72:	851a      	strh	r2, [r3, #40]	; 0x28
 8006f74:	e002      	b.n	8006f7c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	89fa      	ldrh	r2, [r7, #14]
 8006f7a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff ff71 	bl	8006e64 <tcp_update_rcv_ann_wnd>
 8006f82:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006f8a:	d309      	bcc.n	8006fa0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	8b5b      	ldrh	r3, [r3, #26]
 8006f90:	f043 0302 	orr.w	r3, r3, #2
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f003 fe42 	bl	800ac24 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	080101d0 	.word	0x080101d0
 8006fac:	0801046c 	.word	0x0801046c
 8006fb0:	08010214 	.word	0x08010214
 8006fb4:	08010484 	.word	0x08010484

08006fb8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006fb8:	b5b0      	push	{r4, r5, r7, lr}
 8006fba:	b090      	sub	sp, #64	; 0x40
 8006fbc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006fc4:	4b94      	ldr	r3, [pc, #592]	; (8007218 <tcp_slowtmr+0x260>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	4a93      	ldr	r2, [pc, #588]	; (8007218 <tcp_slowtmr+0x260>)
 8006fcc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006fce:	4b93      	ldr	r3, [pc, #588]	; (800721c <tcp_slowtmr+0x264>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	4b91      	ldr	r3, [pc, #580]	; (800721c <tcp_slowtmr+0x264>)
 8006fd8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006fde:	4b90      	ldr	r3, [pc, #576]	; (8007220 <tcp_slowtmr+0x268>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006fe4:	e29d      	b.n	8007522 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	7d1b      	ldrb	r3, [r3, #20]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d106      	bne.n	8006ffc <tcp_slowtmr+0x44>
 8006fee:	4b8d      	ldr	r3, [pc, #564]	; (8007224 <tcp_slowtmr+0x26c>)
 8006ff0:	f240 42be 	movw	r2, #1214	; 0x4be
 8006ff4:	498c      	ldr	r1, [pc, #560]	; (8007228 <tcp_slowtmr+0x270>)
 8006ff6:	488d      	ldr	r0, [pc, #564]	; (800722c <tcp_slowtmr+0x274>)
 8006ff8:	f007 fc68 	bl	800e8cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffe:	7d1b      	ldrb	r3, [r3, #20]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d106      	bne.n	8007012 <tcp_slowtmr+0x5a>
 8007004:	4b87      	ldr	r3, [pc, #540]	; (8007224 <tcp_slowtmr+0x26c>)
 8007006:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800700a:	4989      	ldr	r1, [pc, #548]	; (8007230 <tcp_slowtmr+0x278>)
 800700c:	4887      	ldr	r0, [pc, #540]	; (800722c <tcp_slowtmr+0x274>)
 800700e:	f007 fc5d 	bl	800e8cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	7d1b      	ldrb	r3, [r3, #20]
 8007016:	2b0a      	cmp	r3, #10
 8007018:	d106      	bne.n	8007028 <tcp_slowtmr+0x70>
 800701a:	4b82      	ldr	r3, [pc, #520]	; (8007224 <tcp_slowtmr+0x26c>)
 800701c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007020:	4984      	ldr	r1, [pc, #528]	; (8007234 <tcp_slowtmr+0x27c>)
 8007022:	4882      	ldr	r0, [pc, #520]	; (800722c <tcp_slowtmr+0x274>)
 8007024:	f007 fc52 	bl	800e8cc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	7f9a      	ldrb	r2, [r3, #30]
 800702c:	4b7b      	ldr	r3, [pc, #492]	; (800721c <tcp_slowtmr+0x264>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	429a      	cmp	r2, r3
 8007032:	d105      	bne.n	8007040 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800703e:	e270      	b.n	8007522 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007040:	4b76      	ldr	r3, [pc, #472]	; (800721c <tcp_slowtmr+0x264>)
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007046:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007056:	7d1b      	ldrb	r3, [r3, #20]
 8007058:	2b02      	cmp	r3, #2
 800705a:	d10a      	bne.n	8007072 <tcp_slowtmr+0xba>
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007062:	2b05      	cmp	r3, #5
 8007064:	d905      	bls.n	8007072 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800706a:	3301      	adds	r3, #1
 800706c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007070:	e11e      	b.n	80072b0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007074:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007078:	2b0b      	cmp	r3, #11
 800707a:	d905      	bls.n	8007088 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800707c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007080:	3301      	adds	r3, #1
 8007082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007086:	e113      	b.n	80072b0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800708e:	2b00      	cmp	r3, #0
 8007090:	d075      	beq.n	800717e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	2b00      	cmp	r3, #0
 8007098:	d006      	beq.n	80070a8 <tcp_slowtmr+0xf0>
 800709a:	4b62      	ldr	r3, [pc, #392]	; (8007224 <tcp_slowtmr+0x26c>)
 800709c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80070a0:	4965      	ldr	r1, [pc, #404]	; (8007238 <tcp_slowtmr+0x280>)
 80070a2:	4862      	ldr	r0, [pc, #392]	; (800722c <tcp_slowtmr+0x274>)
 80070a4:	f007 fc12 	bl	800e8cc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80070a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d106      	bne.n	80070be <tcp_slowtmr+0x106>
 80070b0:	4b5c      	ldr	r3, [pc, #368]	; (8007224 <tcp_slowtmr+0x26c>)
 80070b2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80070b6:	4961      	ldr	r1, [pc, #388]	; (800723c <tcp_slowtmr+0x284>)
 80070b8:	485c      	ldr	r0, [pc, #368]	; (800722c <tcp_slowtmr+0x274>)
 80070ba:	f007 fc07 	bl	800e8cc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80070be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80070c4:	2b0b      	cmp	r3, #11
 80070c6:	d905      	bls.n	80070d4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80070c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070cc:	3301      	adds	r3, #1
 80070ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070d2:	e0ed      	b.n	80072b0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80070d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80070da:	3b01      	subs	r3, #1
 80070dc:	4a58      	ldr	r2, [pc, #352]	; (8007240 <tcp_slowtmr+0x288>)
 80070de:	5cd3      	ldrb	r3, [r2, r3]
 80070e0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80070e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80070e8:	7c7a      	ldrb	r2, [r7, #17]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d907      	bls.n	80070fe <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80070f4:	3301      	adds	r3, #1
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007100:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007104:	7c7a      	ldrb	r2, [r7, #17]
 8007106:	429a      	cmp	r2, r3
 8007108:	f200 80d2 	bhi.w	80072b0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800710c:	2301      	movs	r3, #1
 800710e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007116:	2b00      	cmp	r3, #0
 8007118:	d108      	bne.n	800712c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800711a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800711c:	f004 fc2a 	bl	800b974 <tcp_zero_window_probe>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d014      	beq.n	8007150 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007126:	2300      	movs	r3, #0
 8007128:	623b      	str	r3, [r7, #32]
 800712a:	e011      	b.n	8007150 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007132:	4619      	mov	r1, r3
 8007134:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007136:	f003 faef 	bl	800a718 <tcp_split_unsent_seg>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d107      	bne.n	8007150 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007140:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007142:	f003 fd6f 	bl	800ac24 <tcp_output>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d101      	bne.n	8007150 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800714c:	2300      	movs	r3, #0
 800714e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 80ac 	beq.w	80072b0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007162:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007166:	2b06      	cmp	r3, #6
 8007168:	f200 80a2 	bhi.w	80072b0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007172:	3301      	adds	r3, #1
 8007174:	b2da      	uxtb	r2, r3
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800717c:	e098      	b.n	80072b0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007184:	2b00      	cmp	r3, #0
 8007186:	db0f      	blt.n	80071a8 <tcp_slowtmr+0x1f0>
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800718e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007192:	4293      	cmp	r3, r2
 8007194:	d008      	beq.n	80071a8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800719c:	b29b      	uxth	r3, r3
 800719e:	3301      	adds	r3, #1
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	b21a      	sxth	r2, r3
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80071a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071aa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80071b4:	429a      	cmp	r2, r3
 80071b6:	db7b      	blt.n	80072b0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80071b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071ba:	f004 f827 	bl	800b20c <tcp_rexmit_rto_prepare>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d007      	beq.n	80071d4 <tcp_slowtmr+0x21c>
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d171      	bne.n	80072b0 <tcp_slowtmr+0x2f8>
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d06d      	beq.n	80072b0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	7d1b      	ldrb	r3, [r3, #20]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d03a      	beq.n	8007252 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80071dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071e2:	2b0c      	cmp	r3, #12
 80071e4:	bf28      	it	cs
 80071e6:	230c      	movcs	r3, #12
 80071e8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80071f0:	10db      	asrs	r3, r3, #3
 80071f2:	b21b      	sxth	r3, r3
 80071f4:	461a      	mov	r2, r3
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80071fc:	4413      	add	r3, r2
 80071fe:	7efa      	ldrb	r2, [r7, #27]
 8007200:	4910      	ldr	r1, [pc, #64]	; (8007244 <tcp_slowtmr+0x28c>)
 8007202:	5c8a      	ldrb	r2, [r1, r2]
 8007204:	4093      	lsls	r3, r2
 8007206:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800720e:	4293      	cmp	r3, r2
 8007210:	dc1a      	bgt.n	8007248 <tcp_slowtmr+0x290>
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	b21a      	sxth	r2, r3
 8007216:	e019      	b.n	800724c <tcp_slowtmr+0x294>
 8007218:	24007ab0 	.word	0x24007ab0
 800721c:	24007ac6 	.word	0x24007ac6
 8007220:	24007abc 	.word	0x24007abc
 8007224:	080101d0 	.word	0x080101d0
 8007228:	08010514 	.word	0x08010514
 800722c:	08010214 	.word	0x08010214
 8007230:	08010540 	.word	0x08010540
 8007234:	0801056c 	.word	0x0801056c
 8007238:	0801059c 	.word	0x0801059c
 800723c:	080105d0 	.word	0x080105d0
 8007240:	080121a0 	.word	0x080121a0
 8007244:	08012190 	.word	0x08012190
 8007248:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	2200      	movs	r2, #0
 8007256:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007264:	4293      	cmp	r3, r2
 8007266:	bf28      	it	cs
 8007268:	4613      	movcs	r3, r2
 800726a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800726c:	8a7b      	ldrh	r3, [r7, #18]
 800726e:	085b      	lsrs	r3, r3, #1
 8007270:	b29a      	uxth	r2, r3
 8007272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007274:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	b29b      	uxth	r3, r3
 8007286:	429a      	cmp	r2, r3
 8007288:	d206      	bcs.n	8007298 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	b29a      	uxth	r2, r3
 8007292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007294:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	2200      	movs	r2, #0
 80072a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80072aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072ac:	f004 f81e 	bl	800b2ec <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	7d1b      	ldrb	r3, [r3, #20]
 80072b4:	2b06      	cmp	r3, #6
 80072b6:	d111      	bne.n	80072dc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	8b5b      	ldrh	r3, [r3, #26]
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072c4:	4b9c      	ldr	r3, [pc, #624]	; (8007538 <tcp_slowtmr+0x580>)
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b28      	cmp	r3, #40	; 0x28
 80072d0:	d904      	bls.n	80072dc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80072d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072d6:	3301      	adds	r3, #1
 80072d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80072dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072de:	7a5b      	ldrb	r3, [r3, #9]
 80072e0:	f003 0308 	and.w	r3, r3, #8
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d04a      	beq.n	800737e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d003      	beq.n	80072f8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80072f4:	2b07      	cmp	r3, #7
 80072f6:	d142      	bne.n	800737e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072f8:	4b8f      	ldr	r3, [pc, #572]	; (8007538 <tcp_slowtmr+0x580>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fe:	6a1b      	ldr	r3, [r3, #32]
 8007300:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007308:	4b8c      	ldr	r3, [pc, #560]	; (800753c <tcp_slowtmr+0x584>)
 800730a:	440b      	add	r3, r1
 800730c:	498c      	ldr	r1, [pc, #560]	; (8007540 <tcp_slowtmr+0x588>)
 800730e:	fba1 1303 	umull	r1, r3, r1, r3
 8007312:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007314:	429a      	cmp	r2, r3
 8007316:	d90a      	bls.n	800732e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800731c:	3301      	adds	r3, #1
 800731e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007322:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007326:	3301      	adds	r3, #1
 8007328:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800732c:	e027      	b.n	800737e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800732e:	4b82      	ldr	r3, [pc, #520]	; (8007538 <tcp_slowtmr+0x580>)
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007340:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007344:	4618      	mov	r0, r3
 8007346:	4b7f      	ldr	r3, [pc, #508]	; (8007544 <tcp_slowtmr+0x58c>)
 8007348:	fb00 f303 	mul.w	r3, r0, r3
 800734c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800734e:	497c      	ldr	r1, [pc, #496]	; (8007540 <tcp_slowtmr+0x588>)
 8007350:	fba1 1303 	umull	r1, r3, r1, r3
 8007354:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007356:	429a      	cmp	r2, r3
 8007358:	d911      	bls.n	800737e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800735a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800735c:	f004 faca 	bl	800b8f4 <tcp_keepalive>
 8007360:	4603      	mov	r3, r0
 8007362:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007366:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800736a:	2b00      	cmp	r3, #0
 800736c:	d107      	bne.n	800737e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007374:	3301      	adds	r3, #1
 8007376:	b2da      	uxtb	r2, r3
 8007378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800737e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007382:	2b00      	cmp	r3, #0
 8007384:	d011      	beq.n	80073aa <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007386:	4b6c      	ldr	r3, [pc, #432]	; (8007538 <tcp_slowtmr+0x580>)
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	1ad2      	subs	r2, r2, r3
 8007390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007392:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007396:	4619      	mov	r1, r3
 8007398:	460b      	mov	r3, r1
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	440b      	add	r3, r1
 800739e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d302      	bcc.n	80073aa <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80073a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073a6:	f000 fddd 	bl	8007f64 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	7d1b      	ldrb	r3, [r3, #20]
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d10b      	bne.n	80073ca <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80073b2:	4b61      	ldr	r3, [pc, #388]	; (8007538 <tcp_slowtmr+0x580>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b28      	cmp	r3, #40	; 0x28
 80073be:	d904      	bls.n	80073ca <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80073c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073c4:	3301      	adds	r3, #1
 80073c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80073ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073cc:	7d1b      	ldrb	r3, [r3, #20]
 80073ce:	2b09      	cmp	r3, #9
 80073d0:	d10b      	bne.n	80073ea <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80073d2:	4b59      	ldr	r3, [pc, #356]	; (8007538 <tcp_slowtmr+0x580>)
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2bf0      	cmp	r3, #240	; 0xf0
 80073de:	d904      	bls.n	80073ea <tcp_slowtmr+0x432>
        ++pcb_remove;
 80073e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073e4:	3301      	adds	r3, #1
 80073e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80073ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d060      	beq.n	80074b4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80073fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073fc:	f000 fbfe 	bl	8007bfc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007402:	2b00      	cmp	r3, #0
 8007404:	d010      	beq.n	8007428 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007406:	4b50      	ldr	r3, [pc, #320]	; (8007548 <tcp_slowtmr+0x590>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800740c:	429a      	cmp	r2, r3
 800740e:	d106      	bne.n	800741e <tcp_slowtmr+0x466>
 8007410:	4b4e      	ldr	r3, [pc, #312]	; (800754c <tcp_slowtmr+0x594>)
 8007412:	f240 526d 	movw	r2, #1389	; 0x56d
 8007416:	494e      	ldr	r1, [pc, #312]	; (8007550 <tcp_slowtmr+0x598>)
 8007418:	484e      	ldr	r0, [pc, #312]	; (8007554 <tcp_slowtmr+0x59c>)
 800741a:	f007 fa57 	bl	800e8cc <iprintf>
        prev->next = pcb->next;
 800741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	60da      	str	r2, [r3, #12]
 8007426:	e00f      	b.n	8007448 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007428:	4b47      	ldr	r3, [pc, #284]	; (8007548 <tcp_slowtmr+0x590>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800742e:	429a      	cmp	r2, r3
 8007430:	d006      	beq.n	8007440 <tcp_slowtmr+0x488>
 8007432:	4b46      	ldr	r3, [pc, #280]	; (800754c <tcp_slowtmr+0x594>)
 8007434:	f240 5271 	movw	r2, #1393	; 0x571
 8007438:	4947      	ldr	r1, [pc, #284]	; (8007558 <tcp_slowtmr+0x5a0>)
 800743a:	4846      	ldr	r0, [pc, #280]	; (8007554 <tcp_slowtmr+0x59c>)
 800743c:	f007 fa46 	bl	800e8cc <iprintf>
        tcp_active_pcbs = pcb->next;
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	4a40      	ldr	r2, [pc, #256]	; (8007548 <tcp_slowtmr+0x590>)
 8007446:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007448:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800744c:	2b00      	cmp	r3, #0
 800744e:	d013      	beq.n	8007478 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007458:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	3304      	adds	r3, #4
 800745e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007460:	8ad2      	ldrh	r2, [r2, #22]
 8007462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007464:	8b09      	ldrh	r1, [r1, #24]
 8007466:	9102      	str	r1, [sp, #8]
 8007468:	9201      	str	r2, [sp, #4]
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	462b      	mov	r3, r5
 800746e:	4622      	mov	r2, r4
 8007470:	4601      	mov	r1, r0
 8007472:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007474:	f004 f98a 	bl	800b78c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800747e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007480:	7d1b      	ldrb	r3, [r3, #20]
 8007482:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800748e:	6838      	ldr	r0, [r7, #0]
 8007490:	f7ff f9f4 	bl	800687c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007494:	4b31      	ldr	r3, [pc, #196]	; (800755c <tcp_slowtmr+0x5a4>)
 8007496:	2200      	movs	r2, #0
 8007498:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d004      	beq.n	80074aa <tcp_slowtmr+0x4f2>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f06f 010c 	mvn.w	r1, #12
 80074a6:	68b8      	ldr	r0, [r7, #8]
 80074a8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80074aa:	4b2c      	ldr	r3, [pc, #176]	; (800755c <tcp_slowtmr+0x5a4>)
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d037      	beq.n	8007522 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80074b2:	e592      	b.n	8006fda <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80074b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	7f1b      	ldrb	r3, [r3, #28]
 80074c2:	3301      	adds	r3, #1
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	7f1a      	ldrb	r2, [r3, #28]
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	7f5b      	ldrb	r3, [r3, #29]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d325      	bcc.n	8007522 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	2200      	movs	r2, #0
 80074da:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80074dc:	4b1f      	ldr	r3, [pc, #124]	; (800755c <tcp_slowtmr+0x5a4>)
 80074de:	2200      	movs	r2, #0
 80074e0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <tcp_slowtmr+0x54c>
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f4:	6912      	ldr	r2, [r2, #16]
 80074f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074f8:	4610      	mov	r0, r2
 80074fa:	4798      	blx	r3
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007502:	e002      	b.n	800750a <tcp_slowtmr+0x552>
 8007504:	2300      	movs	r3, #0
 8007506:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800750a:	4b14      	ldr	r3, [pc, #80]	; (800755c <tcp_slowtmr+0x5a4>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d000      	beq.n	8007514 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8007512:	e562      	b.n	8006fda <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007514:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007518:	2b00      	cmp	r3, #0
 800751a:	d102      	bne.n	8007522 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800751c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800751e:	f003 fb81 	bl	800ac24 <tcp_output>
  while (pcb != NULL) {
 8007522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007524:	2b00      	cmp	r3, #0
 8007526:	f47f ad5e 	bne.w	8006fe6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800752a:	2300      	movs	r3, #0
 800752c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800752e:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <tcp_slowtmr+0x5a8>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007534:	e069      	b.n	800760a <tcp_slowtmr+0x652>
 8007536:	bf00      	nop
 8007538:	24007ab0 	.word	0x24007ab0
 800753c:	000a4cb8 	.word	0x000a4cb8
 8007540:	10624dd3 	.word	0x10624dd3
 8007544:	000124f8 	.word	0x000124f8
 8007548:	24007abc 	.word	0x24007abc
 800754c:	080101d0 	.word	0x080101d0
 8007550:	08010608 	.word	0x08010608
 8007554:	08010214 	.word	0x08010214
 8007558:	08010634 	.word	0x08010634
 800755c:	24007ac4 	.word	0x24007ac4
 8007560:	24007ac0 	.word	0x24007ac0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007566:	7d1b      	ldrb	r3, [r3, #20]
 8007568:	2b0a      	cmp	r3, #10
 800756a:	d006      	beq.n	800757a <tcp_slowtmr+0x5c2>
 800756c:	4b2b      	ldr	r3, [pc, #172]	; (800761c <tcp_slowtmr+0x664>)
 800756e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007572:	492b      	ldr	r1, [pc, #172]	; (8007620 <tcp_slowtmr+0x668>)
 8007574:	482b      	ldr	r0, [pc, #172]	; (8007624 <tcp_slowtmr+0x66c>)
 8007576:	f007 f9a9 	bl	800e8cc <iprintf>
    pcb_remove = 0;
 800757a:	2300      	movs	r3, #0
 800757c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007580:	4b29      	ldr	r3, [pc, #164]	; (8007628 <tcp_slowtmr+0x670>)
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2bf0      	cmp	r3, #240	; 0xf0
 800758c:	d904      	bls.n	8007598 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800758e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007592:	3301      	adds	r3, #1
 8007594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800759c:	2b00      	cmp	r3, #0
 800759e:	d02f      	beq.n	8007600 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80075a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075a2:	f000 fb2b 	bl	8007bfc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80075a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d010      	beq.n	80075ce <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80075ac:	4b1f      	ldr	r3, [pc, #124]	; (800762c <tcp_slowtmr+0x674>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d106      	bne.n	80075c4 <tcp_slowtmr+0x60c>
 80075b6:	4b19      	ldr	r3, [pc, #100]	; (800761c <tcp_slowtmr+0x664>)
 80075b8:	f240 52af 	movw	r2, #1455	; 0x5af
 80075bc:	491c      	ldr	r1, [pc, #112]	; (8007630 <tcp_slowtmr+0x678>)
 80075be:	4819      	ldr	r0, [pc, #100]	; (8007624 <tcp_slowtmr+0x66c>)
 80075c0:	f007 f984 	bl	800e8cc <iprintf>
        prev->next = pcb->next;
 80075c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	60da      	str	r2, [r3, #12]
 80075cc:	e00f      	b.n	80075ee <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80075ce:	4b17      	ldr	r3, [pc, #92]	; (800762c <tcp_slowtmr+0x674>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d006      	beq.n	80075e6 <tcp_slowtmr+0x62e>
 80075d8:	4b10      	ldr	r3, [pc, #64]	; (800761c <tcp_slowtmr+0x664>)
 80075da:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80075de:	4915      	ldr	r1, [pc, #84]	; (8007634 <tcp_slowtmr+0x67c>)
 80075e0:	4810      	ldr	r0, [pc, #64]	; (8007624 <tcp_slowtmr+0x66c>)
 80075e2:	f007 f973 	bl	800e8cc <iprintf>
        tcp_tw_pcbs = pcb->next;
 80075e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	4a10      	ldr	r2, [pc, #64]	; (800762c <tcp_slowtmr+0x674>)
 80075ec:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80075f8:	69f8      	ldr	r0, [r7, #28]
 80075fa:	f7ff f93f 	bl	800687c <tcp_free>
 80075fe:	e004      	b.n	800760a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007602:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1a9      	bne.n	8007564 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	3730      	adds	r7, #48	; 0x30
 8007616:	46bd      	mov	sp, r7
 8007618:	bdb0      	pop	{r4, r5, r7, pc}
 800761a:	bf00      	nop
 800761c:	080101d0 	.word	0x080101d0
 8007620:	08010660 	.word	0x08010660
 8007624:	08010214 	.word	0x08010214
 8007628:	24007ab0 	.word	0x24007ab0
 800762c:	24007ac0 	.word	0x24007ac0
 8007630:	08010690 	.word	0x08010690
 8007634:	080106b8 	.word	0x080106b8

08007638 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800763e:	4b2d      	ldr	r3, [pc, #180]	; (80076f4 <tcp_fasttmr+0xbc>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	3301      	adds	r3, #1
 8007644:	b2da      	uxtb	r2, r3
 8007646:	4b2b      	ldr	r3, [pc, #172]	; (80076f4 <tcp_fasttmr+0xbc>)
 8007648:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800764a:	4b2b      	ldr	r3, [pc, #172]	; (80076f8 <tcp_fasttmr+0xc0>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007650:	e048      	b.n	80076e4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	7f9a      	ldrb	r2, [r3, #30]
 8007656:	4b27      	ldr	r3, [pc, #156]	; (80076f4 <tcp_fasttmr+0xbc>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d03f      	beq.n	80076de <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800765e:	4b25      	ldr	r3, [pc, #148]	; (80076f4 <tcp_fasttmr+0xbc>)
 8007660:	781a      	ldrb	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	8b5b      	ldrh	r3, [r3, #26]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d010      	beq.n	8007694 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	8b5b      	ldrh	r3, [r3, #26]
 8007676:	f043 0302 	orr.w	r3, r3, #2
 800767a:	b29a      	uxth	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f003 facf 	bl	800ac24 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	8b5b      	ldrh	r3, [r3, #26]
 800768a:	f023 0303 	bic.w	r3, r3, #3
 800768e:	b29a      	uxth	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	8b5b      	ldrh	r3, [r3, #26]
 8007698:	f003 0308 	and.w	r3, r3, #8
 800769c:	2b00      	cmp	r3, #0
 800769e:	d009      	beq.n	80076b4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	8b5b      	ldrh	r3, [r3, #26]
 80076a4:	f023 0308 	bic.w	r3, r3, #8
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7ff fa78 	bl	8006ba4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80076c2:	4b0e      	ldr	r3, [pc, #56]	; (80076fc <tcp_fasttmr+0xc4>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f819 	bl	8007700 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80076ce:	4b0b      	ldr	r3, [pc, #44]	; (80076fc <tcp_fasttmr+0xc4>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d000      	beq.n	80076d8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80076d6:	e7b8      	b.n	800764a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	607b      	str	r3, [r7, #4]
 80076dc:	e002      	b.n	80076e4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1b3      	bne.n	8007652 <tcp_fasttmr+0x1a>
    }
  }
}
 80076ea:	bf00      	nop
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	24007ac6 	.word	0x24007ac6
 80076f8:	24007abc 	.word	0x24007abc
 80076fc:	24007ac4 	.word	0x24007ac4

08007700 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007700:	b590      	push	{r4, r7, lr}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d109      	bne.n	8007722 <tcp_process_refused_data+0x22>
 800770e:	4b37      	ldr	r3, [pc, #220]	; (80077ec <tcp_process_refused_data+0xec>)
 8007710:	f240 6209 	movw	r2, #1545	; 0x609
 8007714:	4936      	ldr	r1, [pc, #216]	; (80077f0 <tcp_process_refused_data+0xf0>)
 8007716:	4837      	ldr	r0, [pc, #220]	; (80077f4 <tcp_process_refused_data+0xf4>)
 8007718:	f007 f8d8 	bl	800e8cc <iprintf>
 800771c:	f06f 030f 	mvn.w	r3, #15
 8007720:	e060      	b.n	80077e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007726:	7b5b      	ldrb	r3, [r3, #13]
 8007728:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800772e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <tcp_process_refused_data+0x58>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6918      	ldr	r0, [r3, #16]
 800774a:	2300      	movs	r3, #0
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	47a0      	blx	r4
 8007752:	4603      	mov	r3, r0
 8007754:	73fb      	strb	r3, [r7, #15]
 8007756:	e007      	b.n	8007768 <tcp_process_refused_data+0x68>
 8007758:	2300      	movs	r3, #0
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	2000      	movs	r0, #0
 8007760:	f000 f8a4 	bl	80078ac <tcp_recv_null>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d12a      	bne.n	80077c6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	f003 0320 	and.w	r3, r3, #32
 8007776:	2b00      	cmp	r3, #0
 8007778:	d033      	beq.n	80077e2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007782:	d005      	beq.n	8007790 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007788:	3301      	adds	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00b      	beq.n	80077b2 <tcp_process_refused_data+0xb2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6918      	ldr	r0, [r3, #16]
 80077a4:	2300      	movs	r3, #0
 80077a6:	2200      	movs	r2, #0
 80077a8:	6879      	ldr	r1, [r7, #4]
 80077aa:	47a0      	blx	r4
 80077ac:	4603      	mov	r3, r0
 80077ae:	73fb      	strb	r3, [r7, #15]
 80077b0:	e001      	b.n	80077b6 <tcp_process_refused_data+0xb6>
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80077b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077ba:	f113 0f0d 	cmn.w	r3, #13
 80077be:	d110      	bne.n	80077e2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80077c0:	f06f 030c 	mvn.w	r3, #12
 80077c4:	e00e      	b.n	80077e4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80077c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077ca:	f113 0f0d 	cmn.w	r3, #13
 80077ce:	d102      	bne.n	80077d6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80077d0:	f06f 030c 	mvn.w	r3, #12
 80077d4:	e006      	b.n	80077e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80077dc:	f06f 0304 	mvn.w	r3, #4
 80077e0:	e000      	b.n	80077e4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd90      	pop	{r4, r7, pc}
 80077ec:	080101d0 	.word	0x080101d0
 80077f0:	080106e0 	.word	0x080106e0
 80077f4:	08010214 	.word	0x08010214

080077f8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007800:	e007      	b.n	8007812 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f80a 	bl	8007822 <tcp_seg_free>
    seg = next;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1f4      	bne.n	8007802 <tcp_segs_free+0xa>
  }
}
 8007818:	bf00      	nop
 800781a:	bf00      	nop
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00c      	beq.n	800784a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d004      	beq.n	8007842 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	4618      	mov	r0, r3
 800783e:	f7fe fd7d 	bl	800633c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007842:	6879      	ldr	r1, [r7, #4]
 8007844:	2003      	movs	r0, #3
 8007846:	f7fd ff03 	bl	8005650 <memp_free>
  }
}
 800784a:	bf00      	nop
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
	...

08007854 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <tcp_seg_copy+0x1c>
 8007862:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <tcp_seg_copy+0x4c>)
 8007864:	f240 6282 	movw	r2, #1666	; 0x682
 8007868:	490e      	ldr	r1, [pc, #56]	; (80078a4 <tcp_seg_copy+0x50>)
 800786a:	480f      	ldr	r0, [pc, #60]	; (80078a8 <tcp_seg_copy+0x54>)
 800786c:	f007 f82e 	bl	800e8cc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007870:	2003      	movs	r0, #3
 8007872:	f7fd fe7d 	bl	8005570 <memp_malloc>
 8007876:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <tcp_seg_copy+0x2e>
    return NULL;
 800787e:	2300      	movs	r3, #0
 8007880:	e00a      	b.n	8007898 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007882:	2210      	movs	r2, #16
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f007 f8fa 	bl	800ea80 <memcpy>
  pbuf_ref(cseg->p);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	4618      	mov	r0, r3
 8007892:	f7fe fdf3 	bl	800647c <pbuf_ref>
  return cseg;
 8007896:	68fb      	ldr	r3, [r7, #12]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	080101d0 	.word	0x080101d0
 80078a4:	08010724 	.word	0x08010724
 80078a8:	08010214 	.word	0x08010214

080078ac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d109      	bne.n	80078d4 <tcp_recv_null+0x28>
 80078c0:	4b12      	ldr	r3, [pc, #72]	; (800790c <tcp_recv_null+0x60>)
 80078c2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80078c6:	4912      	ldr	r1, [pc, #72]	; (8007910 <tcp_recv_null+0x64>)
 80078c8:	4812      	ldr	r0, [pc, #72]	; (8007914 <tcp_recv_null+0x68>)
 80078ca:	f006 ffff 	bl	800e8cc <iprintf>
 80078ce:	f06f 030f 	mvn.w	r3, #15
 80078d2:	e016      	b.n	8007902 <tcp_recv_null+0x56>

  if (p != NULL) {
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d009      	beq.n	80078ee <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	891b      	ldrh	r3, [r3, #8]
 80078de:	4619      	mov	r1, r3
 80078e0:	68b8      	ldr	r0, [r7, #8]
 80078e2:	f7ff fb19 	bl	8006f18 <tcp_recved>
    pbuf_free(p);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fe fd28 	bl	800633c <pbuf_free>
 80078ec:	e008      	b.n	8007900 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80078ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d104      	bne.n	8007900 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80078f6:	68b8      	ldr	r0, [r7, #8]
 80078f8:	f7ff f9be 	bl	8006c78 <tcp_close>
 80078fc:	4603      	mov	r3, r0
 80078fe:	e000      	b.n	8007902 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	080101d0 	.word	0x080101d0
 8007910:	08010740 	.word	0x08010740
 8007914:	08010214 	.word	0x08010214

08007918 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007926:	2b00      	cmp	r3, #0
 8007928:	db01      	blt.n	800792e <tcp_kill_prio+0x16>
 800792a:	79fb      	ldrb	r3, [r7, #7]
 800792c:	e000      	b.n	8007930 <tcp_kill_prio+0x18>
 800792e:	237f      	movs	r3, #127	; 0x7f
 8007930:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007932:	7afb      	ldrb	r3, [r7, #11]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d034      	beq.n	80079a2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007938:	7afb      	ldrb	r3, [r7, #11]
 800793a:	3b01      	subs	r3, #1
 800793c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007942:	2300      	movs	r3, #0
 8007944:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007946:	4b19      	ldr	r3, [pc, #100]	; (80079ac <tcp_kill_prio+0x94>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	617b      	str	r3, [r7, #20]
 800794c:	e01f      	b.n	800798e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	7d5b      	ldrb	r3, [r3, #21]
 8007952:	7afa      	ldrb	r2, [r7, #11]
 8007954:	429a      	cmp	r2, r3
 8007956:	d80c      	bhi.n	8007972 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800795c:	7afa      	ldrb	r2, [r7, #11]
 800795e:	429a      	cmp	r2, r3
 8007960:	d112      	bne.n	8007988 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007962:	4b13      	ldr	r3, [pc, #76]	; (80079b0 <tcp_kill_prio+0x98>)
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	429a      	cmp	r2, r3
 8007970:	d80a      	bhi.n	8007988 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007972:	4b0f      	ldr	r3, [pc, #60]	; (80079b0 <tcp_kill_prio+0x98>)
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	7d5b      	ldrb	r3, [r3, #21]
 8007986:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1dc      	bne.n	800794e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d004      	beq.n	80079a4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800799a:	6938      	ldr	r0, [r7, #16]
 800799c:	f7ff fa56 	bl	8006e4c <tcp_abort>
 80079a0:	e000      	b.n	80079a4 <tcp_kill_prio+0x8c>
    return;
 80079a2:	bf00      	nop
  }
}
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	24007abc 	.word	0x24007abc
 80079b0:	24007ab0 	.word	0x24007ab0

080079b4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	4603      	mov	r3, r0
 80079bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d009      	beq.n	80079d8 <tcp_kill_state+0x24>
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	2b09      	cmp	r3, #9
 80079c8:	d006      	beq.n	80079d8 <tcp_kill_state+0x24>
 80079ca:	4b1a      	ldr	r3, [pc, #104]	; (8007a34 <tcp_kill_state+0x80>)
 80079cc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80079d0:	4919      	ldr	r1, [pc, #100]	; (8007a38 <tcp_kill_state+0x84>)
 80079d2:	481a      	ldr	r0, [pc, #104]	; (8007a3c <tcp_kill_state+0x88>)
 80079d4:	f006 ff7a 	bl	800e8cc <iprintf>

  inactivity = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80079dc:	2300      	movs	r3, #0
 80079de:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80079e0:	4b17      	ldr	r3, [pc, #92]	; (8007a40 <tcp_kill_state+0x8c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	617b      	str	r3, [r7, #20]
 80079e6:	e017      	b.n	8007a18 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	7d1b      	ldrb	r3, [r3, #20]
 80079ec:	79fa      	ldrb	r2, [r7, #7]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d10f      	bne.n	8007a12 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80079f2:	4b14      	ldr	r3, [pc, #80]	; (8007a44 <tcp_kill_state+0x90>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d807      	bhi.n	8007a12 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007a02:	4b10      	ldr	r3, [pc, #64]	; (8007a44 <tcp_kill_state+0x90>)
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e4      	bne.n	80079e8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007a24:	2100      	movs	r1, #0
 8007a26:	6938      	ldr	r0, [r7, #16]
 8007a28:	f7ff f952 	bl	8006cd0 <tcp_abandon>
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	080101d0 	.word	0x080101d0
 8007a38:	0801075c 	.word	0x0801075c
 8007a3c:	08010214 	.word	0x08010214
 8007a40:	24007abc 	.word	0x24007abc
 8007a44:	24007ab0 	.word	0x24007ab0

08007a48 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a56:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <tcp_kill_timewait+0x58>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]
 8007a5c:	e012      	b.n	8007a84 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007a5e:	4b11      	ldr	r3, [pc, #68]	; (8007aa4 <tcp_kill_timewait+0x5c>)
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d807      	bhi.n	8007a7e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007a6e:	4b0d      	ldr	r3, [pc, #52]	; (8007aa4 <tcp_kill_timewait+0x5c>)
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e9      	bne.n	8007a5e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007a90:	68b8      	ldr	r0, [r7, #8]
 8007a92:	f7ff f9db 	bl	8006e4c <tcp_abort>
  }
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	24007ac0 	.word	0x24007ac0
 8007aa4:	24007ab0 	.word	0x24007ab0

08007aa8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007aae:	4b10      	ldr	r3, [pc, #64]	; (8007af0 <tcp_handle_closepend+0x48>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007ab4:	e014      	b.n	8007ae0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	8b5b      	ldrh	r3, [r3, #26]
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d009      	beq.n	8007adc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	8b5b      	ldrh	r3, [r3, #26]
 8007acc:	f023 0308 	bic.w	r3, r3, #8
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff f864 	bl	8006ba4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1e7      	bne.n	8007ab6 <tcp_handle_closepend+0xe>
  }
}
 8007ae6:	bf00      	nop
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	24007abc 	.word	0x24007abc

08007af4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007afe:	2001      	movs	r0, #1
 8007b00:	f7fd fd36 	bl	8005570 <memp_malloc>
 8007b04:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d126      	bne.n	8007b5a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007b0c:	f7ff ffcc 	bl	8007aa8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007b10:	f7ff ff9a 	bl	8007a48 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b14:	2001      	movs	r0, #1
 8007b16:	f7fd fd2b 	bl	8005570 <memp_malloc>
 8007b1a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d11b      	bne.n	8007b5a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007b22:	2009      	movs	r0, #9
 8007b24:	f7ff ff46 	bl	80079b4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b28:	2001      	movs	r0, #1
 8007b2a:	f7fd fd21 	bl	8005570 <memp_malloc>
 8007b2e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d111      	bne.n	8007b5a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007b36:	2008      	movs	r0, #8
 8007b38:	f7ff ff3c 	bl	80079b4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	f7fd fd17 	bl	8005570 <memp_malloc>
 8007b42:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d107      	bne.n	8007b5a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7ff fee3 	bl	8007918 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b52:	2001      	movs	r0, #1
 8007b54:	f7fd fd0c 	bl	8005570 <memp_malloc>
 8007b58:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d03f      	beq.n	8007be0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007b60:	229c      	movs	r2, #156	; 0x9c
 8007b62:	2100      	movs	r1, #0
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f006 ff16 	bl	800e996 <memset>
    pcb->prio = prio;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	79fa      	ldrb	r2, [r7, #7]
 8007b6e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007b76:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007b80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	22ff      	movs	r2, #255	; 0xff
 8007b8e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007b96:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2206      	movs	r2, #6
 8007b9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2206      	movs	r2, #6
 8007ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bac:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007bb6:	4b0d      	ldr	r3, [pc, #52]	; (8007bec <tcp_alloc+0xf8>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007bbe:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <tcp_alloc+0xfc>)
 8007bc0:	781a      	ldrb	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007bcc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4a08      	ldr	r2, [pc, #32]	; (8007bf4 <tcp_alloc+0x100>)
 8007bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4a07      	ldr	r2, [pc, #28]	; (8007bf8 <tcp_alloc+0x104>)
 8007bdc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007be0:	68fb      	ldr	r3, [r7, #12]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	24007ab0 	.word	0x24007ab0
 8007bf0:	24007ac6 	.word	0x24007ac6
 8007bf4:	080078ad 	.word	0x080078ad
 8007bf8:	006ddd00 	.word	0x006ddd00

08007bfc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d107      	bne.n	8007c1a <tcp_pcb_purge+0x1e>
 8007c0a:	4b21      	ldr	r3, [pc, #132]	; (8007c90 <tcp_pcb_purge+0x94>)
 8007c0c:	f640 0251 	movw	r2, #2129	; 0x851
 8007c10:	4920      	ldr	r1, [pc, #128]	; (8007c94 <tcp_pcb_purge+0x98>)
 8007c12:	4821      	ldr	r0, [pc, #132]	; (8007c98 <tcp_pcb_purge+0x9c>)
 8007c14:	f006 fe5a 	bl	800e8cc <iprintf>
 8007c18:	e037      	b.n	8007c8a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	7d1b      	ldrb	r3, [r3, #20]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d033      	beq.n	8007c8a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007c26:	2b0a      	cmp	r3, #10
 8007c28:	d02f      	beq.n	8007c8a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d02b      	beq.n	8007c8a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d007      	beq.n	8007c4a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fe fb7c 	bl	800633c <pbuf_free>
      pcb->refused_data = NULL;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f986 	bl	8007f64 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c5e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7ff fdc7 	bl	80077f8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7ff fdc2 	bl	80077f8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	66da      	str	r2, [r3, #108]	; 0x6c
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	080101d0 	.word	0x080101d0
 8007c94:	0801081c 	.word	0x0801081c
 8007c98:	08010214 	.word	0x08010214

08007c9c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d106      	bne.n	8007cba <tcp_pcb_remove+0x1e>
 8007cac:	4b3e      	ldr	r3, [pc, #248]	; (8007da8 <tcp_pcb_remove+0x10c>)
 8007cae:	f640 0283 	movw	r2, #2179	; 0x883
 8007cb2:	493e      	ldr	r1, [pc, #248]	; (8007dac <tcp_pcb_remove+0x110>)
 8007cb4:	483e      	ldr	r0, [pc, #248]	; (8007db0 <tcp_pcb_remove+0x114>)
 8007cb6:	f006 fe09 	bl	800e8cc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d106      	bne.n	8007cce <tcp_pcb_remove+0x32>
 8007cc0:	4b39      	ldr	r3, [pc, #228]	; (8007da8 <tcp_pcb_remove+0x10c>)
 8007cc2:	f640 0284 	movw	r2, #2180	; 0x884
 8007cc6:	493b      	ldr	r1, [pc, #236]	; (8007db4 <tcp_pcb_remove+0x118>)
 8007cc8:	4839      	ldr	r0, [pc, #228]	; (8007db0 <tcp_pcb_remove+0x114>)
 8007cca:	f006 fdff 	bl	800e8cc <iprintf>

  TCP_RMV(pcblist, pcb);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d105      	bne.n	8007ce4 <tcp_pcb_remove+0x48>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	e013      	b.n	8007d0c <tcp_pcb_remove+0x70>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	e00c      	b.n	8007d06 <tcp_pcb_remove+0x6a>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d104      	bne.n	8007d00 <tcp_pcb_remove+0x64>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	60da      	str	r2, [r3, #12]
 8007cfe:	e005      	b.n	8007d0c <tcp_pcb_remove+0x70>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1ef      	bne.n	8007cec <tcp_pcb_remove+0x50>
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007d12:	6838      	ldr	r0, [r7, #0]
 8007d14:	f7ff ff72 	bl	8007bfc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	7d1b      	ldrb	r3, [r3, #20]
 8007d1c:	2b0a      	cmp	r3, #10
 8007d1e:	d013      	beq.n	8007d48 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d00f      	beq.n	8007d48 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	8b5b      	ldrh	r3, [r3, #26]
 8007d2c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d009      	beq.n	8007d48 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	8b5b      	ldrh	r3, [r3, #26]
 8007d38:	f043 0302 	orr.w	r3, r3, #2
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007d42:	6838      	ldr	r0, [r7, #0]
 8007d44:	f002 ff6e 	bl	800ac24 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	7d1b      	ldrb	r3, [r3, #20]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d020      	beq.n	8007d92 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d006      	beq.n	8007d66 <tcp_pcb_remove+0xca>
 8007d58:	4b13      	ldr	r3, [pc, #76]	; (8007da8 <tcp_pcb_remove+0x10c>)
 8007d5a:	f640 0293 	movw	r2, #2195	; 0x893
 8007d5e:	4916      	ldr	r1, [pc, #88]	; (8007db8 <tcp_pcb_remove+0x11c>)
 8007d60:	4813      	ldr	r0, [pc, #76]	; (8007db0 <tcp_pcb_remove+0x114>)
 8007d62:	f006 fdb3 	bl	800e8cc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d006      	beq.n	8007d7c <tcp_pcb_remove+0xe0>
 8007d6e:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <tcp_pcb_remove+0x10c>)
 8007d70:	f640 0294 	movw	r2, #2196	; 0x894
 8007d74:	4911      	ldr	r1, [pc, #68]	; (8007dbc <tcp_pcb_remove+0x120>)
 8007d76:	480e      	ldr	r0, [pc, #56]	; (8007db0 <tcp_pcb_remove+0x114>)
 8007d78:	f006 fda8 	bl	800e8cc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d006      	beq.n	8007d92 <tcp_pcb_remove+0xf6>
 8007d84:	4b08      	ldr	r3, [pc, #32]	; (8007da8 <tcp_pcb_remove+0x10c>)
 8007d86:	f640 0296 	movw	r2, #2198	; 0x896
 8007d8a:	490d      	ldr	r1, [pc, #52]	; (8007dc0 <tcp_pcb_remove+0x124>)
 8007d8c:	4808      	ldr	r0, [pc, #32]	; (8007db0 <tcp_pcb_remove+0x114>)
 8007d8e:	f006 fd9d 	bl	800e8cc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2200      	movs	r2, #0
 8007d96:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007d9e:	bf00      	nop
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	080101d0 	.word	0x080101d0
 8007dac:	08010838 	.word	0x08010838
 8007db0:	08010214 	.word	0x08010214
 8007db4:	08010854 	.word	0x08010854
 8007db8:	08010874 	.word	0x08010874
 8007dbc:	0801088c 	.word	0x0801088c
 8007dc0:	080108a8 	.word	0x080108a8

08007dc4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d106      	bne.n	8007de0 <tcp_next_iss+0x1c>
 8007dd2:	4b0a      	ldr	r3, [pc, #40]	; (8007dfc <tcp_next_iss+0x38>)
 8007dd4:	f640 02af 	movw	r2, #2223	; 0x8af
 8007dd8:	4909      	ldr	r1, [pc, #36]	; (8007e00 <tcp_next_iss+0x3c>)
 8007dda:	480a      	ldr	r0, [pc, #40]	; (8007e04 <tcp_next_iss+0x40>)
 8007ddc:	f006 fd76 	bl	800e8cc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007de0:	4b09      	ldr	r3, [pc, #36]	; (8007e08 <tcp_next_iss+0x44>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	4b09      	ldr	r3, [pc, #36]	; (8007e0c <tcp_next_iss+0x48>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4413      	add	r3, r2
 8007dea:	4a07      	ldr	r2, [pc, #28]	; (8007e08 <tcp_next_iss+0x44>)
 8007dec:	6013      	str	r3, [r2, #0]
  return iss;
 8007dee:	4b06      	ldr	r3, [pc, #24]	; (8007e08 <tcp_next_iss+0x44>)
 8007df0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	080101d0 	.word	0x080101d0
 8007e00:	080108c0 	.word	0x080108c0
 8007e04:	08010214 	.word	0x08010214
 8007e08:	24000028 	.word	0x24000028
 8007e0c:	24007ab0 	.word	0x24007ab0

08007e10 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
 8007e1c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d106      	bne.n	8007e32 <tcp_eff_send_mss_netif+0x22>
 8007e24:	4b14      	ldr	r3, [pc, #80]	; (8007e78 <tcp_eff_send_mss_netif+0x68>)
 8007e26:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007e2a:	4914      	ldr	r1, [pc, #80]	; (8007e7c <tcp_eff_send_mss_netif+0x6c>)
 8007e2c:	4814      	ldr	r0, [pc, #80]	; (8007e80 <tcp_eff_send_mss_netif+0x70>)
 8007e2e:	f006 fd4d 	bl	800e8cc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007e38:	89fb      	ldrh	r3, [r7, #14]
 8007e3a:	e019      	b.n	8007e70 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007e40:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007e42:	8afb      	ldrh	r3, [r7, #22]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d012      	beq.n	8007e6e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007e48:	2328      	movs	r3, #40	; 0x28
 8007e4a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007e4c:	8afa      	ldrh	r2, [r7, #22]
 8007e4e:	8abb      	ldrh	r3, [r7, #20]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d904      	bls.n	8007e5e <tcp_eff_send_mss_netif+0x4e>
 8007e54:	8afa      	ldrh	r2, [r7, #22]
 8007e56:	8abb      	ldrh	r3, [r7, #20]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	e000      	b.n	8007e60 <tcp_eff_send_mss_netif+0x50>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007e62:	8a7a      	ldrh	r2, [r7, #18]
 8007e64:	89fb      	ldrh	r3, [r7, #14]
 8007e66:	4293      	cmp	r3, r2
 8007e68:	bf28      	it	cs
 8007e6a:	4613      	movcs	r3, r2
 8007e6c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007e6e:	89fb      	ldrh	r3, [r7, #14]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3718      	adds	r7, #24
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	080101d0 	.word	0x080101d0
 8007e7c:	080108dc 	.word	0x080108dc
 8007e80:	08010214 	.word	0x08010214

08007e84 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d119      	bne.n	8007ecc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007e98:	4b10      	ldr	r3, [pc, #64]	; (8007edc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007e9a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007e9e:	4910      	ldr	r1, [pc, #64]	; (8007ee0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007ea0:	4810      	ldr	r0, [pc, #64]	; (8007ee4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007ea2:	f006 fd13 	bl	800e8cc <iprintf>

  while (pcb != NULL) {
 8007ea6:	e011      	b.n	8007ecc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d108      	bne.n	8007ec6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7fe ffc6 	bl	8006e4c <tcp_abort>
      pcb = next;
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	e002      	b.n	8007ecc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1ea      	bne.n	8007ea8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	080101d0 	.word	0x080101d0
 8007ee0:	08010904 	.word	0x08010904
 8007ee4:	08010214 	.word	0x08010214

08007ee8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d02a      	beq.n	8007f4e <tcp_netif_ip_addr_changed+0x66>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d026      	beq.n	8007f4e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007f00:	4b15      	ldr	r3, [pc, #84]	; (8007f58 <tcp_netif_ip_addr_changed+0x70>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7ff ffbc 	bl	8007e84 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007f0c:	4b13      	ldr	r3, [pc, #76]	; (8007f5c <tcp_netif_ip_addr_changed+0x74>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7ff ffb6 	bl	8007e84 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d017      	beq.n	8007f4e <tcp_netif_ip_addr_changed+0x66>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d013      	beq.n	8007f4e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007f26:	4b0e      	ldr	r3, [pc, #56]	; (8007f60 <tcp_netif_ip_addr_changed+0x78>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	e00c      	b.n	8007f48 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d103      	bne.n	8007f42 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1ef      	bne.n	8007f2e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007f4e:	bf00      	nop
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	24007abc 	.word	0x24007abc
 8007f5c:	24007ab4 	.word	0x24007ab4
 8007f60:	24007ab8 	.word	0x24007ab8

08007f64 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d007      	beq.n	8007f84 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7ff fc3d 	bl	80077f8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007f84:	bf00      	nop
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007f8c:	b590      	push	{r4, r7, lr}
 8007f8e:	b08d      	sub	sp, #52	; 0x34
 8007f90:	af04      	add	r7, sp, #16
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d105      	bne.n	8007fa8 <tcp_input+0x1c>
 8007f9c:	4b9b      	ldr	r3, [pc, #620]	; (800820c <tcp_input+0x280>)
 8007f9e:	2283      	movs	r2, #131	; 0x83
 8007fa0:	499b      	ldr	r1, [pc, #620]	; (8008210 <tcp_input+0x284>)
 8007fa2:	489c      	ldr	r0, [pc, #624]	; (8008214 <tcp_input+0x288>)
 8007fa4:	f006 fc92 	bl	800e8cc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	4a9a      	ldr	r2, [pc, #616]	; (8008218 <tcp_input+0x28c>)
 8007fae:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	895b      	ldrh	r3, [r3, #10]
 8007fb4:	2b13      	cmp	r3, #19
 8007fb6:	f240 83d1 	bls.w	800875c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007fba:	4b98      	ldr	r3, [pc, #608]	; (800821c <tcp_input+0x290>)
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	4a97      	ldr	r2, [pc, #604]	; (800821c <tcp_input+0x290>)
 8007fc0:	6812      	ldr	r2, [r2, #0]
 8007fc2:	4611      	mov	r1, r2
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f005 fc3d 	bl	800d844 <ip4_addr_isbroadcast_u32>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f040 83c7 	bne.w	8008760 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007fd2:	4b92      	ldr	r3, [pc, #584]	; (800821c <tcp_input+0x290>)
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007fda:	2be0      	cmp	r3, #224	; 0xe0
 8007fdc:	f000 83c0 	beq.w	8008760 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007fe0:	4b8d      	ldr	r3, [pc, #564]	; (8008218 <tcp_input+0x28c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	899b      	ldrh	r3, [r3, #12]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fc fd91 	bl	8004b10 <lwip_htons>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	0b1b      	lsrs	r3, r3, #12
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007ffa:	7cbb      	ldrb	r3, [r7, #18]
 8007ffc:	2b13      	cmp	r3, #19
 8007ffe:	f240 83b1 	bls.w	8008764 <tcp_input+0x7d8>
 8008002:	7cbb      	ldrb	r3, [r7, #18]
 8008004:	b29a      	uxth	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	891b      	ldrh	r3, [r3, #8]
 800800a:	429a      	cmp	r2, r3
 800800c:	f200 83aa 	bhi.w	8008764 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008010:	7cbb      	ldrb	r3, [r7, #18]
 8008012:	b29b      	uxth	r3, r3
 8008014:	3b14      	subs	r3, #20
 8008016:	b29a      	uxth	r2, r3
 8008018:	4b81      	ldr	r3, [pc, #516]	; (8008220 <tcp_input+0x294>)
 800801a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800801c:	4b81      	ldr	r3, [pc, #516]	; (8008224 <tcp_input+0x298>)
 800801e:	2200      	movs	r2, #0
 8008020:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	895a      	ldrh	r2, [r3, #10]
 8008026:	7cbb      	ldrb	r3, [r7, #18]
 8008028:	b29b      	uxth	r3, r3
 800802a:	429a      	cmp	r2, r3
 800802c:	d309      	bcc.n	8008042 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800802e:	4b7c      	ldr	r3, [pc, #496]	; (8008220 <tcp_input+0x294>)
 8008030:	881a      	ldrh	r2, [r3, #0]
 8008032:	4b7d      	ldr	r3, [pc, #500]	; (8008228 <tcp_input+0x29c>)
 8008034:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008036:	7cbb      	ldrb	r3, [r7, #18]
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7fe f8f8 	bl	8006230 <pbuf_remove_header>
 8008040:	e04e      	b.n	80080e0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d105      	bne.n	8008056 <tcp_input+0xca>
 800804a:	4b70      	ldr	r3, [pc, #448]	; (800820c <tcp_input+0x280>)
 800804c:	22c2      	movs	r2, #194	; 0xc2
 800804e:	4977      	ldr	r1, [pc, #476]	; (800822c <tcp_input+0x2a0>)
 8008050:	4870      	ldr	r0, [pc, #448]	; (8008214 <tcp_input+0x288>)
 8008052:	f006 fc3b 	bl	800e8cc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008056:	2114      	movs	r1, #20
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7fe f8e9 	bl	8006230 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	895a      	ldrh	r2, [r3, #10]
 8008062:	4b71      	ldr	r3, [pc, #452]	; (8008228 <tcp_input+0x29c>)
 8008064:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008066:	4b6e      	ldr	r3, [pc, #440]	; (8008220 <tcp_input+0x294>)
 8008068:	881a      	ldrh	r2, [r3, #0]
 800806a:	4b6f      	ldr	r3, [pc, #444]	; (8008228 <tcp_input+0x29c>)
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008072:	4b6d      	ldr	r3, [pc, #436]	; (8008228 <tcp_input+0x29c>)
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7fe f8d9 	bl	8006230 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	895b      	ldrh	r3, [r3, #10]
 8008084:	8a3a      	ldrh	r2, [r7, #16]
 8008086:	429a      	cmp	r2, r3
 8008088:	f200 836e 	bhi.w	8008768 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	4a64      	ldr	r2, [pc, #400]	; (8008224 <tcp_input+0x298>)
 8008094:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	8a3a      	ldrh	r2, [r7, #16]
 800809c:	4611      	mov	r1, r2
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fe f8c6 	bl	8006230 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	891a      	ldrh	r2, [r3, #8]
 80080a8:	8a3b      	ldrh	r3, [r7, #16]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	895b      	ldrh	r3, [r3, #10]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d005      	beq.n	80080c6 <tcp_input+0x13a>
 80080ba:	4b54      	ldr	r3, [pc, #336]	; (800820c <tcp_input+0x280>)
 80080bc:	22df      	movs	r2, #223	; 0xdf
 80080be:	495c      	ldr	r1, [pc, #368]	; (8008230 <tcp_input+0x2a4>)
 80080c0:	4854      	ldr	r0, [pc, #336]	; (8008214 <tcp_input+0x288>)
 80080c2:	f006 fc03 	bl	800e8cc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	891a      	ldrh	r2, [r3, #8]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	891b      	ldrh	r3, [r3, #8]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d005      	beq.n	80080e0 <tcp_input+0x154>
 80080d4:	4b4d      	ldr	r3, [pc, #308]	; (800820c <tcp_input+0x280>)
 80080d6:	22e0      	movs	r2, #224	; 0xe0
 80080d8:	4956      	ldr	r1, [pc, #344]	; (8008234 <tcp_input+0x2a8>)
 80080da:	484e      	ldr	r0, [pc, #312]	; (8008214 <tcp_input+0x288>)
 80080dc:	f006 fbf6 	bl	800e8cc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80080e0:	4b4d      	ldr	r3, [pc, #308]	; (8008218 <tcp_input+0x28c>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	4a4b      	ldr	r2, [pc, #300]	; (8008218 <tcp_input+0x28c>)
 80080ea:	6814      	ldr	r4, [r2, #0]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fc fd0f 	bl	8004b10 <lwip_htons>
 80080f2:	4603      	mov	r3, r0
 80080f4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80080f6:	4b48      	ldr	r3, [pc, #288]	; (8008218 <tcp_input+0x28c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	885b      	ldrh	r3, [r3, #2]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	4a46      	ldr	r2, [pc, #280]	; (8008218 <tcp_input+0x28c>)
 8008100:	6814      	ldr	r4, [r2, #0]
 8008102:	4618      	mov	r0, r3
 8008104:	f7fc fd04 	bl	8004b10 <lwip_htons>
 8008108:	4603      	mov	r3, r0
 800810a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800810c:	4b42      	ldr	r3, [pc, #264]	; (8008218 <tcp_input+0x28c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	4a41      	ldr	r2, [pc, #260]	; (8008218 <tcp_input+0x28c>)
 8008114:	6814      	ldr	r4, [r2, #0]
 8008116:	4618      	mov	r0, r3
 8008118:	f7fc fd0f 	bl	8004b3a <lwip_htonl>
 800811c:	4603      	mov	r3, r0
 800811e:	6063      	str	r3, [r4, #4]
 8008120:	6863      	ldr	r3, [r4, #4]
 8008122:	4a45      	ldr	r2, [pc, #276]	; (8008238 <tcp_input+0x2ac>)
 8008124:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008126:	4b3c      	ldr	r3, [pc, #240]	; (8008218 <tcp_input+0x28c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	4a3a      	ldr	r2, [pc, #232]	; (8008218 <tcp_input+0x28c>)
 800812e:	6814      	ldr	r4, [r2, #0]
 8008130:	4618      	mov	r0, r3
 8008132:	f7fc fd02 	bl	8004b3a <lwip_htonl>
 8008136:	4603      	mov	r3, r0
 8008138:	60a3      	str	r3, [r4, #8]
 800813a:	68a3      	ldr	r3, [r4, #8]
 800813c:	4a3f      	ldr	r2, [pc, #252]	; (800823c <tcp_input+0x2b0>)
 800813e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008140:	4b35      	ldr	r3, [pc, #212]	; (8008218 <tcp_input+0x28c>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	89db      	ldrh	r3, [r3, #14]
 8008146:	b29b      	uxth	r3, r3
 8008148:	4a33      	ldr	r2, [pc, #204]	; (8008218 <tcp_input+0x28c>)
 800814a:	6814      	ldr	r4, [r2, #0]
 800814c:	4618      	mov	r0, r3
 800814e:	f7fc fcdf 	bl	8004b10 <lwip_htons>
 8008152:	4603      	mov	r3, r0
 8008154:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008156:	4b30      	ldr	r3, [pc, #192]	; (8008218 <tcp_input+0x28c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	899b      	ldrh	r3, [r3, #12]
 800815c:	b29b      	uxth	r3, r3
 800815e:	4618      	mov	r0, r3
 8008160:	f7fc fcd6 	bl	8004b10 <lwip_htons>
 8008164:	4603      	mov	r3, r0
 8008166:	b2db      	uxtb	r3, r3
 8008168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800816c:	b2da      	uxtb	r2, r3
 800816e:	4b34      	ldr	r3, [pc, #208]	; (8008240 <tcp_input+0x2b4>)
 8008170:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	891a      	ldrh	r2, [r3, #8]
 8008176:	4b33      	ldr	r3, [pc, #204]	; (8008244 <tcp_input+0x2b8>)
 8008178:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800817a:	4b31      	ldr	r3, [pc, #196]	; (8008240 <tcp_input+0x2b4>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	f003 0303 	and.w	r3, r3, #3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00c      	beq.n	80081a0 <tcp_input+0x214>
    tcplen++;
 8008186:	4b2f      	ldr	r3, [pc, #188]	; (8008244 <tcp_input+0x2b8>)
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	3301      	adds	r3, #1
 800818c:	b29a      	uxth	r2, r3
 800818e:	4b2d      	ldr	r3, [pc, #180]	; (8008244 <tcp_input+0x2b8>)
 8008190:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	891a      	ldrh	r2, [r3, #8]
 8008196:	4b2b      	ldr	r3, [pc, #172]	; (8008244 <tcp_input+0x2b8>)
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	429a      	cmp	r2, r3
 800819c:	f200 82e6 	bhi.w	800876c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80081a0:	2300      	movs	r3, #0
 80081a2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081a4:	4b28      	ldr	r3, [pc, #160]	; (8008248 <tcp_input+0x2bc>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	61fb      	str	r3, [r7, #28]
 80081aa:	e09d      	b.n	80082e8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	7d1b      	ldrb	r3, [r3, #20]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d105      	bne.n	80081c0 <tcp_input+0x234>
 80081b4:	4b15      	ldr	r3, [pc, #84]	; (800820c <tcp_input+0x280>)
 80081b6:	22fb      	movs	r2, #251	; 0xfb
 80081b8:	4924      	ldr	r1, [pc, #144]	; (800824c <tcp_input+0x2c0>)
 80081ba:	4816      	ldr	r0, [pc, #88]	; (8008214 <tcp_input+0x288>)
 80081bc:	f006 fb86 	bl	800e8cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	7d1b      	ldrb	r3, [r3, #20]
 80081c4:	2b0a      	cmp	r3, #10
 80081c6:	d105      	bne.n	80081d4 <tcp_input+0x248>
 80081c8:	4b10      	ldr	r3, [pc, #64]	; (800820c <tcp_input+0x280>)
 80081ca:	22fc      	movs	r2, #252	; 0xfc
 80081cc:	4920      	ldr	r1, [pc, #128]	; (8008250 <tcp_input+0x2c4>)
 80081ce:	4811      	ldr	r0, [pc, #68]	; (8008214 <tcp_input+0x288>)
 80081d0:	f006 fb7c 	bl	800e8cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	7d1b      	ldrb	r3, [r3, #20]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d105      	bne.n	80081e8 <tcp_input+0x25c>
 80081dc:	4b0b      	ldr	r3, [pc, #44]	; (800820c <tcp_input+0x280>)
 80081de:	22fd      	movs	r2, #253	; 0xfd
 80081e0:	491c      	ldr	r1, [pc, #112]	; (8008254 <tcp_input+0x2c8>)
 80081e2:	480c      	ldr	r0, [pc, #48]	; (8008214 <tcp_input+0x288>)
 80081e4:	f006 fb72 	bl	800e8cc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	7a1b      	ldrb	r3, [r3, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d033      	beq.n	8008258 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	7a1a      	ldrb	r2, [r3, #8]
 80081f4:	4b09      	ldr	r3, [pc, #36]	; (800821c <tcp_input+0x290>)
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081fc:	3301      	adds	r3, #1
 80081fe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008200:	429a      	cmp	r2, r3
 8008202:	d029      	beq.n	8008258 <tcp_input+0x2cc>
      prev = pcb;
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	61bb      	str	r3, [r7, #24]
      continue;
 8008208:	e06b      	b.n	80082e2 <tcp_input+0x356>
 800820a:	bf00      	nop
 800820c:	08010938 	.word	0x08010938
 8008210:	0801096c 	.word	0x0801096c
 8008214:	08010984 	.word	0x08010984
 8008218:	24007ad8 	.word	0x24007ad8
 800821c:	24004b94 	.word	0x24004b94
 8008220:	24007adc 	.word	0x24007adc
 8008224:	24007ae0 	.word	0x24007ae0
 8008228:	24007ade 	.word	0x24007ade
 800822c:	080109ac 	.word	0x080109ac
 8008230:	080109bc 	.word	0x080109bc
 8008234:	080109c8 	.word	0x080109c8
 8008238:	24007ae8 	.word	0x24007ae8
 800823c:	24007aec 	.word	0x24007aec
 8008240:	24007af4 	.word	0x24007af4
 8008244:	24007af2 	.word	0x24007af2
 8008248:	24007abc 	.word	0x24007abc
 800824c:	080109e8 	.word	0x080109e8
 8008250:	08010a10 	.word	0x08010a10
 8008254:	08010a3c 	.word	0x08010a3c
    }

    if (pcb->remote_port == tcphdr->src &&
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	8b1a      	ldrh	r2, [r3, #24]
 800825c:	4b72      	ldr	r3, [pc, #456]	; (8008428 <tcp_input+0x49c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	b29b      	uxth	r3, r3
 8008264:	429a      	cmp	r2, r3
 8008266:	d13a      	bne.n	80082de <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	8ada      	ldrh	r2, [r3, #22]
 800826c:	4b6e      	ldr	r3, [pc, #440]	; (8008428 <tcp_input+0x49c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	885b      	ldrh	r3, [r3, #2]
 8008272:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008274:	429a      	cmp	r2, r3
 8008276:	d132      	bne.n	80082de <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	4b6b      	ldr	r3, [pc, #428]	; (800842c <tcp_input+0x4a0>)
 800827e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008280:	429a      	cmp	r2, r3
 8008282:	d12c      	bne.n	80082de <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	4b68      	ldr	r3, [pc, #416]	; (800842c <tcp_input+0x4a0>)
 800828a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800828c:	429a      	cmp	r2, r3
 800828e:	d126      	bne.n	80082de <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	69fa      	ldr	r2, [r7, #28]
 8008296:	429a      	cmp	r2, r3
 8008298:	d106      	bne.n	80082a8 <tcp_input+0x31c>
 800829a:	4b65      	ldr	r3, [pc, #404]	; (8008430 <tcp_input+0x4a4>)
 800829c:	f240 120d 	movw	r2, #269	; 0x10d
 80082a0:	4964      	ldr	r1, [pc, #400]	; (8008434 <tcp_input+0x4a8>)
 80082a2:	4865      	ldr	r0, [pc, #404]	; (8008438 <tcp_input+0x4ac>)
 80082a4:	f006 fb12 	bl	800e8cc <iprintf>
      if (prev != NULL) {
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00a      	beq.n	80082c4 <tcp_input+0x338>
        prev->next = pcb->next;
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	68da      	ldr	r2, [r3, #12]
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80082b6:	4b61      	ldr	r3, [pc, #388]	; (800843c <tcp_input+0x4b0>)
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80082be:	4a5f      	ldr	r2, [pc, #380]	; (800843c <tcp_input+0x4b0>)
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	69fa      	ldr	r2, [r7, #28]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d111      	bne.n	80082f2 <tcp_input+0x366>
 80082ce:	4b58      	ldr	r3, [pc, #352]	; (8008430 <tcp_input+0x4a4>)
 80082d0:	f240 1215 	movw	r2, #277	; 0x115
 80082d4:	495a      	ldr	r1, [pc, #360]	; (8008440 <tcp_input+0x4b4>)
 80082d6:	4858      	ldr	r0, [pc, #352]	; (8008438 <tcp_input+0x4ac>)
 80082d8:	f006 faf8 	bl	800e8cc <iprintf>
      break;
 80082dc:	e009      	b.n	80082f2 <tcp_input+0x366>
    }
    prev = pcb;
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	61fb      	str	r3, [r7, #28]
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f47f af5e 	bne.w	80081ac <tcp_input+0x220>
 80082f0:	e000      	b.n	80082f4 <tcp_input+0x368>
      break;
 80082f2:	bf00      	nop
  }

  if (pcb == NULL) {
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f040 80aa 	bne.w	8008450 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80082fc:	4b51      	ldr	r3, [pc, #324]	; (8008444 <tcp_input+0x4b8>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	61fb      	str	r3, [r7, #28]
 8008302:	e03f      	b.n	8008384 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	7d1b      	ldrb	r3, [r3, #20]
 8008308:	2b0a      	cmp	r3, #10
 800830a:	d006      	beq.n	800831a <tcp_input+0x38e>
 800830c:	4b48      	ldr	r3, [pc, #288]	; (8008430 <tcp_input+0x4a4>)
 800830e:	f240 121f 	movw	r2, #287	; 0x11f
 8008312:	494d      	ldr	r1, [pc, #308]	; (8008448 <tcp_input+0x4bc>)
 8008314:	4848      	ldr	r0, [pc, #288]	; (8008438 <tcp_input+0x4ac>)
 8008316:	f006 fad9 	bl	800e8cc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	7a1b      	ldrb	r3, [r3, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d009      	beq.n	8008336 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	7a1a      	ldrb	r2, [r3, #8]
 8008326:	4b41      	ldr	r3, [pc, #260]	; (800842c <tcp_input+0x4a0>)
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800832e:	3301      	adds	r3, #1
 8008330:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008332:	429a      	cmp	r2, r3
 8008334:	d122      	bne.n	800837c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	8b1a      	ldrh	r2, [r3, #24]
 800833a:	4b3b      	ldr	r3, [pc, #236]	; (8008428 <tcp_input+0x49c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	881b      	ldrh	r3, [r3, #0]
 8008340:	b29b      	uxth	r3, r3
 8008342:	429a      	cmp	r2, r3
 8008344:	d11b      	bne.n	800837e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	8ada      	ldrh	r2, [r3, #22]
 800834a:	4b37      	ldr	r3, [pc, #220]	; (8008428 <tcp_input+0x49c>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	885b      	ldrh	r3, [r3, #2]
 8008350:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008352:	429a      	cmp	r2, r3
 8008354:	d113      	bne.n	800837e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	4b34      	ldr	r3, [pc, #208]	; (800842c <tcp_input+0x4a0>)
 800835c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800835e:	429a      	cmp	r2, r3
 8008360:	d10d      	bne.n	800837e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	4b31      	ldr	r3, [pc, #196]	; (800842c <tcp_input+0x4a0>)
 8008368:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800836a:	429a      	cmp	r2, r3
 800836c:	d107      	bne.n	800837e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800836e:	69f8      	ldr	r0, [r7, #28]
 8008370:	f000 fb56 	bl	8008a20 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7fd ffe1 	bl	800633c <pbuf_free>
        return;
 800837a:	e1fd      	b.n	8008778 <tcp_input+0x7ec>
        continue;
 800837c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1bc      	bne.n	8008304 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800838e:	4b2f      	ldr	r3, [pc, #188]	; (800844c <tcp_input+0x4c0>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	e02a      	b.n	80083ec <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	7a1b      	ldrb	r3, [r3, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00c      	beq.n	80083b8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	7a1a      	ldrb	r2, [r3, #8]
 80083a2:	4b22      	ldr	r3, [pc, #136]	; (800842c <tcp_input+0x4a0>)
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083aa:	3301      	adds	r3, #1
 80083ac:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d002      	beq.n	80083b8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	61bb      	str	r3, [r7, #24]
        continue;
 80083b6:	e016      	b.n	80083e6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	8ada      	ldrh	r2, [r3, #22]
 80083bc:	4b1a      	ldr	r3, [pc, #104]	; (8008428 <tcp_input+0x49c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	885b      	ldrh	r3, [r3, #2]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d10c      	bne.n	80083e2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	4b17      	ldr	r3, [pc, #92]	; (800842c <tcp_input+0x4a0>)
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d00f      	beq.n	80083f4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00d      	beq.n	80083f6 <tcp_input+0x46a>
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d009      	beq.n	80083f6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	617b      	str	r3, [r7, #20]
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1d1      	bne.n	8008396 <tcp_input+0x40a>
 80083f2:	e000      	b.n	80083f6 <tcp_input+0x46a>
            break;
 80083f4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d029      	beq.n	8008450 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00a      	beq.n	8008418 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800840a:	4b10      	ldr	r3, [pc, #64]	; (800844c <tcp_input+0x4c0>)
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008412:	4a0e      	ldr	r2, [pc, #56]	; (800844c <tcp_input+0x4c0>)
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008418:	6978      	ldr	r0, [r7, #20]
 800841a:	f000 fa03 	bl	8008824 <tcp_listen_input>
      }
      pbuf_free(p);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7fd ff8c 	bl	800633c <pbuf_free>
      return;
 8008424:	e1a8      	b.n	8008778 <tcp_input+0x7ec>
 8008426:	bf00      	nop
 8008428:	24007ad8 	.word	0x24007ad8
 800842c:	24004b94 	.word	0x24004b94
 8008430:	08010938 	.word	0x08010938
 8008434:	08010a64 	.word	0x08010a64
 8008438:	08010984 	.word	0x08010984
 800843c:	24007abc 	.word	0x24007abc
 8008440:	08010a90 	.word	0x08010a90
 8008444:	24007ac0 	.word	0x24007ac0
 8008448:	08010abc 	.word	0x08010abc
 800844c:	24007ab8 	.word	0x24007ab8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	2b00      	cmp	r3, #0
 8008454:	f000 8158 	beq.w	8008708 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008458:	4b95      	ldr	r3, [pc, #596]	; (80086b0 <tcp_input+0x724>)
 800845a:	2200      	movs	r2, #0
 800845c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	891a      	ldrh	r2, [r3, #8]
 8008462:	4b93      	ldr	r3, [pc, #588]	; (80086b0 <tcp_input+0x724>)
 8008464:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008466:	4a92      	ldr	r2, [pc, #584]	; (80086b0 <tcp_input+0x724>)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800846c:	4b91      	ldr	r3, [pc, #580]	; (80086b4 <tcp_input+0x728>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a8f      	ldr	r2, [pc, #572]	; (80086b0 <tcp_input+0x724>)
 8008472:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008474:	4b90      	ldr	r3, [pc, #576]	; (80086b8 <tcp_input+0x72c>)
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800847a:	4b90      	ldr	r3, [pc, #576]	; (80086bc <tcp_input+0x730>)
 800847c:	2200      	movs	r2, #0
 800847e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008480:	4b8f      	ldr	r3, [pc, #572]	; (80086c0 <tcp_input+0x734>)
 8008482:	2200      	movs	r2, #0
 8008484:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008486:	4b8f      	ldr	r3, [pc, #572]	; (80086c4 <tcp_input+0x738>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	f003 0308 	and.w	r3, r3, #8
 800848e:	2b00      	cmp	r3, #0
 8008490:	d006      	beq.n	80084a0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	7b5b      	ldrb	r3, [r3, #13]
 8008496:	f043 0301 	orr.w	r3, r3, #1
 800849a:	b2da      	uxtb	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d017      	beq.n	80084d8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80084a8:	69f8      	ldr	r0, [r7, #28]
 80084aa:	f7ff f929 	bl	8007700 <tcp_process_refused_data>
 80084ae:	4603      	mov	r3, r0
 80084b0:	f113 0f0d 	cmn.w	r3, #13
 80084b4:	d007      	beq.n	80084c6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00c      	beq.n	80084d8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80084be:	4b82      	ldr	r3, [pc, #520]	; (80086c8 <tcp_input+0x73c>)
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d008      	beq.n	80084d8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f040 80e3 	bne.w	8008696 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80084d0:	69f8      	ldr	r0, [r7, #28]
 80084d2:	f003 f9ad 	bl	800b830 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80084d6:	e0de      	b.n	8008696 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80084d8:	4a7c      	ldr	r2, [pc, #496]	; (80086cc <tcp_input+0x740>)
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80084de:	69f8      	ldr	r0, [r7, #28]
 80084e0:	f000 fb18 	bl	8008b14 <tcp_process>
 80084e4:	4603      	mov	r3, r0
 80084e6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80084e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80084ec:	f113 0f0d 	cmn.w	r3, #13
 80084f0:	f000 80d3 	beq.w	800869a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80084f4:	4b71      	ldr	r3, [pc, #452]	; (80086bc <tcp_input+0x730>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	f003 0308 	and.w	r3, r3, #8
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d015      	beq.n	800852c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008506:	2b00      	cmp	r3, #0
 8008508:	d008      	beq.n	800851c <tcp_input+0x590>
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008510:	69fa      	ldr	r2, [r7, #28]
 8008512:	6912      	ldr	r2, [r2, #16]
 8008514:	f06f 010d 	mvn.w	r1, #13
 8008518:	4610      	mov	r0, r2
 800851a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800851c:	69f9      	ldr	r1, [r7, #28]
 800851e:	486c      	ldr	r0, [pc, #432]	; (80086d0 <tcp_input+0x744>)
 8008520:	f7ff fbbc 	bl	8007c9c <tcp_pcb_remove>
        tcp_free(pcb);
 8008524:	69f8      	ldr	r0, [r7, #28]
 8008526:	f7fe f9a9 	bl	800687c <tcp_free>
 800852a:	e0da      	b.n	80086e2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008530:	4b63      	ldr	r3, [pc, #396]	; (80086c0 <tcp_input+0x734>)
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d01d      	beq.n	8008574 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008538:	4b61      	ldr	r3, [pc, #388]	; (80086c0 <tcp_input+0x734>)
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <tcp_input+0x5d2>
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800854e:	69fa      	ldr	r2, [r7, #28]
 8008550:	6910      	ldr	r0, [r2, #16]
 8008552:	89fa      	ldrh	r2, [r7, #14]
 8008554:	69f9      	ldr	r1, [r7, #28]
 8008556:	4798      	blx	r3
 8008558:	4603      	mov	r3, r0
 800855a:	74fb      	strb	r3, [r7, #19]
 800855c:	e001      	b.n	8008562 <tcp_input+0x5d6>
 800855e:	2300      	movs	r3, #0
 8008560:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008562:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008566:	f113 0f0d 	cmn.w	r3, #13
 800856a:	f000 8098 	beq.w	800869e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800856e:	4b54      	ldr	r3, [pc, #336]	; (80086c0 <tcp_input+0x734>)
 8008570:	2200      	movs	r2, #0
 8008572:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008574:	69f8      	ldr	r0, [r7, #28]
 8008576:	f000 f915 	bl	80087a4 <tcp_input_delayed_close>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	f040 8090 	bne.w	80086a2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008582:	4b4d      	ldr	r3, [pc, #308]	; (80086b8 <tcp_input+0x72c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d041      	beq.n	800860e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800858e:	2b00      	cmp	r3, #0
 8008590:	d006      	beq.n	80085a0 <tcp_input+0x614>
 8008592:	4b50      	ldr	r3, [pc, #320]	; (80086d4 <tcp_input+0x748>)
 8008594:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008598:	494f      	ldr	r1, [pc, #316]	; (80086d8 <tcp_input+0x74c>)
 800859a:	4850      	ldr	r0, [pc, #320]	; (80086dc <tcp_input+0x750>)
 800859c:	f006 f996 	bl	800e8cc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	8b5b      	ldrh	r3, [r3, #26]
 80085a4:	f003 0310 	and.w	r3, r3, #16
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d008      	beq.n	80085be <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80085ac:	4b42      	ldr	r3, [pc, #264]	; (80086b8 <tcp_input+0x72c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fd fec3 	bl	800633c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80085b6:	69f8      	ldr	r0, [r7, #28]
 80085b8:	f7fe fc48 	bl	8006e4c <tcp_abort>
            goto aborted;
 80085bc:	e091      	b.n	80086e2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00c      	beq.n	80085e2 <tcp_input+0x656>
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	6918      	ldr	r0, [r3, #16]
 80085d2:	4b39      	ldr	r3, [pc, #228]	; (80086b8 <tcp_input+0x72c>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	2300      	movs	r3, #0
 80085d8:	69f9      	ldr	r1, [r7, #28]
 80085da:	47a0      	blx	r4
 80085dc:	4603      	mov	r3, r0
 80085de:	74fb      	strb	r3, [r7, #19]
 80085e0:	e008      	b.n	80085f4 <tcp_input+0x668>
 80085e2:	4b35      	ldr	r3, [pc, #212]	; (80086b8 <tcp_input+0x72c>)
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	2300      	movs	r3, #0
 80085e8:	69f9      	ldr	r1, [r7, #28]
 80085ea:	2000      	movs	r0, #0
 80085ec:	f7ff f95e 	bl	80078ac <tcp_recv_null>
 80085f0:	4603      	mov	r3, r0
 80085f2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80085f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085f8:	f113 0f0d 	cmn.w	r3, #13
 80085fc:	d053      	beq.n	80086a6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80085fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008606:	4b2c      	ldr	r3, [pc, #176]	; (80086b8 <tcp_input+0x72c>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800860e:	4b2b      	ldr	r3, [pc, #172]	; (80086bc <tcp_input+0x730>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	f003 0320 	and.w	r3, r3, #32
 8008616:	2b00      	cmp	r3, #0
 8008618:	d030      	beq.n	800867c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800861e:	2b00      	cmp	r3, #0
 8008620:	d009      	beq.n	8008636 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008626:	7b5a      	ldrb	r2, [r3, #13]
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800862c:	f042 0220 	orr.w	r2, r2, #32
 8008630:	b2d2      	uxtb	r2, r2
 8008632:	735a      	strb	r2, [r3, #13]
 8008634:	e022      	b.n	800867c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800863a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800863e:	d005      	beq.n	800864c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008644:	3301      	adds	r3, #1
 8008646:	b29a      	uxth	r2, r3
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00b      	beq.n	800866e <tcp_input+0x6e2>
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	6918      	ldr	r0, [r3, #16]
 8008660:	2300      	movs	r3, #0
 8008662:	2200      	movs	r2, #0
 8008664:	69f9      	ldr	r1, [r7, #28]
 8008666:	47a0      	blx	r4
 8008668:	4603      	mov	r3, r0
 800866a:	74fb      	strb	r3, [r7, #19]
 800866c:	e001      	b.n	8008672 <tcp_input+0x6e6>
 800866e:	2300      	movs	r3, #0
 8008670:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008672:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008676:	f113 0f0d 	cmn.w	r3, #13
 800867a:	d016      	beq.n	80086aa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800867c:	4b13      	ldr	r3, [pc, #76]	; (80086cc <tcp_input+0x740>)
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008682:	69f8      	ldr	r0, [r7, #28]
 8008684:	f000 f88e 	bl	80087a4 <tcp_input_delayed_close>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d128      	bne.n	80086e0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800868e:	69f8      	ldr	r0, [r7, #28]
 8008690:	f002 fac8 	bl	800ac24 <tcp_output>
 8008694:	e025      	b.n	80086e2 <tcp_input+0x756>
        goto aborted;
 8008696:	bf00      	nop
 8008698:	e023      	b.n	80086e2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800869a:	bf00      	nop
 800869c:	e021      	b.n	80086e2 <tcp_input+0x756>
              goto aborted;
 800869e:	bf00      	nop
 80086a0:	e01f      	b.n	80086e2 <tcp_input+0x756>
          goto aborted;
 80086a2:	bf00      	nop
 80086a4:	e01d      	b.n	80086e2 <tcp_input+0x756>
            goto aborted;
 80086a6:	bf00      	nop
 80086a8:	e01b      	b.n	80086e2 <tcp_input+0x756>
              goto aborted;
 80086aa:	bf00      	nop
 80086ac:	e019      	b.n	80086e2 <tcp_input+0x756>
 80086ae:	bf00      	nop
 80086b0:	24007ac8 	.word	0x24007ac8
 80086b4:	24007ad8 	.word	0x24007ad8
 80086b8:	24007af8 	.word	0x24007af8
 80086bc:	24007af5 	.word	0x24007af5
 80086c0:	24007af0 	.word	0x24007af0
 80086c4:	24007af4 	.word	0x24007af4
 80086c8:	24007af2 	.word	0x24007af2
 80086cc:	24007afc 	.word	0x24007afc
 80086d0:	24007abc 	.word	0x24007abc
 80086d4:	08010938 	.word	0x08010938
 80086d8:	08010aec 	.word	0x08010aec
 80086dc:	08010984 	.word	0x08010984
          goto aborted;
 80086e0:	bf00      	nop
    tcp_input_pcb = NULL;
 80086e2:	4b27      	ldr	r3, [pc, #156]	; (8008780 <tcp_input+0x7f4>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80086e8:	4b26      	ldr	r3, [pc, #152]	; (8008784 <tcp_input+0x7f8>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80086ee:	4b26      	ldr	r3, [pc, #152]	; (8008788 <tcp_input+0x7fc>)
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d03f      	beq.n	8008776 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80086f6:	4b24      	ldr	r3, [pc, #144]	; (8008788 <tcp_input+0x7fc>)
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fd fe1e 	bl	800633c <pbuf_free>
      inseg.p = NULL;
 8008700:	4b21      	ldr	r3, [pc, #132]	; (8008788 <tcp_input+0x7fc>)
 8008702:	2200      	movs	r2, #0
 8008704:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008706:	e036      	b.n	8008776 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008708:	4b20      	ldr	r3, [pc, #128]	; (800878c <tcp_input+0x800>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	899b      	ldrh	r3, [r3, #12]
 800870e:	b29b      	uxth	r3, r3
 8008710:	4618      	mov	r0, r3
 8008712:	f7fc f9fd 	bl	8004b10 <lwip_htons>
 8008716:	4603      	mov	r3, r0
 8008718:	b2db      	uxtb	r3, r3
 800871a:	f003 0304 	and.w	r3, r3, #4
 800871e:	2b00      	cmp	r3, #0
 8008720:	d118      	bne.n	8008754 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008722:	4b1b      	ldr	r3, [pc, #108]	; (8008790 <tcp_input+0x804>)
 8008724:	6819      	ldr	r1, [r3, #0]
 8008726:	4b1b      	ldr	r3, [pc, #108]	; (8008794 <tcp_input+0x808>)
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	4b1a      	ldr	r3, [pc, #104]	; (8008798 <tcp_input+0x80c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008732:	4b16      	ldr	r3, [pc, #88]	; (800878c <tcp_input+0x800>)
 8008734:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008736:	885b      	ldrh	r3, [r3, #2]
 8008738:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800873a:	4a14      	ldr	r2, [pc, #80]	; (800878c <tcp_input+0x800>)
 800873c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800873e:	8812      	ldrh	r2, [r2, #0]
 8008740:	b292      	uxth	r2, r2
 8008742:	9202      	str	r2, [sp, #8]
 8008744:	9301      	str	r3, [sp, #4]
 8008746:	4b15      	ldr	r3, [pc, #84]	; (800879c <tcp_input+0x810>)
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	4b15      	ldr	r3, [pc, #84]	; (80087a0 <tcp_input+0x814>)
 800874c:	4602      	mov	r2, r0
 800874e:	2000      	movs	r0, #0
 8008750:	f003 f81c 	bl	800b78c <tcp_rst>
    pbuf_free(p);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7fd fdf1 	bl	800633c <pbuf_free>
  return;
 800875a:	e00c      	b.n	8008776 <tcp_input+0x7ea>
    goto dropped;
 800875c:	bf00      	nop
 800875e:	e006      	b.n	800876e <tcp_input+0x7e2>
    goto dropped;
 8008760:	bf00      	nop
 8008762:	e004      	b.n	800876e <tcp_input+0x7e2>
    goto dropped;
 8008764:	bf00      	nop
 8008766:	e002      	b.n	800876e <tcp_input+0x7e2>
      goto dropped;
 8008768:	bf00      	nop
 800876a:	e000      	b.n	800876e <tcp_input+0x7e2>
      goto dropped;
 800876c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7fd fde4 	bl	800633c <pbuf_free>
 8008774:	e000      	b.n	8008778 <tcp_input+0x7ec>
  return;
 8008776:	bf00      	nop
}
 8008778:	3724      	adds	r7, #36	; 0x24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd90      	pop	{r4, r7, pc}
 800877e:	bf00      	nop
 8008780:	24007afc 	.word	0x24007afc
 8008784:	24007af8 	.word	0x24007af8
 8008788:	24007ac8 	.word	0x24007ac8
 800878c:	24007ad8 	.word	0x24007ad8
 8008790:	24007aec 	.word	0x24007aec
 8008794:	24007af2 	.word	0x24007af2
 8008798:	24007ae8 	.word	0x24007ae8
 800879c:	24004ba4 	.word	0x24004ba4
 80087a0:	24004ba8 	.word	0x24004ba8

080087a4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d106      	bne.n	80087c0 <tcp_input_delayed_close+0x1c>
 80087b2:	4b17      	ldr	r3, [pc, #92]	; (8008810 <tcp_input_delayed_close+0x6c>)
 80087b4:	f240 225a 	movw	r2, #602	; 0x25a
 80087b8:	4916      	ldr	r1, [pc, #88]	; (8008814 <tcp_input_delayed_close+0x70>)
 80087ba:	4817      	ldr	r0, [pc, #92]	; (8008818 <tcp_input_delayed_close+0x74>)
 80087bc:	f006 f886 	bl	800e8cc <iprintf>

  if (recv_flags & TF_CLOSED) {
 80087c0:	4b16      	ldr	r3, [pc, #88]	; (800881c <tcp_input_delayed_close+0x78>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	f003 0310 	and.w	r3, r3, #16
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01c      	beq.n	8008806 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	8b5b      	ldrh	r3, [r3, #26]
 80087d0:	f003 0310 	and.w	r3, r3, #16
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10d      	bne.n	80087f4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d008      	beq.n	80087f4 <tcp_input_delayed_close+0x50>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	6912      	ldr	r2, [r2, #16]
 80087ec:	f06f 010e 	mvn.w	r1, #14
 80087f0:	4610      	mov	r0, r2
 80087f2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	480a      	ldr	r0, [pc, #40]	; (8008820 <tcp_input_delayed_close+0x7c>)
 80087f8:	f7ff fa50 	bl	8007c9c <tcp_pcb_remove>
    tcp_free(pcb);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7fe f83d 	bl	800687c <tcp_free>
    return 1;
 8008802:	2301      	movs	r3, #1
 8008804:	e000      	b.n	8008808 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	08010938 	.word	0x08010938
 8008814:	08010b08 	.word	0x08010b08
 8008818:	08010984 	.word	0x08010984
 800881c:	24007af5 	.word	0x24007af5
 8008820:	24007abc 	.word	0x24007abc

08008824 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008824:	b590      	push	{r4, r7, lr}
 8008826:	b08b      	sub	sp, #44	; 0x2c
 8008828:	af04      	add	r7, sp, #16
 800882a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800882c:	4b6f      	ldr	r3, [pc, #444]	; (80089ec <tcp_listen_input+0x1c8>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b00      	cmp	r3, #0
 8008836:	f040 80d2 	bne.w	80089de <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d106      	bne.n	800884e <tcp_listen_input+0x2a>
 8008840:	4b6b      	ldr	r3, [pc, #428]	; (80089f0 <tcp_listen_input+0x1cc>)
 8008842:	f240 2281 	movw	r2, #641	; 0x281
 8008846:	496b      	ldr	r1, [pc, #428]	; (80089f4 <tcp_listen_input+0x1d0>)
 8008848:	486b      	ldr	r0, [pc, #428]	; (80089f8 <tcp_listen_input+0x1d4>)
 800884a:	f006 f83f 	bl	800e8cc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800884e:	4b67      	ldr	r3, [pc, #412]	; (80089ec <tcp_listen_input+0x1c8>)
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	f003 0310 	and.w	r3, r3, #16
 8008856:	2b00      	cmp	r3, #0
 8008858:	d019      	beq.n	800888e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800885a:	4b68      	ldr	r3, [pc, #416]	; (80089fc <tcp_listen_input+0x1d8>)
 800885c:	6819      	ldr	r1, [r3, #0]
 800885e:	4b68      	ldr	r3, [pc, #416]	; (8008a00 <tcp_listen_input+0x1dc>)
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	4b67      	ldr	r3, [pc, #412]	; (8008a04 <tcp_listen_input+0x1e0>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800886a:	4b67      	ldr	r3, [pc, #412]	; (8008a08 <tcp_listen_input+0x1e4>)
 800886c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800886e:	885b      	ldrh	r3, [r3, #2]
 8008870:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008872:	4a65      	ldr	r2, [pc, #404]	; (8008a08 <tcp_listen_input+0x1e4>)
 8008874:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008876:	8812      	ldrh	r2, [r2, #0]
 8008878:	b292      	uxth	r2, r2
 800887a:	9202      	str	r2, [sp, #8]
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	4b63      	ldr	r3, [pc, #396]	; (8008a0c <tcp_listen_input+0x1e8>)
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	4b63      	ldr	r3, [pc, #396]	; (8008a10 <tcp_listen_input+0x1ec>)
 8008884:	4602      	mov	r2, r0
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f002 ff80 	bl	800b78c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800888c:	e0a9      	b.n	80089e2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800888e:	4b57      	ldr	r3, [pc, #348]	; (80089ec <tcp_listen_input+0x1c8>)
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 80a3 	beq.w	80089e2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	7d5b      	ldrb	r3, [r3, #21]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7ff f927 	bl	8007af4 <tcp_alloc>
 80088a6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d111      	bne.n	80088d2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <tcp_listen_input+0xa8>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6910      	ldr	r0, [r2, #16]
 80088be:	f04f 32ff 	mov.w	r2, #4294967295
 80088c2:	2100      	movs	r1, #0
 80088c4:	4798      	blx	r3
 80088c6:	4603      	mov	r3, r0
 80088c8:	73bb      	strb	r3, [r7, #14]
      return;
 80088ca:	e08b      	b.n	80089e4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80088cc:	23f0      	movs	r3, #240	; 0xf0
 80088ce:	73bb      	strb	r3, [r7, #14]
      return;
 80088d0:	e088      	b.n	80089e4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80088d2:	4b50      	ldr	r3, [pc, #320]	; (8008a14 <tcp_listen_input+0x1f0>)
 80088d4:	695a      	ldr	r2, [r3, #20]
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80088da:	4b4e      	ldr	r3, [pc, #312]	; (8008a14 <tcp_listen_input+0x1f0>)
 80088dc:	691a      	ldr	r2, [r3, #16]
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	8ada      	ldrh	r2, [r3, #22]
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80088ea:	4b47      	ldr	r3, [pc, #284]	; (8008a08 <tcp_listen_input+0x1e4>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2203      	movs	r2, #3
 80088fa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80088fc:	4b41      	ldr	r3, [pc, #260]	; (8008a04 <tcp_listen_input+0x1e0>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	1c5a      	adds	r2, r3, #1
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800890e:	6978      	ldr	r0, [r7, #20]
 8008910:	f7ff fa58 	bl	8007dc4 <tcp_next_iss>
 8008914:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800892e:	4b35      	ldr	r3, [pc, #212]	; (8008a04 <tcp_listen_input+0x1e0>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	1e5a      	subs	r2, r3, #1
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	691a      	ldr	r2, [r3, #16]
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	7a5b      	ldrb	r3, [r3, #9]
 800894a:	f003 030c 	and.w	r3, r3, #12
 800894e:	b2da      	uxtb	r2, r3
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	7a1a      	ldrb	r2, [r3, #8]
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800895c:	4b2e      	ldr	r3, [pc, #184]	; (8008a18 <tcp_listen_input+0x1f4>)
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	60da      	str	r2, [r3, #12]
 8008964:	4a2c      	ldr	r2, [pc, #176]	; (8008a18 <tcp_listen_input+0x1f4>)
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	f003 f8d1 	bl	800bb10 <tcp_timer_needed>
 800896e:	4b2b      	ldr	r3, [pc, #172]	; (8008a1c <tcp_listen_input+0x1f8>)
 8008970:	2201      	movs	r2, #1
 8008972:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008974:	6978      	ldr	r0, [r7, #20]
 8008976:	f001 fd8f 	bl	800a498 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800897a:	4b23      	ldr	r3, [pc, #140]	; (8008a08 <tcp_listen_input+0x1e4>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	89db      	ldrh	r3, [r3, #14]
 8008980:	b29a      	uxth	r2, r3
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	3304      	adds	r3, #4
 800899c:	4618      	mov	r0, r3
 800899e:	f004 fcbb 	bl	800d318 <ip4_route>
 80089a2:	4601      	mov	r1, r0
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	3304      	adds	r3, #4
 80089a8:	461a      	mov	r2, r3
 80089aa:	4620      	mov	r0, r4
 80089ac:	f7ff fa30 	bl	8007e10 <tcp_eff_send_mss_netif>
 80089b0:	4603      	mov	r3, r0
 80089b2:	461a      	mov	r2, r3
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80089b8:	2112      	movs	r1, #18
 80089ba:	6978      	ldr	r0, [r7, #20]
 80089bc:	f002 f844 	bl	800aa48 <tcp_enqueue_flags>
 80089c0:	4603      	mov	r3, r0
 80089c2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80089c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d004      	beq.n	80089d6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80089cc:	2100      	movs	r1, #0
 80089ce:	6978      	ldr	r0, [r7, #20]
 80089d0:	f7fe f97e 	bl	8006cd0 <tcp_abandon>
      return;
 80089d4:	e006      	b.n	80089e4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80089d6:	6978      	ldr	r0, [r7, #20]
 80089d8:	f002 f924 	bl	800ac24 <tcp_output>
  return;
 80089dc:	e001      	b.n	80089e2 <tcp_listen_input+0x1be>
    return;
 80089de:	bf00      	nop
 80089e0:	e000      	b.n	80089e4 <tcp_listen_input+0x1c0>
  return;
 80089e2:	bf00      	nop
}
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd90      	pop	{r4, r7, pc}
 80089ea:	bf00      	nop
 80089ec:	24007af4 	.word	0x24007af4
 80089f0:	08010938 	.word	0x08010938
 80089f4:	08010b30 	.word	0x08010b30
 80089f8:	08010984 	.word	0x08010984
 80089fc:	24007aec 	.word	0x24007aec
 8008a00:	24007af2 	.word	0x24007af2
 8008a04:	24007ae8 	.word	0x24007ae8
 8008a08:	24007ad8 	.word	0x24007ad8
 8008a0c:	24004ba4 	.word	0x24004ba4
 8008a10:	24004ba8 	.word	0x24004ba8
 8008a14:	24004b94 	.word	0x24004b94
 8008a18:	24007abc 	.word	0x24007abc
 8008a1c:	24007ac4 	.word	0x24007ac4

08008a20 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af04      	add	r7, sp, #16
 8008a26:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008a28:	4b2f      	ldr	r3, [pc, #188]	; (8008ae8 <tcp_timewait_input+0xc8>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d153      	bne.n	8008adc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d106      	bne.n	8008a48 <tcp_timewait_input+0x28>
 8008a3a:	4b2c      	ldr	r3, [pc, #176]	; (8008aec <tcp_timewait_input+0xcc>)
 8008a3c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008a40:	492b      	ldr	r1, [pc, #172]	; (8008af0 <tcp_timewait_input+0xd0>)
 8008a42:	482c      	ldr	r0, [pc, #176]	; (8008af4 <tcp_timewait_input+0xd4>)
 8008a44:	f005 ff42 	bl	800e8cc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008a48:	4b27      	ldr	r3, [pc, #156]	; (8008ae8 <tcp_timewait_input+0xc8>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	f003 0302 	and.w	r3, r3, #2
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d02a      	beq.n	8008aaa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008a54:	4b28      	ldr	r3, [pc, #160]	; (8008af8 <tcp_timewait_input+0xd8>)
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	db2d      	blt.n	8008abe <tcp_timewait_input+0x9e>
 8008a62:	4b25      	ldr	r3, [pc, #148]	; (8008af8 <tcp_timewait_input+0xd8>)
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008a6e:	440b      	add	r3, r1
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	dc23      	bgt.n	8008abe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a76:	4b21      	ldr	r3, [pc, #132]	; (8008afc <tcp_timewait_input+0xdc>)
 8008a78:	6819      	ldr	r1, [r3, #0]
 8008a7a:	4b21      	ldr	r3, [pc, #132]	; (8008b00 <tcp_timewait_input+0xe0>)
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	4b1d      	ldr	r3, [pc, #116]	; (8008af8 <tcp_timewait_input+0xd8>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a86:	4b1f      	ldr	r3, [pc, #124]	; (8008b04 <tcp_timewait_input+0xe4>)
 8008a88:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a8a:	885b      	ldrh	r3, [r3, #2]
 8008a8c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a8e:	4a1d      	ldr	r2, [pc, #116]	; (8008b04 <tcp_timewait_input+0xe4>)
 8008a90:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a92:	8812      	ldrh	r2, [r2, #0]
 8008a94:	b292      	uxth	r2, r2
 8008a96:	9202      	str	r2, [sp, #8]
 8008a98:	9301      	str	r3, [sp, #4]
 8008a9a:	4b1b      	ldr	r3, [pc, #108]	; (8008b08 <tcp_timewait_input+0xe8>)
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	4b1b      	ldr	r3, [pc, #108]	; (8008b0c <tcp_timewait_input+0xec>)
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f002 fe72 	bl	800b78c <tcp_rst>
      return;
 8008aa8:	e01b      	b.n	8008ae2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008aaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ae8 <tcp_timewait_input+0xc8>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	f003 0301 	and.w	r3, r3, #1
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008ab6:	4b16      	ldr	r3, [pc, #88]	; (8008b10 <tcp_timewait_input+0xf0>)
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008abe:	4b10      	ldr	r3, [pc, #64]	; (8008b00 <tcp_timewait_input+0xe0>)
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00c      	beq.n	8008ae0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	8b5b      	ldrh	r3, [r3, #26]
 8008aca:	f043 0302 	orr.w	r3, r3, #2
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f002 f8a5 	bl	800ac24 <tcp_output>
  }
  return;
 8008ada:	e001      	b.n	8008ae0 <tcp_timewait_input+0xc0>
    return;
 8008adc:	bf00      	nop
 8008ade:	e000      	b.n	8008ae2 <tcp_timewait_input+0xc2>
  return;
 8008ae0:	bf00      	nop
}
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	24007af4 	.word	0x24007af4
 8008aec:	08010938 	.word	0x08010938
 8008af0:	08010b50 	.word	0x08010b50
 8008af4:	08010984 	.word	0x08010984
 8008af8:	24007ae8 	.word	0x24007ae8
 8008afc:	24007aec 	.word	0x24007aec
 8008b00:	24007af2 	.word	0x24007af2
 8008b04:	24007ad8 	.word	0x24007ad8
 8008b08:	24004ba4 	.word	0x24004ba4
 8008b0c:	24004ba8 	.word	0x24004ba8
 8008b10:	24007ab0 	.word	0x24007ab0

08008b14 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008b14:	b590      	push	{r4, r7, lr}
 8008b16:	b08d      	sub	sp, #52	; 0x34
 8008b18:	af04      	add	r7, sp, #16
 8008b1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d106      	bne.n	8008b38 <tcp_process+0x24>
 8008b2a:	4b9d      	ldr	r3, [pc, #628]	; (8008da0 <tcp_process+0x28c>)
 8008b2c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008b30:	499c      	ldr	r1, [pc, #624]	; (8008da4 <tcp_process+0x290>)
 8008b32:	489d      	ldr	r0, [pc, #628]	; (8008da8 <tcp_process+0x294>)
 8008b34:	f005 feca 	bl	800e8cc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008b38:	4b9c      	ldr	r3, [pc, #624]	; (8008dac <tcp_process+0x298>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	f003 0304 	and.w	r3, r3, #4
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d04e      	beq.n	8008be2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	7d1b      	ldrb	r3, [r3, #20]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d108      	bne.n	8008b5e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b50:	4b97      	ldr	r3, [pc, #604]	; (8008db0 <tcp_process+0x29c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d123      	bne.n	8008ba0 <tcp_process+0x8c>
        acceptable = 1;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	76fb      	strb	r3, [r7, #27]
 8008b5c:	e020      	b.n	8008ba0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b62:	4b94      	ldr	r3, [pc, #592]	; (8008db4 <tcp_process+0x2a0>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d102      	bne.n	8008b70 <tcp_process+0x5c>
        acceptable = 1;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	76fb      	strb	r3, [r7, #27]
 8008b6e:	e017      	b.n	8008ba0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008b70:	4b90      	ldr	r3, [pc, #576]	; (8008db4 <tcp_process+0x2a0>)
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	db10      	blt.n	8008ba0 <tcp_process+0x8c>
 8008b7e:	4b8d      	ldr	r3, [pc, #564]	; (8008db4 <tcp_process+0x2a0>)
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b86:	6879      	ldr	r1, [r7, #4]
 8008b88:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008b8a:	440b      	add	r3, r1
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	dc06      	bgt.n	8008ba0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	8b5b      	ldrh	r3, [r3, #26]
 8008b96:	f043 0302 	orr.w	r3, r3, #2
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008ba0:	7efb      	ldrb	r3, [r7, #27]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01b      	beq.n	8008bde <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	7d1b      	ldrb	r3, [r3, #20]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d106      	bne.n	8008bbc <tcp_process+0xa8>
 8008bae:	4b7c      	ldr	r3, [pc, #496]	; (8008da0 <tcp_process+0x28c>)
 8008bb0:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008bb4:	4980      	ldr	r1, [pc, #512]	; (8008db8 <tcp_process+0x2a4>)
 8008bb6:	487c      	ldr	r0, [pc, #496]	; (8008da8 <tcp_process+0x294>)
 8008bb8:	f005 fe88 	bl	800e8cc <iprintf>
      recv_flags |= TF_RESET;
 8008bbc:	4b7f      	ldr	r3, [pc, #508]	; (8008dbc <tcp_process+0x2a8>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	f043 0308 	orr.w	r3, r3, #8
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	4b7d      	ldr	r3, [pc, #500]	; (8008dbc <tcp_process+0x2a8>)
 8008bc8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	8b5b      	ldrh	r3, [r3, #26]
 8008bce:	f023 0301 	bic.w	r3, r3, #1
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008bd8:	f06f 030d 	mvn.w	r3, #13
 8008bdc:	e37a      	b.n	80092d4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	e378      	b.n	80092d4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008be2:	4b72      	ldr	r3, [pc, #456]	; (8008dac <tcp_process+0x298>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d010      	beq.n	8008c10 <tcp_process+0xfc>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	7d1b      	ldrb	r3, [r3, #20]
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d00c      	beq.n	8008c10 <tcp_process+0xfc>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	7d1b      	ldrb	r3, [r3, #20]
 8008bfa:	2b03      	cmp	r3, #3
 8008bfc:	d008      	beq.n	8008c10 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	8b5b      	ldrh	r3, [r3, #26]
 8008c02:	f043 0302 	orr.w	r3, r3, #2
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	e361      	b.n	80092d4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	8b5b      	ldrh	r3, [r3, #26]
 8008c14:	f003 0310 	and.w	r3, r3, #16
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d103      	bne.n	8008c24 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008c1c:	4b68      	ldr	r3, [pc, #416]	; (8008dc0 <tcp_process+0x2ac>)
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f001 fc2f 	bl	800a498 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	7d1b      	ldrb	r3, [r3, #20]
 8008c3e:	3b02      	subs	r3, #2
 8008c40:	2b07      	cmp	r3, #7
 8008c42:	f200 8337 	bhi.w	80092b4 <tcp_process+0x7a0>
 8008c46:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <tcp_process+0x138>)
 8008c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4c:	08008c6d 	.word	0x08008c6d
 8008c50:	08008e9d 	.word	0x08008e9d
 8008c54:	08009015 	.word	0x08009015
 8008c58:	0800903f 	.word	0x0800903f
 8008c5c:	08009163 	.word	0x08009163
 8008c60:	08009015 	.word	0x08009015
 8008c64:	080091ef 	.word	0x080091ef
 8008c68:	0800927f 	.word	0x0800927f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008c6c:	4b4f      	ldr	r3, [pc, #316]	; (8008dac <tcp_process+0x298>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	f003 0310 	and.w	r3, r3, #16
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 80e4 	beq.w	8008e42 <tcp_process+0x32e>
 8008c7a:	4b4c      	ldr	r3, [pc, #304]	; (8008dac <tcp_process+0x298>)
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	f003 0302 	and.w	r3, r3, #2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f000 80dd 	beq.w	8008e42 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c8c:	1c5a      	adds	r2, r3, #1
 8008c8e:	4b48      	ldr	r3, [pc, #288]	; (8008db0 <tcp_process+0x29c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	f040 80d5 	bne.w	8008e42 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008c98:	4b46      	ldr	r3, [pc, #280]	; (8008db4 <tcp_process+0x2a0>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	1c5a      	adds	r2, r3, #1
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008caa:	4b41      	ldr	r3, [pc, #260]	; (8008db0 <tcp_process+0x29c>)
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008cb2:	4b44      	ldr	r3, [pc, #272]	; (8008dc4 <tcp_process+0x2b0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	89db      	ldrh	r3, [r3, #14]
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008ccc:	4b39      	ldr	r3, [pc, #228]	; (8008db4 <tcp_process+0x2a0>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	1e5a      	subs	r2, r3, #1
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2204      	movs	r2, #4
 8008cda:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f004 fb17 	bl	800d318 <ip4_route>
 8008cea:	4601      	mov	r1, r0
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3304      	adds	r3, #4
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f7ff f88c 	bl	8007e10 <tcp_eff_send_mss_netif>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d04:	009a      	lsls	r2, r3, #2
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	f241 111c 	movw	r1, #4380	; 0x111c
 8008d10:	428b      	cmp	r3, r1
 8008d12:	bf38      	it	cc
 8008d14:	460b      	movcc	r3, r1
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d204      	bcs.n	8008d24 <tcp_process+0x210>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	e00d      	b.n	8008d40 <tcp_process+0x22c>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d28:	005b      	lsls	r3, r3, #1
 8008d2a:	f241 121c 	movw	r2, #4380	; 0x111c
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d904      	bls.n	8008d3c <tcp_process+0x228>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	e001      	b.n	8008d40 <tcp_process+0x22c>
 8008d3c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d106      	bne.n	8008d5e <tcp_process+0x24a>
 8008d50:	4b13      	ldr	r3, [pc, #76]	; (8008da0 <tcp_process+0x28c>)
 8008d52:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008d56:	491c      	ldr	r1, [pc, #112]	; (8008dc8 <tcp_process+0x2b4>)
 8008d58:	4813      	ldr	r0, [pc, #76]	; (8008da8 <tcp_process+0x294>)
 8008d5a:	f005 fdb7 	bl	800e8cc <iprintf>
        --pcb->snd_queuelen;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008d64:	3b01      	subs	r3, #1
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d72:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d12a      	bne.n	8008dd0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d7e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d106      	bne.n	8008d94 <tcp_process+0x280>
 8008d86:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <tcp_process+0x28c>)
 8008d88:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008d8c:	490f      	ldr	r1, [pc, #60]	; (8008dcc <tcp_process+0x2b8>)
 8008d8e:	4806      	ldr	r0, [pc, #24]	; (8008da8 <tcp_process+0x294>)
 8008d90:	f005 fd9c 	bl	800e8cc <iprintf>
          pcb->unsent = rseg->next;
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	66da      	str	r2, [r3, #108]	; 0x6c
 8008d9c:	e01c      	b.n	8008dd8 <tcp_process+0x2c4>
 8008d9e:	bf00      	nop
 8008da0:	08010938 	.word	0x08010938
 8008da4:	08010b70 	.word	0x08010b70
 8008da8:	08010984 	.word	0x08010984
 8008dac:	24007af4 	.word	0x24007af4
 8008db0:	24007aec 	.word	0x24007aec
 8008db4:	24007ae8 	.word	0x24007ae8
 8008db8:	08010b8c 	.word	0x08010b8c
 8008dbc:	24007af5 	.word	0x24007af5
 8008dc0:	24007ab0 	.word	0x24007ab0
 8008dc4:	24007ad8 	.word	0x24007ad8
 8008dc8:	08010bac 	.word	0x08010bac
 8008dcc:	08010bc4 	.word	0x08010bc4
        } else {
          pcb->unacked = rseg->next;
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008dd8:	69f8      	ldr	r0, [r7, #28]
 8008dda:	f7fe fd22 	bl	8007822 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d104      	bne.n	8008df0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dec:	861a      	strh	r2, [r3, #48]	; 0x30
 8008dee:	e006      	b.n	8008dfe <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00a      	beq.n	8008e1e <tcp_process+0x30a>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	6910      	ldr	r0, [r2, #16]
 8008e12:	2200      	movs	r2, #0
 8008e14:	6879      	ldr	r1, [r7, #4]
 8008e16:	4798      	blx	r3
 8008e18:	4603      	mov	r3, r0
 8008e1a:	76bb      	strb	r3, [r7, #26]
 8008e1c:	e001      	b.n	8008e22 <tcp_process+0x30e>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008e22:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008e26:	f113 0f0d 	cmn.w	r3, #13
 8008e2a:	d102      	bne.n	8008e32 <tcp_process+0x31e>
          return ERR_ABRT;
 8008e2c:	f06f 030c 	mvn.w	r3, #12
 8008e30:	e250      	b.n	80092d4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	8b5b      	ldrh	r3, [r3, #26]
 8008e36:	f043 0302 	orr.w	r3, r3, #2
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008e40:	e23a      	b.n	80092b8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008e42:	4b98      	ldr	r3, [pc, #608]	; (80090a4 <tcp_process+0x590>)
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	f003 0310 	and.w	r3, r3, #16
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 8234 	beq.w	80092b8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e50:	4b95      	ldr	r3, [pc, #596]	; (80090a8 <tcp_process+0x594>)
 8008e52:	6819      	ldr	r1, [r3, #0]
 8008e54:	4b95      	ldr	r3, [pc, #596]	; (80090ac <tcp_process+0x598>)
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	4b95      	ldr	r3, [pc, #596]	; (80090b0 <tcp_process+0x59c>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e60:	4b94      	ldr	r3, [pc, #592]	; (80090b4 <tcp_process+0x5a0>)
 8008e62:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e64:	885b      	ldrh	r3, [r3, #2]
 8008e66:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e68:	4a92      	ldr	r2, [pc, #584]	; (80090b4 <tcp_process+0x5a0>)
 8008e6a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e6c:	8812      	ldrh	r2, [r2, #0]
 8008e6e:	b292      	uxth	r2, r2
 8008e70:	9202      	str	r2, [sp, #8]
 8008e72:	9301      	str	r3, [sp, #4]
 8008e74:	4b90      	ldr	r3, [pc, #576]	; (80090b8 <tcp_process+0x5a4>)
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	4b90      	ldr	r3, [pc, #576]	; (80090bc <tcp_process+0x5a8>)
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f002 fc85 	bl	800b78c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e88:	2b05      	cmp	r3, #5
 8008e8a:	f200 8215 	bhi.w	80092b8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f002 fa51 	bl	800b33c <tcp_rexmit_rto>
      break;
 8008e9a:	e20d      	b.n	80092b8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008e9c:	4b81      	ldr	r3, [pc, #516]	; (80090a4 <tcp_process+0x590>)
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	f003 0310 	and.w	r3, r3, #16
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 80a1 	beq.w	8008fec <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008eaa:	4b7f      	ldr	r3, [pc, #508]	; (80090a8 <tcp_process+0x594>)
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	db7e      	blt.n	8008fb8 <tcp_process+0x4a4>
 8008eba:	4b7b      	ldr	r3, [pc, #492]	; (80090a8 <tcp_process+0x594>)
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dc77      	bgt.n	8008fb8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2204      	movs	r2, #4
 8008ecc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d102      	bne.n	8008edc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008ed6:	23fa      	movs	r3, #250	; 0xfa
 8008ed8:	76bb      	strb	r3, [r7, #26]
 8008eda:	e01d      	b.n	8008f18 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d106      	bne.n	8008ef4 <tcp_process+0x3e0>
 8008ee6:	4b76      	ldr	r3, [pc, #472]	; (80090c0 <tcp_process+0x5ac>)
 8008ee8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008eec:	4975      	ldr	r1, [pc, #468]	; (80090c4 <tcp_process+0x5b0>)
 8008eee:	4876      	ldr	r0, [pc, #472]	; (80090c8 <tcp_process+0x5b4>)
 8008ef0:	f005 fcec 	bl	800e8cc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00a      	beq.n	8008f14 <tcp_process+0x400>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	6910      	ldr	r0, [r2, #16]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	6879      	ldr	r1, [r7, #4]
 8008f0c:	4798      	blx	r3
 8008f0e:	4603      	mov	r3, r0
 8008f10:	76bb      	strb	r3, [r7, #26]
 8008f12:	e001      	b.n	8008f18 <tcp_process+0x404>
 8008f14:	23f0      	movs	r3, #240	; 0xf0
 8008f16:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008f18:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00a      	beq.n	8008f36 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008f20:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008f24:	f113 0f0d 	cmn.w	r3, #13
 8008f28:	d002      	beq.n	8008f30 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7fd ff8e 	bl	8006e4c <tcp_abort>
            }
            return ERR_ABRT;
 8008f30:	f06f 030c 	mvn.w	r3, #12
 8008f34:	e1ce      	b.n	80092d4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fae0 	bl	80094fc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008f3c:	4b63      	ldr	r3, [pc, #396]	; (80090cc <tcp_process+0x5b8>)
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d005      	beq.n	8008f50 <tcp_process+0x43c>
            recv_acked--;
 8008f44:	4b61      	ldr	r3, [pc, #388]	; (80090cc <tcp_process+0x5b8>)
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	4b5f      	ldr	r3, [pc, #380]	; (80090cc <tcp_process+0x5b8>)
 8008f4e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f54:	009a      	lsls	r2, r3, #2
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	f241 111c 	movw	r1, #4380	; 0x111c
 8008f60:	428b      	cmp	r3, r1
 8008f62:	bf38      	it	cc
 8008f64:	460b      	movcc	r3, r1
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d204      	bcs.n	8008f74 <tcp_process+0x460>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	e00d      	b.n	8008f90 <tcp_process+0x47c>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f78:	005b      	lsls	r3, r3, #1
 8008f7a:	f241 121c 	movw	r2, #4380	; 0x111c
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d904      	bls.n	8008f8c <tcp_process+0x478>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f86:	005b      	lsls	r3, r3, #1
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	e001      	b.n	8008f90 <tcp_process+0x47c>
 8008f8c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008f96:	4b4e      	ldr	r3, [pc, #312]	; (80090d0 <tcp_process+0x5bc>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	f003 0320 	and.w	r3, r3, #32
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d037      	beq.n	8009012 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	8b5b      	ldrh	r3, [r3, #26]
 8008fa6:	f043 0302 	orr.w	r3, r3, #2
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2207      	movs	r2, #7
 8008fb4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008fb6:	e02c      	b.n	8009012 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fb8:	4b3b      	ldr	r3, [pc, #236]	; (80090a8 <tcp_process+0x594>)
 8008fba:	6819      	ldr	r1, [r3, #0]
 8008fbc:	4b3b      	ldr	r3, [pc, #236]	; (80090ac <tcp_process+0x598>)
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	4b3b      	ldr	r3, [pc, #236]	; (80090b0 <tcp_process+0x59c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008fc8:	4b3a      	ldr	r3, [pc, #232]	; (80090b4 <tcp_process+0x5a0>)
 8008fca:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fcc:	885b      	ldrh	r3, [r3, #2]
 8008fce:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008fd0:	4a38      	ldr	r2, [pc, #224]	; (80090b4 <tcp_process+0x5a0>)
 8008fd2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fd4:	8812      	ldrh	r2, [r2, #0]
 8008fd6:	b292      	uxth	r2, r2
 8008fd8:	9202      	str	r2, [sp, #8]
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	4b36      	ldr	r3, [pc, #216]	; (80090b8 <tcp_process+0x5a4>)
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	4b36      	ldr	r3, [pc, #216]	; (80090bc <tcp_process+0x5a8>)
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f002 fbd1 	bl	800b78c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008fea:	e167      	b.n	80092bc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008fec:	4b2d      	ldr	r3, [pc, #180]	; (80090a4 <tcp_process+0x590>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 8161 	beq.w	80092bc <tcp_process+0x7a8>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffe:	1e5a      	subs	r2, r3, #1
 8009000:	4b2b      	ldr	r3, [pc, #172]	; (80090b0 <tcp_process+0x59c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	429a      	cmp	r2, r3
 8009006:	f040 8159 	bne.w	80092bc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f002 f9b8 	bl	800b380 <tcp_rexmit>
      break;
 8009010:	e154      	b.n	80092bc <tcp_process+0x7a8>
 8009012:	e153      	b.n	80092bc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fa71 	bl	80094fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800901a:	4b2d      	ldr	r3, [pc, #180]	; (80090d0 <tcp_process+0x5bc>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	f003 0320 	and.w	r3, r3, #32
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 814c 	beq.w	80092c0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	8b5b      	ldrh	r3, [r3, #26]
 800902c:	f043 0302 	orr.w	r3, r3, #2
 8009030:	b29a      	uxth	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2207      	movs	r2, #7
 800903a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800903c:	e140      	b.n	80092c0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fa5c 	bl	80094fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009044:	4b22      	ldr	r3, [pc, #136]	; (80090d0 <tcp_process+0x5bc>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	f003 0320 	and.w	r3, r3, #32
 800904c:	2b00      	cmp	r3, #0
 800904e:	d071      	beq.n	8009134 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009050:	4b14      	ldr	r3, [pc, #80]	; (80090a4 <tcp_process+0x590>)
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	f003 0310 	and.w	r3, r3, #16
 8009058:	2b00      	cmp	r3, #0
 800905a:	d060      	beq.n	800911e <tcp_process+0x60a>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009060:	4b11      	ldr	r3, [pc, #68]	; (80090a8 <tcp_process+0x594>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	429a      	cmp	r2, r3
 8009066:	d15a      	bne.n	800911e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800906c:	2b00      	cmp	r3, #0
 800906e:	d156      	bne.n	800911e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	8b5b      	ldrh	r3, [r3, #26]
 8009074:	f043 0302 	orr.w	r3, r3, #2
 8009078:	b29a      	uxth	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7fe fdbc 	bl	8007bfc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009084:	4b13      	ldr	r3, [pc, #76]	; (80090d4 <tcp_process+0x5c0>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	429a      	cmp	r2, r3
 800908c:	d105      	bne.n	800909a <tcp_process+0x586>
 800908e:	4b11      	ldr	r3, [pc, #68]	; (80090d4 <tcp_process+0x5c0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	4a0f      	ldr	r2, [pc, #60]	; (80090d4 <tcp_process+0x5c0>)
 8009096:	6013      	str	r3, [r2, #0]
 8009098:	e02e      	b.n	80090f8 <tcp_process+0x5e4>
 800909a:	4b0e      	ldr	r3, [pc, #56]	; (80090d4 <tcp_process+0x5c0>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	617b      	str	r3, [r7, #20]
 80090a0:	e027      	b.n	80090f2 <tcp_process+0x5de>
 80090a2:	bf00      	nop
 80090a4:	24007af4 	.word	0x24007af4
 80090a8:	24007aec 	.word	0x24007aec
 80090ac:	24007af2 	.word	0x24007af2
 80090b0:	24007ae8 	.word	0x24007ae8
 80090b4:	24007ad8 	.word	0x24007ad8
 80090b8:	24004ba4 	.word	0x24004ba4
 80090bc:	24004ba8 	.word	0x24004ba8
 80090c0:	08010938 	.word	0x08010938
 80090c4:	08010bd8 	.word	0x08010bd8
 80090c8:	08010984 	.word	0x08010984
 80090cc:	24007af0 	.word	0x24007af0
 80090d0:	24007af5 	.word	0x24007af5
 80090d4:	24007abc 	.word	0x24007abc
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d104      	bne.n	80090ec <tcp_process+0x5d8>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	60da      	str	r2, [r3, #12]
 80090ea:	e005      	b.n	80090f8 <tcp_process+0x5e4>
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1ef      	bne.n	80090d8 <tcp_process+0x5c4>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	60da      	str	r2, [r3, #12]
 80090fe:	4b77      	ldr	r3, [pc, #476]	; (80092dc <tcp_process+0x7c8>)
 8009100:	2201      	movs	r2, #1
 8009102:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	220a      	movs	r2, #10
 8009108:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800910a:	4b75      	ldr	r3, [pc, #468]	; (80092e0 <tcp_process+0x7cc>)
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	60da      	str	r2, [r3, #12]
 8009112:	4a73      	ldr	r2, [pc, #460]	; (80092e0 <tcp_process+0x7cc>)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	f002 fcfa 	bl	800bb10 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800911c:	e0d2      	b.n	80092c4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	8b5b      	ldrh	r3, [r3, #26]
 8009122:	f043 0302 	orr.w	r3, r3, #2
 8009126:	b29a      	uxth	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2208      	movs	r2, #8
 8009130:	751a      	strb	r2, [r3, #20]
      break;
 8009132:	e0c7      	b.n	80092c4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009134:	4b6b      	ldr	r3, [pc, #428]	; (80092e4 <tcp_process+0x7d0>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	f003 0310 	and.w	r3, r3, #16
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 80c1 	beq.w	80092c4 <tcp_process+0x7b0>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009146:	4b68      	ldr	r3, [pc, #416]	; (80092e8 <tcp_process+0x7d4>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	429a      	cmp	r2, r3
 800914c:	f040 80ba 	bne.w	80092c4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009154:	2b00      	cmp	r3, #0
 8009156:	f040 80b5 	bne.w	80092c4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2206      	movs	r2, #6
 800915e:	751a      	strb	r2, [r3, #20]
      break;
 8009160:	e0b0      	b.n	80092c4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f9ca 	bl	80094fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009168:	4b60      	ldr	r3, [pc, #384]	; (80092ec <tcp_process+0x7d8>)
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	f003 0320 	and.w	r3, r3, #32
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 80a9 	beq.w	80092c8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	8b5b      	ldrh	r3, [r3, #26]
 800917a:	f043 0302 	orr.w	r3, r3, #2
 800917e:	b29a      	uxth	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7fe fd39 	bl	8007bfc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800918a:	4b59      	ldr	r3, [pc, #356]	; (80092f0 <tcp_process+0x7dc>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	429a      	cmp	r2, r3
 8009192:	d105      	bne.n	80091a0 <tcp_process+0x68c>
 8009194:	4b56      	ldr	r3, [pc, #344]	; (80092f0 <tcp_process+0x7dc>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	4a55      	ldr	r2, [pc, #340]	; (80092f0 <tcp_process+0x7dc>)
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	e013      	b.n	80091c8 <tcp_process+0x6b4>
 80091a0:	4b53      	ldr	r3, [pc, #332]	; (80092f0 <tcp_process+0x7dc>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	613b      	str	r3, [r7, #16]
 80091a6:	e00c      	b.n	80091c2 <tcp_process+0x6ae>
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d104      	bne.n	80091bc <tcp_process+0x6a8>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68da      	ldr	r2, [r3, #12]
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	60da      	str	r2, [r3, #12]
 80091ba:	e005      	b.n	80091c8 <tcp_process+0x6b4>
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	613b      	str	r3, [r7, #16]
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1ef      	bne.n	80091a8 <tcp_process+0x694>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	60da      	str	r2, [r3, #12]
 80091ce:	4b43      	ldr	r3, [pc, #268]	; (80092dc <tcp_process+0x7c8>)
 80091d0:	2201      	movs	r2, #1
 80091d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	220a      	movs	r2, #10
 80091d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80091da:	4b41      	ldr	r3, [pc, #260]	; (80092e0 <tcp_process+0x7cc>)
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	60da      	str	r2, [r3, #12]
 80091e2:	4a3f      	ldr	r2, [pc, #252]	; (80092e0 <tcp_process+0x7cc>)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	f002 fc92 	bl	800bb10 <tcp_timer_needed>
      }
      break;
 80091ec:	e06c      	b.n	80092c8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f984 	bl	80094fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80091f4:	4b3b      	ldr	r3, [pc, #236]	; (80092e4 <tcp_process+0x7d0>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	f003 0310 	and.w	r3, r3, #16
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d065      	beq.n	80092cc <tcp_process+0x7b8>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009204:	4b38      	ldr	r3, [pc, #224]	; (80092e8 <tcp_process+0x7d4>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	429a      	cmp	r2, r3
 800920a:	d15f      	bne.n	80092cc <tcp_process+0x7b8>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009210:	2b00      	cmp	r3, #0
 8009212:	d15b      	bne.n	80092cc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7fe fcf1 	bl	8007bfc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800921a:	4b35      	ldr	r3, [pc, #212]	; (80092f0 <tcp_process+0x7dc>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	429a      	cmp	r2, r3
 8009222:	d105      	bne.n	8009230 <tcp_process+0x71c>
 8009224:	4b32      	ldr	r3, [pc, #200]	; (80092f0 <tcp_process+0x7dc>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	4a31      	ldr	r2, [pc, #196]	; (80092f0 <tcp_process+0x7dc>)
 800922c:	6013      	str	r3, [r2, #0]
 800922e:	e013      	b.n	8009258 <tcp_process+0x744>
 8009230:	4b2f      	ldr	r3, [pc, #188]	; (80092f0 <tcp_process+0x7dc>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	60fb      	str	r3, [r7, #12]
 8009236:	e00c      	b.n	8009252 <tcp_process+0x73e>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	429a      	cmp	r2, r3
 8009240:	d104      	bne.n	800924c <tcp_process+0x738>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68da      	ldr	r2, [r3, #12]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	60da      	str	r2, [r3, #12]
 800924a:	e005      	b.n	8009258 <tcp_process+0x744>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1ef      	bne.n	8009238 <tcp_process+0x724>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	60da      	str	r2, [r3, #12]
 800925e:	4b1f      	ldr	r3, [pc, #124]	; (80092dc <tcp_process+0x7c8>)
 8009260:	2201      	movs	r2, #1
 8009262:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	220a      	movs	r2, #10
 8009268:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800926a:	4b1d      	ldr	r3, [pc, #116]	; (80092e0 <tcp_process+0x7cc>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	60da      	str	r2, [r3, #12]
 8009272:	4a1b      	ldr	r2, [pc, #108]	; (80092e0 <tcp_process+0x7cc>)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	f002 fc4a 	bl	800bb10 <tcp_timer_needed>
      }
      break;
 800927c:	e026      	b.n	80092cc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f93c 	bl	80094fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009284:	4b17      	ldr	r3, [pc, #92]	; (80092e4 <tcp_process+0x7d0>)
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	f003 0310 	and.w	r3, r3, #16
 800928c:	2b00      	cmp	r3, #0
 800928e:	d01f      	beq.n	80092d0 <tcp_process+0x7bc>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009294:	4b14      	ldr	r3, [pc, #80]	; (80092e8 <tcp_process+0x7d4>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	429a      	cmp	r2, r3
 800929a:	d119      	bne.n	80092d0 <tcp_process+0x7bc>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d115      	bne.n	80092d0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80092a4:	4b11      	ldr	r3, [pc, #68]	; (80092ec <tcp_process+0x7d8>)
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	f043 0310 	orr.w	r3, r3, #16
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	4b0f      	ldr	r3, [pc, #60]	; (80092ec <tcp_process+0x7d8>)
 80092b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80092b2:	e00d      	b.n	80092d0 <tcp_process+0x7bc>
    default:
      break;
 80092b4:	bf00      	nop
 80092b6:	e00c      	b.n	80092d2 <tcp_process+0x7be>
      break;
 80092b8:	bf00      	nop
 80092ba:	e00a      	b.n	80092d2 <tcp_process+0x7be>
      break;
 80092bc:	bf00      	nop
 80092be:	e008      	b.n	80092d2 <tcp_process+0x7be>
      break;
 80092c0:	bf00      	nop
 80092c2:	e006      	b.n	80092d2 <tcp_process+0x7be>
      break;
 80092c4:	bf00      	nop
 80092c6:	e004      	b.n	80092d2 <tcp_process+0x7be>
      break;
 80092c8:	bf00      	nop
 80092ca:	e002      	b.n	80092d2 <tcp_process+0x7be>
      break;
 80092cc:	bf00      	nop
 80092ce:	e000      	b.n	80092d2 <tcp_process+0x7be>
      break;
 80092d0:	bf00      	nop
  }
  return ERR_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3724      	adds	r7, #36	; 0x24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd90      	pop	{r4, r7, pc}
 80092dc:	24007ac4 	.word	0x24007ac4
 80092e0:	24007ac0 	.word	0x24007ac0
 80092e4:	24007af4 	.word	0x24007af4
 80092e8:	24007aec 	.word	0x24007aec
 80092ec:	24007af5 	.word	0x24007af5
 80092f0:	24007abc 	.word	0x24007abc

080092f4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80092f4:	b590      	push	{r4, r7, lr}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d106      	bne.n	8009312 <tcp_oos_insert_segment+0x1e>
 8009304:	4b3b      	ldr	r3, [pc, #236]	; (80093f4 <tcp_oos_insert_segment+0x100>)
 8009306:	f240 421f 	movw	r2, #1055	; 0x41f
 800930a:	493b      	ldr	r1, [pc, #236]	; (80093f8 <tcp_oos_insert_segment+0x104>)
 800930c:	483b      	ldr	r0, [pc, #236]	; (80093fc <tcp_oos_insert_segment+0x108>)
 800930e:	f005 fadd 	bl	800e8cc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	899b      	ldrh	r3, [r3, #12]
 8009318:	b29b      	uxth	r3, r3
 800931a:	4618      	mov	r0, r3
 800931c:	f7fb fbf8 	bl	8004b10 <lwip_htons>
 8009320:	4603      	mov	r3, r0
 8009322:	b2db      	uxtb	r3, r3
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	2b00      	cmp	r3, #0
 800932a:	d028      	beq.n	800937e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800932c:	6838      	ldr	r0, [r7, #0]
 800932e:	f7fe fa63 	bl	80077f8 <tcp_segs_free>
    next = NULL;
 8009332:	2300      	movs	r3, #0
 8009334:	603b      	str	r3, [r7, #0]
 8009336:	e056      	b.n	80093e6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	899b      	ldrh	r3, [r3, #12]
 800933e:	b29b      	uxth	r3, r3
 8009340:	4618      	mov	r0, r3
 8009342:	f7fb fbe5 	bl	8004b10 <lwip_htons>
 8009346:	4603      	mov	r3, r0
 8009348:	b2db      	uxtb	r3, r3
 800934a:	f003 0301 	and.w	r3, r3, #1
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00d      	beq.n	800936e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	899b      	ldrh	r3, [r3, #12]
 8009358:	b29c      	uxth	r4, r3
 800935a:	2001      	movs	r0, #1
 800935c:	f7fb fbd8 	bl	8004b10 <lwip_htons>
 8009360:	4603      	mov	r3, r0
 8009362:	461a      	mov	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	4322      	orrs	r2, r4
 800936a:	b292      	uxth	r2, r2
 800936c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f7fe fa52 	bl	8007822 <tcp_seg_free>
    while (next &&
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00e      	beq.n	80093a2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	891b      	ldrh	r3, [r3, #8]
 8009388:	461a      	mov	r2, r3
 800938a:	4b1d      	ldr	r3, [pc, #116]	; (8009400 <tcp_oos_insert_segment+0x10c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	441a      	add	r2, r3
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	6839      	ldr	r1, [r7, #0]
 8009398:	8909      	ldrh	r1, [r1, #8]
 800939a:	440b      	add	r3, r1
 800939c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800939e:	2b00      	cmp	r3, #0
 80093a0:	daca      	bge.n	8009338 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d01e      	beq.n	80093e6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	891b      	ldrh	r3, [r3, #8]
 80093ac:	461a      	mov	r2, r3
 80093ae:	4b14      	ldr	r3, [pc, #80]	; (8009400 <tcp_oos_insert_segment+0x10c>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	441a      	add	r2, r3
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	1ad3      	subs	r3, r2, r3
    if (next &&
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dd12      	ble.n	80093e6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	4b0d      	ldr	r3, [pc, #52]	; (8009400 <tcp_oos_insert_segment+0x10c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	891b      	ldrh	r3, [r3, #8]
 80093de:	4619      	mov	r1, r3
 80093e0:	4610      	mov	r0, r2
 80093e2:	f7fc fe25 	bl	8006030 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	601a      	str	r2, [r3, #0]
}
 80093ec:	bf00      	nop
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd90      	pop	{r4, r7, pc}
 80093f4:	08010938 	.word	0x08010938
 80093f8:	08010bf8 	.word	0x08010bf8
 80093fc:	08010984 	.word	0x08010984
 8009400:	24007ae8 	.word	0x24007ae8

08009404 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009404:	b5b0      	push	{r4, r5, r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009412:	e03e      	b.n	8009492 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	4618      	mov	r0, r3
 8009424:	f7fd f812 	bl	800644c <pbuf_clen>
 8009428:	4603      	mov	r3, r0
 800942a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009432:	8a7a      	ldrh	r2, [r7, #18]
 8009434:	429a      	cmp	r2, r3
 8009436:	d906      	bls.n	8009446 <tcp_free_acked_segments+0x42>
 8009438:	4b2a      	ldr	r3, [pc, #168]	; (80094e4 <tcp_free_acked_segments+0xe0>)
 800943a:	f240 4257 	movw	r2, #1111	; 0x457
 800943e:	492a      	ldr	r1, [pc, #168]	; (80094e8 <tcp_free_acked_segments+0xe4>)
 8009440:	482a      	ldr	r0, [pc, #168]	; (80094ec <tcp_free_acked_segments+0xe8>)
 8009442:	f005 fa43 	bl	800e8cc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800944c:	8a7b      	ldrh	r3, [r7, #18]
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	b29a      	uxth	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	891a      	ldrh	r2, [r3, #8]
 800945c:	4b24      	ldr	r3, [pc, #144]	; (80094f0 <tcp_free_acked_segments+0xec>)
 800945e:	881b      	ldrh	r3, [r3, #0]
 8009460:	4413      	add	r3, r2
 8009462:	b29a      	uxth	r2, r3
 8009464:	4b22      	ldr	r3, [pc, #136]	; (80094f0 <tcp_free_acked_segments+0xec>)
 8009466:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009468:	6978      	ldr	r0, [r7, #20]
 800946a:	f7fe f9da 	bl	8007822 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00c      	beq.n	8009492 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d109      	bne.n	8009492 <tcp_free_acked_segments+0x8e>
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d106      	bne.n	8009492 <tcp_free_acked_segments+0x8e>
 8009484:	4b17      	ldr	r3, [pc, #92]	; (80094e4 <tcp_free_acked_segments+0xe0>)
 8009486:	f240 4261 	movw	r2, #1121	; 0x461
 800948a:	491a      	ldr	r1, [pc, #104]	; (80094f4 <tcp_free_acked_segments+0xf0>)
 800948c:	4817      	ldr	r0, [pc, #92]	; (80094ec <tcp_free_acked_segments+0xe8>)
 800948e:	f005 fa1d 	bl	800e8cc <iprintf>
  while (seg_list != NULL &&
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d020      	beq.n	80094da <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fb fb4b 	bl	8004b3a <lwip_htonl>
 80094a4:	4604      	mov	r4, r0
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	891b      	ldrh	r3, [r3, #8]
 80094aa:	461d      	mov	r5, r3
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	899b      	ldrh	r3, [r3, #12]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fb fb2b 	bl	8004b10 <lwip_htons>
 80094ba:	4603      	mov	r3, r0
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	f003 0303 	and.w	r3, r3, #3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <tcp_free_acked_segments+0xc6>
 80094c6:	2301      	movs	r3, #1
 80094c8:	e000      	b.n	80094cc <tcp_free_acked_segments+0xc8>
 80094ca:	2300      	movs	r3, #0
 80094cc:	442b      	add	r3, r5
 80094ce:	18e2      	adds	r2, r4, r3
 80094d0:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <tcp_free_acked_segments+0xf4>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	dd9c      	ble.n	8009414 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80094da:	68bb      	ldr	r3, [r7, #8]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3718      	adds	r7, #24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bdb0      	pop	{r4, r5, r7, pc}
 80094e4:	08010938 	.word	0x08010938
 80094e8:	08010c20 	.word	0x08010c20
 80094ec:	08010984 	.word	0x08010984
 80094f0:	24007af0 	.word	0x24007af0
 80094f4:	08010c48 	.word	0x08010c48
 80094f8:	24007aec 	.word	0x24007aec

080094fc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80094fc:	b5b0      	push	{r4, r5, r7, lr}
 80094fe:	b094      	sub	sp, #80	; 0x50
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009504:	2300      	movs	r3, #0
 8009506:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d106      	bne.n	800951c <tcp_receive+0x20>
 800950e:	4b91      	ldr	r3, [pc, #580]	; (8009754 <tcp_receive+0x258>)
 8009510:	f240 427b 	movw	r2, #1147	; 0x47b
 8009514:	4990      	ldr	r1, [pc, #576]	; (8009758 <tcp_receive+0x25c>)
 8009516:	4891      	ldr	r0, [pc, #580]	; (800975c <tcp_receive+0x260>)
 8009518:	f005 f9d8 	bl	800e8cc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	7d1b      	ldrb	r3, [r3, #20]
 8009520:	2b03      	cmp	r3, #3
 8009522:	d806      	bhi.n	8009532 <tcp_receive+0x36>
 8009524:	4b8b      	ldr	r3, [pc, #556]	; (8009754 <tcp_receive+0x258>)
 8009526:	f240 427c 	movw	r2, #1148	; 0x47c
 800952a:	498d      	ldr	r1, [pc, #564]	; (8009760 <tcp_receive+0x264>)
 800952c:	488b      	ldr	r0, [pc, #556]	; (800975c <tcp_receive+0x260>)
 800952e:	f005 f9cd 	bl	800e8cc <iprintf>

  if (flags & TCP_ACK) {
 8009532:	4b8c      	ldr	r3, [pc, #560]	; (8009764 <tcp_receive+0x268>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	f003 0310 	and.w	r3, r3, #16
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 8264 	beq.w	8009a08 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009546:	461a      	mov	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800954c:	4413      	add	r3, r2
 800954e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009554:	4b84      	ldr	r3, [pc, #528]	; (8009768 <tcp_receive+0x26c>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	db1b      	blt.n	8009596 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009562:	4b81      	ldr	r3, [pc, #516]	; (8009768 <tcp_receive+0x26c>)
 8009564:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009566:	429a      	cmp	r2, r3
 8009568:	d106      	bne.n	8009578 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800956e:	4b7f      	ldr	r3, [pc, #508]	; (800976c <tcp_receive+0x270>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	db0e      	blt.n	8009596 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800957c:	4b7b      	ldr	r3, [pc, #492]	; (800976c <tcp_receive+0x270>)
 800957e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009580:	429a      	cmp	r2, r3
 8009582:	d125      	bne.n	80095d0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009584:	4b7a      	ldr	r3, [pc, #488]	; (8009770 <tcp_receive+0x274>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	89db      	ldrh	r3, [r3, #14]
 800958a:	b29a      	uxth	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009592:	429a      	cmp	r2, r3
 8009594:	d91c      	bls.n	80095d0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009596:	4b76      	ldr	r3, [pc, #472]	; (8009770 <tcp_receive+0x274>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	89db      	ldrh	r3, [r3, #14]
 800959c:	b29a      	uxth	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d205      	bcs.n	80095c0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80095c0:	4b69      	ldr	r3, [pc, #420]	; (8009768 <tcp_receive+0x26c>)
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80095c8:	4b68      	ldr	r3, [pc, #416]	; (800976c <tcp_receive+0x270>)
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80095d0:	4b66      	ldr	r3, [pc, #408]	; (800976c <tcp_receive+0x270>)
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	2b00      	cmp	r3, #0
 80095dc:	dc58      	bgt.n	8009690 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80095de:	4b65      	ldr	r3, [pc, #404]	; (8009774 <tcp_receive+0x278>)
 80095e0:	881b      	ldrh	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d14b      	bne.n	800967e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80095f0:	4413      	add	r3, r2
 80095f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d142      	bne.n	800967e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80095fe:	2b00      	cmp	r3, #0
 8009600:	db3d      	blt.n	800967e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009606:	4b59      	ldr	r3, [pc, #356]	; (800976c <tcp_receive+0x270>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	429a      	cmp	r2, r3
 800960c:	d137      	bne.n	800967e <tcp_receive+0x182>
              found_dupack = 1;
 800960e:	2301      	movs	r3, #1
 8009610:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009618:	2bff      	cmp	r3, #255	; 0xff
 800961a:	d007      	beq.n	800962c <tcp_receive+0x130>
                ++pcb->dupacks;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009622:	3301      	adds	r3, #1
 8009624:	b2da      	uxtb	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009632:	2b03      	cmp	r3, #3
 8009634:	d91b      	bls.n	800966e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009640:	4413      	add	r3, r2
 8009642:	b29a      	uxth	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800964a:	429a      	cmp	r2, r3
 800964c:	d30a      	bcc.n	8009664 <tcp_receive+0x168>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009658:	4413      	add	r3, r2
 800965a:	b29a      	uxth	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009662:	e004      	b.n	800966e <tcp_receive+0x172>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800966a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009674:	2b02      	cmp	r3, #2
 8009676:	d902      	bls.n	800967e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f001 feed 	bl	800b458 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800967e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009680:	2b00      	cmp	r3, #0
 8009682:	f040 8161 	bne.w	8009948 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800968e:	e15b      	b.n	8009948 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009690:	4b36      	ldr	r3, [pc, #216]	; (800976c <tcp_receive+0x270>)
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	3b01      	subs	r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	f2c0 814e 	blt.w	800993e <tcp_receive+0x442>
 80096a2:	4b32      	ldr	r3, [pc, #200]	; (800976c <tcp_receive+0x270>)
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f300 8146 	bgt.w	800993e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	8b5b      	ldrh	r3, [r3, #26]
 80096b6:	f003 0304 	and.w	r3, r3, #4
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d010      	beq.n	80096e0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	8b5b      	ldrh	r3, [r3, #26]
 80096c2:	f023 0304 	bic.w	r3, r3, #4
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80096ee:	10db      	asrs	r3, r3, #3
 80096f0:	b21b      	sxth	r3, r3
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	4413      	add	r3, r2
 80096fe:	b29b      	uxth	r3, r3
 8009700:	b21a      	sxth	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009708:	4b18      	ldr	r3, [pc, #96]	; (800976c <tcp_receive+0x270>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	b29a      	uxth	r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009712:	b29b      	uxth	r3, r3
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009720:	4b12      	ldr	r3, [pc, #72]	; (800976c <tcp_receive+0x270>)
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	7d1b      	ldrb	r3, [r3, #20]
 800972c:	2b03      	cmp	r3, #3
 800972e:	f240 8097 	bls.w	8009860 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800973e:	429a      	cmp	r2, r3
 8009740:	d245      	bcs.n	80097ce <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	8b5b      	ldrh	r3, [r3, #26]
 8009746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800974a:	2b00      	cmp	r3, #0
 800974c:	d014      	beq.n	8009778 <tcp_receive+0x27c>
 800974e:	2301      	movs	r3, #1
 8009750:	e013      	b.n	800977a <tcp_receive+0x27e>
 8009752:	bf00      	nop
 8009754:	08010938 	.word	0x08010938
 8009758:	08010c68 	.word	0x08010c68
 800975c:	08010984 	.word	0x08010984
 8009760:	08010c84 	.word	0x08010c84
 8009764:	24007af4 	.word	0x24007af4
 8009768:	24007ae8 	.word	0x24007ae8
 800976c:	24007aec 	.word	0x24007aec
 8009770:	24007ad8 	.word	0x24007ad8
 8009774:	24007af2 	.word	0x24007af2
 8009778:	2302      	movs	r3, #2
 800977a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800977e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009782:	b29a      	uxth	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009788:	fb12 f303 	smulbb	r3, r2, r3
 800978c:	b29b      	uxth	r3, r3
 800978e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009790:	4293      	cmp	r3, r2
 8009792:	bf28      	it	cs
 8009794:	4613      	movcs	r3, r2
 8009796:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800979e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80097a0:	4413      	add	r3, r2
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d309      	bcc.n	80097c2 <tcp_receive+0x2c6>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80097b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80097b6:	4413      	add	r3, r2
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80097c0:	e04e      	b.n	8009860 <tcp_receive+0x364>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80097cc:	e048      	b.n	8009860 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80097d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80097d6:	4413      	add	r3, r2
 80097d8:	b29a      	uxth	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d309      	bcc.n	80097f8 <tcp_receive+0x2fc>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80097ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80097ec:	4413      	add	r3, r2
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80097f6:	e004      	b.n	8009802 <tcp_receive+0x306>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800980e:	429a      	cmp	r2, r3
 8009810:	d326      	bcc.n	8009860 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	b29a      	uxth	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009832:	4413      	add	r3, r2
 8009834:	b29a      	uxth	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800983c:	429a      	cmp	r2, r3
 800983e:	d30a      	bcc.n	8009856 <tcp_receive+0x35a>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800984a:	4413      	add	r3, r2
 800984c:	b29a      	uxth	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009854:	e004      	b.n	8009860 <tcp_receive+0x364>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800985c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009868:	4a98      	ldr	r2, [pc, #608]	; (8009acc <tcp_receive+0x5d0>)
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f7ff fdca 	bl	8009404 <tcp_free_acked_segments>
 8009870:	4602      	mov	r2, r0
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800987e:	4a94      	ldr	r2, [pc, #592]	; (8009ad0 <tcp_receive+0x5d4>)
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7ff fdbf 	bl	8009404 <tcp_free_acked_segments>
 8009886:	4602      	mov	r2, r0
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009890:	2b00      	cmp	r3, #0
 8009892:	d104      	bne.n	800989e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800989a:	861a      	strh	r2, [r3, #48]	; 0x30
 800989c:	e002      	b.n	80098a4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d103      	bne.n	80098ba <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80098c0:	4b84      	ldr	r3, [pc, #528]	; (8009ad4 <tcp_receive+0x5d8>)
 80098c2:	881b      	ldrh	r3, [r3, #0]
 80098c4:	4413      	add	r3, r2
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	8b5b      	ldrh	r3, [r3, #26]
 80098d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d035      	beq.n	8009946 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d118      	bne.n	8009914 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00c      	beq.n	8009904 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fb f91f 	bl	8004b3a <lwip_htonl>
 80098fc:	4603      	mov	r3, r0
 80098fe:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009900:	2b00      	cmp	r3, #0
 8009902:	dc20      	bgt.n	8009946 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	8b5b      	ldrh	r3, [r3, #26]
 8009908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800990c:	b29a      	uxth	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009912:	e018      	b.n	8009946 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	4618      	mov	r0, r3
 8009922:	f7fb f90a 	bl	8004b3a <lwip_htonl>
 8009926:	4603      	mov	r3, r0
 8009928:	1ae3      	subs	r3, r4, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	dc0b      	bgt.n	8009946 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	8b5b      	ldrh	r3, [r3, #26]
 8009932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009936:	b29a      	uxth	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800993c:	e003      	b.n	8009946 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 ff76 	bl	800b830 <tcp_send_empty_ack>
 8009944:	e000      	b.n	8009948 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009946:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994c:	2b00      	cmp	r3, #0
 800994e:	d05b      	beq.n	8009a08 <tcp_receive+0x50c>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009954:	4b60      	ldr	r3, [pc, #384]	; (8009ad8 <tcp_receive+0x5dc>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	da54      	bge.n	8009a08 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800995e:	4b5f      	ldr	r3, [pc, #380]	; (8009adc <tcp_receive+0x5e0>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	b29a      	uxth	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009968:	b29b      	uxth	r3, r3
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	b29b      	uxth	r3, r3
 800996e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009972:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800997c:	10db      	asrs	r3, r3, #3
 800997e:	b21b      	sxth	r3, r3
 8009980:	b29b      	uxth	r3, r3
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	b29b      	uxth	r3, r3
 8009986:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009990:	b29a      	uxth	r2, r3
 8009992:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009996:	4413      	add	r3, r2
 8009998:	b29b      	uxth	r3, r3
 800999a:	b21a      	sxth	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80099a0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	da05      	bge.n	80099b4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80099a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80099ac:	425b      	negs	r3, r3
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80099b4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80099be:	109b      	asrs	r3, r3, #2
 80099c0:	b21b      	sxth	r3, r3
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80099d8:	4413      	add	r3, r2
 80099da:	b29b      	uxth	r3, r3
 80099dc:	b21a      	sxth	r2, r3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80099e8:	10db      	asrs	r3, r3, #3
 80099ea:	b21b      	sxth	r3, r3
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	4413      	add	r3, r2
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	b21a      	sxth	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009a08:	4b35      	ldr	r3, [pc, #212]	; (8009ae0 <tcp_receive+0x5e4>)
 8009a0a:	881b      	ldrh	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 84e2 	beq.w	800a3d6 <tcp_receive+0xeda>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	7d1b      	ldrb	r3, [r3, #20]
 8009a16:	2b06      	cmp	r3, #6
 8009a18:	f200 84dd 	bhi.w	800a3d6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a20:	4b30      	ldr	r3, [pc, #192]	; (8009ae4 <tcp_receive+0x5e8>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	3b01      	subs	r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f2c0 808f 	blt.w	8009b4c <tcp_receive+0x650>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a32:	4b2b      	ldr	r3, [pc, #172]	; (8009ae0 <tcp_receive+0x5e4>)
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	4619      	mov	r1, r3
 8009a38:	4b2a      	ldr	r3, [pc, #168]	; (8009ae4 <tcp_receive+0x5e8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	440b      	add	r3, r1
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	3301      	adds	r3, #1
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f300 8082 	bgt.w	8009b4c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009a48:	4b27      	ldr	r3, [pc, #156]	; (8009ae8 <tcp_receive+0x5ec>)
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a52:	4b24      	ldr	r3, [pc, #144]	; (8009ae4 <tcp_receive+0x5e8>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009a5a:	4b23      	ldr	r3, [pc, #140]	; (8009ae8 <tcp_receive+0x5ec>)
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d106      	bne.n	8009a70 <tcp_receive+0x574>
 8009a62:	4b22      	ldr	r3, [pc, #136]	; (8009aec <tcp_receive+0x5f0>)
 8009a64:	f240 5294 	movw	r2, #1428	; 0x594
 8009a68:	4921      	ldr	r1, [pc, #132]	; (8009af0 <tcp_receive+0x5f4>)
 8009a6a:	4822      	ldr	r0, [pc, #136]	; (8009af4 <tcp_receive+0x5f8>)
 8009a6c:	f004 ff2e 	bl	800e8cc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d906      	bls.n	8009a88 <tcp_receive+0x58c>
 8009a7a:	4b1c      	ldr	r3, [pc, #112]	; (8009aec <tcp_receive+0x5f0>)
 8009a7c:	f240 5295 	movw	r2, #1429	; 0x595
 8009a80:	491d      	ldr	r1, [pc, #116]	; (8009af8 <tcp_receive+0x5fc>)
 8009a82:	481c      	ldr	r0, [pc, #112]	; (8009af4 <tcp_receive+0x5f8>)
 8009a84:	f004 ff22 	bl	800e8cc <iprintf>
      off = (u16_t)off32;
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009a8e:	4b16      	ldr	r3, [pc, #88]	; (8009ae8 <tcp_receive+0x5ec>)
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	891b      	ldrh	r3, [r3, #8]
 8009a94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d906      	bls.n	8009aaa <tcp_receive+0x5ae>
 8009a9c:	4b13      	ldr	r3, [pc, #76]	; (8009aec <tcp_receive+0x5f0>)
 8009a9e:	f240 5297 	movw	r2, #1431	; 0x597
 8009aa2:	4916      	ldr	r1, [pc, #88]	; (8009afc <tcp_receive+0x600>)
 8009aa4:	4813      	ldr	r0, [pc, #76]	; (8009af4 <tcp_receive+0x5f8>)
 8009aa6:	f004 ff11 	bl	800e8cc <iprintf>
      inseg.len -= off;
 8009aaa:	4b0f      	ldr	r3, [pc, #60]	; (8009ae8 <tcp_receive+0x5ec>)
 8009aac:	891a      	ldrh	r2, [r3, #8]
 8009aae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	4b0c      	ldr	r3, [pc, #48]	; (8009ae8 <tcp_receive+0x5ec>)
 8009ab8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009aba:	4b0b      	ldr	r3, [pc, #44]	; (8009ae8 <tcp_receive+0x5ec>)
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	891a      	ldrh	r2, [r3, #8]
 8009ac0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009ac8:	e02a      	b.n	8009b20 <tcp_receive+0x624>
 8009aca:	bf00      	nop
 8009acc:	08010ca0 	.word	0x08010ca0
 8009ad0:	08010ca8 	.word	0x08010ca8
 8009ad4:	24007af0 	.word	0x24007af0
 8009ad8:	24007aec 	.word	0x24007aec
 8009adc:	24007ab0 	.word	0x24007ab0
 8009ae0:	24007af2 	.word	0x24007af2
 8009ae4:	24007ae8 	.word	0x24007ae8
 8009ae8:	24007ac8 	.word	0x24007ac8
 8009aec:	08010938 	.word	0x08010938
 8009af0:	08010cb0 	.word	0x08010cb0
 8009af4:	08010984 	.word	0x08010984
 8009af8:	08010cc0 	.word	0x08010cc0
 8009afc:	08010cd0 	.word	0x08010cd0
        off -= p->len;
 8009b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b02:	895b      	ldrh	r3, [r3, #10]
 8009b04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b10:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009b12:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b16:	2200      	movs	r2, #0
 8009b18:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b22:	895b      	ldrh	r3, [r3, #10]
 8009b24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d8e9      	bhi.n	8009b00 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009b2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009b30:	4619      	mov	r1, r3
 8009b32:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009b34:	f7fc fb7c 	bl	8006230 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3c:	4a91      	ldr	r2, [pc, #580]	; (8009d84 <tcp_receive+0x888>)
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	4b91      	ldr	r3, [pc, #580]	; (8009d88 <tcp_receive+0x88c>)
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	4a8f      	ldr	r2, [pc, #572]	; (8009d84 <tcp_receive+0x888>)
 8009b46:	6812      	ldr	r2, [r2, #0]
 8009b48:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009b4a:	e00d      	b.n	8009b68 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009b4c:	4b8d      	ldr	r3, [pc, #564]	; (8009d84 <tcp_receive+0x888>)
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	da06      	bge.n	8009b68 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	8b5b      	ldrh	r3, [r3, #26]
 8009b5e:	f043 0302 	orr.w	r3, r3, #2
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009b68:	4b86      	ldr	r3, [pc, #536]	; (8009d84 <tcp_receive+0x888>)
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f2c0 842a 	blt.w	800a3cc <tcp_receive+0xed0>
 8009b78:	4b82      	ldr	r3, [pc, #520]	; (8009d84 <tcp_receive+0x888>)
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b80:	6879      	ldr	r1, [r7, #4]
 8009b82:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b84:	440b      	add	r3, r1
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	3301      	adds	r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f300 841e 	bgt.w	800a3cc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b94:	4b7b      	ldr	r3, [pc, #492]	; (8009d84 <tcp_receive+0x888>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	f040 829a 	bne.w	800a0d2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009b9e:	4b7a      	ldr	r3, [pc, #488]	; (8009d88 <tcp_receive+0x88c>)
 8009ba0:	891c      	ldrh	r4, [r3, #8]
 8009ba2:	4b79      	ldr	r3, [pc, #484]	; (8009d88 <tcp_receive+0x88c>)
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	899b      	ldrh	r3, [r3, #12]
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fa ffb0 	bl	8004b10 <lwip_htons>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 0303 	and.w	r3, r3, #3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d001      	beq.n	8009bc0 <tcp_receive+0x6c4>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e000      	b.n	8009bc2 <tcp_receive+0x6c6>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4423      	add	r3, r4
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	4b71      	ldr	r3, [pc, #452]	; (8009d8c <tcp_receive+0x890>)
 8009bc8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009bce:	4b6f      	ldr	r3, [pc, #444]	; (8009d8c <tcp_receive+0x890>)
 8009bd0:	881b      	ldrh	r3, [r3, #0]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d275      	bcs.n	8009cc2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009bd6:	4b6c      	ldr	r3, [pc, #432]	; (8009d88 <tcp_receive+0x88c>)
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	899b      	ldrh	r3, [r3, #12]
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fa ff96 	bl	8004b10 <lwip_htons>
 8009be4:	4603      	mov	r3, r0
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	f003 0301 	and.w	r3, r3, #1
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d01f      	beq.n	8009c30 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009bf0:	4b65      	ldr	r3, [pc, #404]	; (8009d88 <tcp_receive+0x88c>)
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	899b      	ldrh	r3, [r3, #12]
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	b21b      	sxth	r3, r3
 8009bfa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009bfe:	b21c      	sxth	r4, r3
 8009c00:	4b61      	ldr	r3, [pc, #388]	; (8009d88 <tcp_receive+0x88c>)
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	899b      	ldrh	r3, [r3, #12]
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fa ff81 	bl	8004b10 <lwip_htons>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fa ff78 	bl	8004b10 <lwip_htons>
 8009c20:	4603      	mov	r3, r0
 8009c22:	b21b      	sxth	r3, r3
 8009c24:	4323      	orrs	r3, r4
 8009c26:	b21a      	sxth	r2, r3
 8009c28:	4b57      	ldr	r3, [pc, #348]	; (8009d88 <tcp_receive+0x88c>)
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	b292      	uxth	r2, r2
 8009c2e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c34:	4b54      	ldr	r3, [pc, #336]	; (8009d88 <tcp_receive+0x88c>)
 8009c36:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009c38:	4b53      	ldr	r3, [pc, #332]	; (8009d88 <tcp_receive+0x88c>)
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	899b      	ldrh	r3, [r3, #12]
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fa ff65 	bl	8004b10 <lwip_htons>
 8009c46:	4603      	mov	r3, r0
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	f003 0302 	and.w	r3, r3, #2
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d005      	beq.n	8009c5e <tcp_receive+0x762>
            inseg.len -= 1;
 8009c52:	4b4d      	ldr	r3, [pc, #308]	; (8009d88 <tcp_receive+0x88c>)
 8009c54:	891b      	ldrh	r3, [r3, #8]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	4b4b      	ldr	r3, [pc, #300]	; (8009d88 <tcp_receive+0x88c>)
 8009c5c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009c5e:	4b4a      	ldr	r3, [pc, #296]	; (8009d88 <tcp_receive+0x88c>)
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	4a49      	ldr	r2, [pc, #292]	; (8009d88 <tcp_receive+0x88c>)
 8009c64:	8912      	ldrh	r2, [r2, #8]
 8009c66:	4611      	mov	r1, r2
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fc f9e1 	bl	8006030 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009c6e:	4b46      	ldr	r3, [pc, #280]	; (8009d88 <tcp_receive+0x88c>)
 8009c70:	891c      	ldrh	r4, [r3, #8]
 8009c72:	4b45      	ldr	r3, [pc, #276]	; (8009d88 <tcp_receive+0x88c>)
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	899b      	ldrh	r3, [r3, #12]
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fa ff48 	bl	8004b10 <lwip_htons>
 8009c80:	4603      	mov	r3, r0
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	f003 0303 	and.w	r3, r3, #3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <tcp_receive+0x794>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e000      	b.n	8009c92 <tcp_receive+0x796>
 8009c90:	2300      	movs	r3, #0
 8009c92:	4423      	add	r3, r4
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	4b3d      	ldr	r3, [pc, #244]	; (8009d8c <tcp_receive+0x890>)
 8009c98:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009c9a:	4b3c      	ldr	r3, [pc, #240]	; (8009d8c <tcp_receive+0x890>)
 8009c9c:	881b      	ldrh	r3, [r3, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	4b38      	ldr	r3, [pc, #224]	; (8009d84 <tcp_receive+0x888>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	441a      	add	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009caa:	6879      	ldr	r1, [r7, #4]
 8009cac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009cae:	440b      	add	r3, r1
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d006      	beq.n	8009cc2 <tcp_receive+0x7c6>
 8009cb4:	4b36      	ldr	r3, [pc, #216]	; (8009d90 <tcp_receive+0x894>)
 8009cb6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009cba:	4936      	ldr	r1, [pc, #216]	; (8009d94 <tcp_receive+0x898>)
 8009cbc:	4836      	ldr	r0, [pc, #216]	; (8009d98 <tcp_receive+0x89c>)
 8009cbe:	f004 fe05 	bl	800e8cc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 80e7 	beq.w	8009e9a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009ccc:	4b2e      	ldr	r3, [pc, #184]	; (8009d88 <tcp_receive+0x88c>)
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	899b      	ldrh	r3, [r3, #12]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fa ff1b 	bl	8004b10 <lwip_htons>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d010      	beq.n	8009d08 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009ce6:	e00a      	b.n	8009cfe <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cec:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f7fd fd92 	bl	8007822 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1f0      	bne.n	8009ce8 <tcp_receive+0x7ec>
 8009d06:	e0c8      	b.n	8009e9a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009d0e:	e052      	b.n	8009db6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	899b      	ldrh	r3, [r3, #12]
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fa fef9 	bl	8004b10 <lwip_htons>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d03d      	beq.n	8009da6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009d2a:	4b17      	ldr	r3, [pc, #92]	; (8009d88 <tcp_receive+0x88c>)
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	899b      	ldrh	r3, [r3, #12]
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fa feec 	bl	8004b10 <lwip_htons>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d130      	bne.n	8009da6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009d44:	4b10      	ldr	r3, [pc, #64]	; (8009d88 <tcp_receive+0x88c>)
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	899b      	ldrh	r3, [r3, #12]
 8009d4a:	b29c      	uxth	r4, r3
 8009d4c:	2001      	movs	r0, #1
 8009d4e:	f7fa fedf 	bl	8004b10 <lwip_htons>
 8009d52:	4603      	mov	r3, r0
 8009d54:	461a      	mov	r2, r3
 8009d56:	4b0c      	ldr	r3, [pc, #48]	; (8009d88 <tcp_receive+0x88c>)
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	4322      	orrs	r2, r4
 8009d5c:	b292      	uxth	r2, r2
 8009d5e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009d60:	4b09      	ldr	r3, [pc, #36]	; (8009d88 <tcp_receive+0x88c>)
 8009d62:	891c      	ldrh	r4, [r3, #8]
 8009d64:	4b08      	ldr	r3, [pc, #32]	; (8009d88 <tcp_receive+0x88c>)
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	899b      	ldrh	r3, [r3, #12]
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fa fecf 	bl	8004b10 <lwip_htons>
 8009d72:	4603      	mov	r3, r0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	f003 0303 	and.w	r3, r3, #3
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00e      	beq.n	8009d9c <tcp_receive+0x8a0>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e00d      	b.n	8009d9e <tcp_receive+0x8a2>
 8009d82:	bf00      	nop
 8009d84:	24007ae8 	.word	0x24007ae8
 8009d88:	24007ac8 	.word	0x24007ac8
 8009d8c:	24007af2 	.word	0x24007af2
 8009d90:	08010938 	.word	0x08010938
 8009d94:	08010ce0 	.word	0x08010ce0
 8009d98:	08010984 	.word	0x08010984
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4423      	add	r3, r4
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	4b98      	ldr	r3, [pc, #608]	; (800a004 <tcp_receive+0xb08>)
 8009da4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009da8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009db0:	6938      	ldr	r0, [r7, #16]
 8009db2:	f7fd fd36 	bl	8007822 <tcp_seg_free>
            while (next &&
 8009db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00e      	beq.n	8009dda <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009dbc:	4b91      	ldr	r3, [pc, #580]	; (800a004 <tcp_receive+0xb08>)
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	4b91      	ldr	r3, [pc, #580]	; (800a008 <tcp_receive+0xb0c>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	441a      	add	r2, r3
 8009dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009dd0:	8909      	ldrh	r1, [r1, #8]
 8009dd2:	440b      	add	r3, r1
 8009dd4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	da9a      	bge.n	8009d10 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d059      	beq.n	8009e94 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009de0:	4b88      	ldr	r3, [pc, #544]	; (800a004 <tcp_receive+0xb08>)
 8009de2:	881b      	ldrh	r3, [r3, #0]
 8009de4:	461a      	mov	r2, r3
 8009de6:	4b88      	ldr	r3, [pc, #544]	; (800a008 <tcp_receive+0xb0c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	441a      	add	r2, r3
 8009dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	dd4d      	ble.n	8009e94 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	4b81      	ldr	r3, [pc, #516]	; (800a008 <tcp_receive+0xb0c>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	4b80      	ldr	r3, [pc, #512]	; (800a00c <tcp_receive+0xb10>)
 8009e0c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009e0e:	4b7f      	ldr	r3, [pc, #508]	; (800a00c <tcp_receive+0xb10>)
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	899b      	ldrh	r3, [r3, #12]
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fa fe7a 	bl	8004b10 <lwip_htons>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	f003 0302 	and.w	r3, r3, #2
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d005      	beq.n	8009e34 <tcp_receive+0x938>
                inseg.len -= 1;
 8009e28:	4b78      	ldr	r3, [pc, #480]	; (800a00c <tcp_receive+0xb10>)
 8009e2a:	891b      	ldrh	r3, [r3, #8]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	4b76      	ldr	r3, [pc, #472]	; (800a00c <tcp_receive+0xb10>)
 8009e32:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009e34:	4b75      	ldr	r3, [pc, #468]	; (800a00c <tcp_receive+0xb10>)
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	4a74      	ldr	r2, [pc, #464]	; (800a00c <tcp_receive+0xb10>)
 8009e3a:	8912      	ldrh	r2, [r2, #8]
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fc f8f6 	bl	8006030 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009e44:	4b71      	ldr	r3, [pc, #452]	; (800a00c <tcp_receive+0xb10>)
 8009e46:	891c      	ldrh	r4, [r3, #8]
 8009e48:	4b70      	ldr	r3, [pc, #448]	; (800a00c <tcp_receive+0xb10>)
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	899b      	ldrh	r3, [r3, #12]
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fa fe5d 	bl	8004b10 <lwip_htons>
 8009e56:	4603      	mov	r3, r0
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	f003 0303 	and.w	r3, r3, #3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <tcp_receive+0x96a>
 8009e62:	2301      	movs	r3, #1
 8009e64:	e000      	b.n	8009e68 <tcp_receive+0x96c>
 8009e66:	2300      	movs	r3, #0
 8009e68:	4423      	add	r3, r4
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	4b65      	ldr	r3, [pc, #404]	; (800a004 <tcp_receive+0xb08>)
 8009e6e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009e70:	4b64      	ldr	r3, [pc, #400]	; (800a004 <tcp_receive+0xb08>)
 8009e72:	881b      	ldrh	r3, [r3, #0]
 8009e74:	461a      	mov	r2, r3
 8009e76:	4b64      	ldr	r3, [pc, #400]	; (800a008 <tcp_receive+0xb0c>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	441a      	add	r2, r3
 8009e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d006      	beq.n	8009e94 <tcp_receive+0x998>
 8009e86:	4b62      	ldr	r3, [pc, #392]	; (800a010 <tcp_receive+0xb14>)
 8009e88:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009e8c:	4961      	ldr	r1, [pc, #388]	; (800a014 <tcp_receive+0xb18>)
 8009e8e:	4862      	ldr	r0, [pc, #392]	; (800a018 <tcp_receive+0xb1c>)
 8009e90:	f004 fd1c 	bl	800e8cc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e98:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009e9a:	4b5a      	ldr	r3, [pc, #360]	; (800a004 <tcp_receive+0xb08>)
 8009e9c:	881b      	ldrh	r3, [r3, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	4b59      	ldr	r3, [pc, #356]	; (800a008 <tcp_receive+0xb0c>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	441a      	add	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009eae:	4b55      	ldr	r3, [pc, #340]	; (800a004 <tcp_receive+0xb08>)
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d206      	bcs.n	8009ec4 <tcp_receive+0x9c8>
 8009eb6:	4b56      	ldr	r3, [pc, #344]	; (800a010 <tcp_receive+0xb14>)
 8009eb8:	f240 6207 	movw	r2, #1543	; 0x607
 8009ebc:	4957      	ldr	r1, [pc, #348]	; (800a01c <tcp_receive+0xb20>)
 8009ebe:	4856      	ldr	r0, [pc, #344]	; (800a018 <tcp_receive+0xb1c>)
 8009ec0:	f004 fd04 	bl	800e8cc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009ec8:	4b4e      	ldr	r3, [pc, #312]	; (800a004 <tcp_receive+0xb08>)
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f7fc ffc5 	bl	8006e64 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009eda:	4b4c      	ldr	r3, [pc, #304]	; (800a00c <tcp_receive+0xb10>)
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	891b      	ldrh	r3, [r3, #8]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d006      	beq.n	8009ef2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009ee4:	4b49      	ldr	r3, [pc, #292]	; (800a00c <tcp_receive+0xb10>)
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	4a4d      	ldr	r2, [pc, #308]	; (800a020 <tcp_receive+0xb24>)
 8009eea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009eec:	4b47      	ldr	r3, [pc, #284]	; (800a00c <tcp_receive+0xb10>)
 8009eee:	2200      	movs	r2, #0
 8009ef0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009ef2:	4b46      	ldr	r3, [pc, #280]	; (800a00c <tcp_receive+0xb10>)
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	899b      	ldrh	r3, [r3, #12]
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fa fe08 	bl	8004b10 <lwip_htons>
 8009f00:	4603      	mov	r3, r0
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	f003 0301 	and.w	r3, r3, #1
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 80b8 	beq.w	800a07e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009f0e:	4b45      	ldr	r3, [pc, #276]	; (800a024 <tcp_receive+0xb28>)
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	f043 0320 	orr.w	r3, r3, #32
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	4b42      	ldr	r3, [pc, #264]	; (800a024 <tcp_receive+0xb28>)
 8009f1a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009f1c:	e0af      	b.n	800a07e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f22:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	4a36      	ldr	r2, [pc, #216]	; (800a008 <tcp_receive+0xb0c>)
 8009f2e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	891b      	ldrh	r3, [r3, #8]
 8009f34:	461c      	mov	r4, r3
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	899b      	ldrh	r3, [r3, #12]
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fa fde6 	bl	8004b10 <lwip_htons>
 8009f44:	4603      	mov	r3, r0
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	f003 0303 	and.w	r3, r3, #3
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <tcp_receive+0xa58>
 8009f50:	2301      	movs	r3, #1
 8009f52:	e000      	b.n	8009f56 <tcp_receive+0xa5a>
 8009f54:	2300      	movs	r3, #0
 8009f56:	191a      	adds	r2, r3, r4
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5c:	441a      	add	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f66:	461c      	mov	r4, r3
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	891b      	ldrh	r3, [r3, #8]
 8009f6c:	461d      	mov	r5, r3
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	899b      	ldrh	r3, [r3, #12]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fa fdca 	bl	8004b10 <lwip_htons>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	f003 0303 	and.w	r3, r3, #3
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <tcp_receive+0xa90>
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e000      	b.n	8009f8e <tcp_receive+0xa92>
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	442b      	add	r3, r5
 8009f90:	429c      	cmp	r4, r3
 8009f92:	d206      	bcs.n	8009fa2 <tcp_receive+0xaa6>
 8009f94:	4b1e      	ldr	r3, [pc, #120]	; (800a010 <tcp_receive+0xb14>)
 8009f96:	f240 622b 	movw	r2, #1579	; 0x62b
 8009f9a:	4923      	ldr	r1, [pc, #140]	; (800a028 <tcp_receive+0xb2c>)
 8009f9c:	481e      	ldr	r0, [pc, #120]	; (800a018 <tcp_receive+0xb1c>)
 8009f9e:	f004 fc95 	bl	800e8cc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	891b      	ldrh	r3, [r3, #8]
 8009fa6:	461c      	mov	r4, r3
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	899b      	ldrh	r3, [r3, #12]
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fa fdad 	bl	8004b10 <lwip_htons>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	f003 0303 	and.w	r3, r3, #3
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <tcp_receive+0xaca>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e000      	b.n	8009fc8 <tcp_receive+0xacc>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	1919      	adds	r1, r3, r4
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009fce:	b28b      	uxth	r3, r1
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7fc ff43 	bl	8006e64 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	891b      	ldrh	r3, [r3, #8]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d028      	beq.n	800a03a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009fe8:	4b0d      	ldr	r3, [pc, #52]	; (800a020 <tcp_receive+0xb24>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d01d      	beq.n	800a02c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009ff0:	4b0b      	ldr	r3, [pc, #44]	; (800a020 <tcp_receive+0xb24>)
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	4610      	mov	r0, r2
 8009ffc:	f7fc fa60 	bl	80064c0 <pbuf_cat>
 800a000:	e018      	b.n	800a034 <tcp_receive+0xb38>
 800a002:	bf00      	nop
 800a004:	24007af2 	.word	0x24007af2
 800a008:	24007ae8 	.word	0x24007ae8
 800a00c:	24007ac8 	.word	0x24007ac8
 800a010:	08010938 	.word	0x08010938
 800a014:	08010d18 	.word	0x08010d18
 800a018:	08010984 	.word	0x08010984
 800a01c:	08010d54 	.word	0x08010d54
 800a020:	24007af8 	.word	0x24007af8
 800a024:	24007af5 	.word	0x24007af5
 800a028:	08010d74 	.word	0x08010d74
            } else {
              recv_data = cseg->p;
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	4a70      	ldr	r2, [pc, #448]	; (800a1f4 <tcp_receive+0xcf8>)
 800a032:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2200      	movs	r2, #0
 800a038:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	899b      	ldrh	r3, [r3, #12]
 800a040:	b29b      	uxth	r3, r3
 800a042:	4618      	mov	r0, r3
 800a044:	f7fa fd64 	bl	8004b10 <lwip_htons>
 800a048:	4603      	mov	r3, r0
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	f003 0301 	and.w	r3, r3, #1
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00d      	beq.n	800a070 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a054:	4b68      	ldr	r3, [pc, #416]	; (800a1f8 <tcp_receive+0xcfc>)
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	f043 0320 	orr.w	r3, r3, #32
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	4b66      	ldr	r3, [pc, #408]	; (800a1f8 <tcp_receive+0xcfc>)
 800a060:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	7d1b      	ldrb	r3, [r3, #20]
 800a066:	2b04      	cmp	r3, #4
 800a068:	d102      	bne.n	800a070 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2207      	movs	r2, #7
 800a06e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a078:	68b8      	ldr	r0, [r7, #8]
 800a07a:	f7fd fbd2 	bl	8007822 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a082:	2b00      	cmp	r3, #0
 800a084:	d008      	beq.n	800a098 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	685a      	ldr	r2, [r3, #4]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a092:	429a      	cmp	r2, r3
 800a094:	f43f af43 	beq.w	8009f1e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	8b5b      	ldrh	r3, [r3, #26]
 800a09c:	f003 0301 	and.w	r3, r3, #1
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00e      	beq.n	800a0c2 <tcp_receive+0xbc6>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	8b5b      	ldrh	r3, [r3, #26]
 800a0a8:	f023 0301 	bic.w	r3, r3, #1
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	835a      	strh	r2, [r3, #26]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	8b5b      	ldrh	r3, [r3, #26]
 800a0b6:	f043 0302 	orr.w	r3, r3, #2
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a0c0:	e188      	b.n	800a3d4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	8b5b      	ldrh	r3, [r3, #26]
 800a0c6:	f043 0301 	orr.w	r3, r3, #1
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a0d0:	e180      	b.n	800a3d4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d106      	bne.n	800a0e8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a0da:	4848      	ldr	r0, [pc, #288]	; (800a1fc <tcp_receive+0xd00>)
 800a0dc:	f7fd fbba 	bl	8007854 <tcp_seg_copy>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	675a      	str	r2, [r3, #116]	; 0x74
 800a0e6:	e16d      	b.n	800a3c4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0f2:	e157      	b.n	800a3a4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	4b41      	ldr	r3, [pc, #260]	; (800a200 <tcp_receive+0xd04>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d11d      	bne.n	800a13e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a102:	4b3e      	ldr	r3, [pc, #248]	; (800a1fc <tcp_receive+0xd00>)
 800a104:	891a      	ldrh	r2, [r3, #8]
 800a106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a108:	891b      	ldrh	r3, [r3, #8]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	f240 814f 	bls.w	800a3ae <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a110:	483a      	ldr	r0, [pc, #232]	; (800a1fc <tcp_receive+0xd00>)
 800a112:	f7fd fb9f 	bl	8007854 <tcp_seg_copy>
 800a116:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f000 8149 	beq.w	800a3b2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800a120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a122:	2b00      	cmp	r3, #0
 800a124:	d003      	beq.n	800a12e <tcp_receive+0xc32>
                    prev->next = cseg;
 800a126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	601a      	str	r2, [r3, #0]
 800a12c:	e002      	b.n	800a134 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a134:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a136:	6978      	ldr	r0, [r7, #20]
 800a138:	f7ff f8dc 	bl	80092f4 <tcp_oos_insert_segment>
                }
                break;
 800a13c:	e139      	b.n	800a3b2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a140:	2b00      	cmp	r3, #0
 800a142:	d117      	bne.n	800a174 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a144:	4b2e      	ldr	r3, [pc, #184]	; (800a200 <tcp_receive+0xd04>)
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	2b00      	cmp	r3, #0
 800a152:	da57      	bge.n	800a204 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a154:	4829      	ldr	r0, [pc, #164]	; (800a1fc <tcp_receive+0xd00>)
 800a156:	f7fd fb7d 	bl	8007854 <tcp_seg_copy>
 800a15a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f000 8129 	beq.w	800a3b6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a16a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a16c:	69b8      	ldr	r0, [r7, #24]
 800a16e:	f7ff f8c1 	bl	80092f4 <tcp_oos_insert_segment>
                  }
                  break;
 800a172:	e120      	b.n	800a3b6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a174:	4b22      	ldr	r3, [pc, #136]	; (800a200 <tcp_receive+0xd04>)
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	1ad3      	subs	r3, r2, r3
 800a180:	3b01      	subs	r3, #1
 800a182:	2b00      	cmp	r3, #0
 800a184:	db3e      	blt.n	800a204 <tcp_receive+0xd08>
 800a186:	4b1e      	ldr	r3, [pc, #120]	; (800a200 <tcp_receive+0xd04>)
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	3301      	adds	r3, #1
 800a194:	2b00      	cmp	r3, #0
 800a196:	dc35      	bgt.n	800a204 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a198:	4818      	ldr	r0, [pc, #96]	; (800a1fc <tcp_receive+0xd00>)
 800a19a:	f7fd fb5b 	bl	8007854 <tcp_seg_copy>
 800a19e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f000 8109 	beq.w	800a3ba <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1b0:	8912      	ldrh	r2, [r2, #8]
 800a1b2:	441a      	add	r2, r3
 800a1b4:	4b12      	ldr	r3, [pc, #72]	; (800a200 <tcp_receive+0xd04>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	dd12      	ble.n	800a1e4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a1be:	4b10      	ldr	r3, [pc, #64]	; (800a200 <tcp_receive+0xd04>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1da:	891b      	ldrh	r3, [r3, #8]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	4610      	mov	r0, r2
 800a1e0:	f7fb ff26 	bl	8006030 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e6:	69fa      	ldr	r2, [r7, #28]
 800a1e8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a1ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1ec:	69f8      	ldr	r0, [r7, #28]
 800a1ee:	f7ff f881 	bl	80092f4 <tcp_oos_insert_segment>
                  }
                  break;
 800a1f2:	e0e2      	b.n	800a3ba <tcp_receive+0xebe>
 800a1f4:	24007af8 	.word	0x24007af8
 800a1f8:	24007af5 	.word	0x24007af5
 800a1fc:	24007ac8 	.word	0x24007ac8
 800a200:	24007ae8 	.word	0x24007ae8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a206:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f040 80c6 	bne.w	800a39e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a212:	4b80      	ldr	r3, [pc, #512]	; (800a414 <tcp_receive+0xf18>)
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f340 80bd 	ble.w	800a39e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	899b      	ldrh	r3, [r3, #12]
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fa fc6f 	bl	8004b10 <lwip_htons>
 800a232:	4603      	mov	r3, r0
 800a234:	b2db      	uxtb	r3, r3
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f040 80bf 	bne.w	800a3be <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a240:	4875      	ldr	r0, [pc, #468]	; (800a418 <tcp_receive+0xf1c>)
 800a242:	f7fd fb07 	bl	8007854 <tcp_seg_copy>
 800a246:	4602      	mov	r2, r0
 800a248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	f000 80b6 	beq.w	800a3c2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a25e:	8912      	ldrh	r2, [r2, #8]
 800a260:	441a      	add	r2, r3
 800a262:	4b6c      	ldr	r3, [pc, #432]	; (800a414 <tcp_receive+0xf18>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	dd12      	ble.n	800a292 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a26c:	4b69      	ldr	r3, [pc, #420]	; (800a414 <tcp_receive+0xf18>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	b29a      	uxth	r2, r3
 800a272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	b29b      	uxth	r3, r3
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a288:	891b      	ldrh	r3, [r3, #8]
 800a28a:	4619      	mov	r1, r3
 800a28c:	4610      	mov	r0, r2
 800a28e:	f7fb fecf 	bl	8006030 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a292:	4b62      	ldr	r3, [pc, #392]	; (800a41c <tcp_receive+0xf20>)
 800a294:	881b      	ldrh	r3, [r3, #0]
 800a296:	461a      	mov	r2, r3
 800a298:	4b5e      	ldr	r3, [pc, #376]	; (800a414 <tcp_receive+0xf18>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	441a      	add	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	6879      	ldr	r1, [r7, #4]
 800a2a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a2a6:	440b      	add	r3, r1
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f340 8089 	ble.w	800a3c2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	899b      	ldrh	r3, [r3, #12]
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fa fc28 	bl	8004b10 <lwip_htons>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	f003 0301 	and.w	r3, r3, #1
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d022      	beq.n	800a312 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	899b      	ldrh	r3, [r3, #12]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	b21b      	sxth	r3, r3
 800a2d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a2dc:	b21c      	sxth	r4, r3
 800a2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	899b      	ldrh	r3, [r3, #12]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fa fc11 	bl	8004b10 <lwip_htons>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fa fc08 	bl	8004b10 <lwip_htons>
 800a300:	4603      	mov	r3, r0
 800a302:	b21b      	sxth	r3, r3
 800a304:	4323      	orrs	r3, r4
 800a306:	b21a      	sxth	r2, r3
 800a308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	b292      	uxth	r2, r2
 800a310:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a316:	b29a      	uxth	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a31c:	4413      	add	r3, r2
 800a31e:	b299      	uxth	r1, r3
 800a320:	4b3c      	ldr	r3, [pc, #240]	; (800a414 <tcp_receive+0xf18>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	b29a      	uxth	r2, r3
 800a326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	1a8a      	subs	r2, r1, r2
 800a32c:	b292      	uxth	r2, r2
 800a32e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	685a      	ldr	r2, [r3, #4]
 800a336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	891b      	ldrh	r3, [r3, #8]
 800a33c:	4619      	mov	r1, r3
 800a33e:	4610      	mov	r0, r2
 800a340:	f7fb fe76 	bl	8006030 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	891c      	ldrh	r4, [r3, #8]
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	899b      	ldrh	r3, [r3, #12]
 800a352:	b29b      	uxth	r3, r3
 800a354:	4618      	mov	r0, r3
 800a356:	f7fa fbdb 	bl	8004b10 <lwip_htons>
 800a35a:	4603      	mov	r3, r0
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	f003 0303 	and.w	r3, r3, #3
 800a362:	2b00      	cmp	r3, #0
 800a364:	d001      	beq.n	800a36a <tcp_receive+0xe6e>
 800a366:	2301      	movs	r3, #1
 800a368:	e000      	b.n	800a36c <tcp_receive+0xe70>
 800a36a:	2300      	movs	r3, #0
 800a36c:	4423      	add	r3, r4
 800a36e:	b29a      	uxth	r2, r3
 800a370:	4b2a      	ldr	r3, [pc, #168]	; (800a41c <tcp_receive+0xf20>)
 800a372:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a374:	4b29      	ldr	r3, [pc, #164]	; (800a41c <tcp_receive+0xf20>)
 800a376:	881b      	ldrh	r3, [r3, #0]
 800a378:	461a      	mov	r2, r3
 800a37a:	4b26      	ldr	r3, [pc, #152]	; (800a414 <tcp_receive+0xf18>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	441a      	add	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a384:	6879      	ldr	r1, [r7, #4]
 800a386:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a388:	440b      	add	r3, r1
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d019      	beq.n	800a3c2 <tcp_receive+0xec6>
 800a38e:	4b24      	ldr	r3, [pc, #144]	; (800a420 <tcp_receive+0xf24>)
 800a390:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a394:	4923      	ldr	r1, [pc, #140]	; (800a424 <tcp_receive+0xf28>)
 800a396:	4824      	ldr	r0, [pc, #144]	; (800a428 <tcp_receive+0xf2c>)
 800a398:	f004 fa98 	bl	800e8cc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a39c:	e011      	b.n	800a3c2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f47f aea4 	bne.w	800a0f4 <tcp_receive+0xbf8>
 800a3ac:	e00a      	b.n	800a3c4 <tcp_receive+0xec8>
                break;
 800a3ae:	bf00      	nop
 800a3b0:	e008      	b.n	800a3c4 <tcp_receive+0xec8>
                break;
 800a3b2:	bf00      	nop
 800a3b4:	e006      	b.n	800a3c4 <tcp_receive+0xec8>
                  break;
 800a3b6:	bf00      	nop
 800a3b8:	e004      	b.n	800a3c4 <tcp_receive+0xec8>
                  break;
 800a3ba:	bf00      	nop
 800a3bc:	e002      	b.n	800a3c4 <tcp_receive+0xec8>
                  break;
 800a3be:	bf00      	nop
 800a3c0:	e000      	b.n	800a3c4 <tcp_receive+0xec8>
                break;
 800a3c2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f001 fa33 	bl	800b830 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a3ca:	e003      	b.n	800a3d4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f001 fa2f 	bl	800b830 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a3d2:	e01a      	b.n	800a40a <tcp_receive+0xf0e>
 800a3d4:	e019      	b.n	800a40a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a3d6:	4b0f      	ldr	r3, [pc, #60]	; (800a414 <tcp_receive+0xf18>)
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	db0a      	blt.n	800a3fa <tcp_receive+0xefe>
 800a3e4:	4b0b      	ldr	r3, [pc, #44]	; (800a414 <tcp_receive+0xf18>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	6879      	ldr	r1, [r7, #4]
 800a3ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a3f0:	440b      	add	r3, r1
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	dd07      	ble.n	800a40a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	8b5b      	ldrh	r3, [r3, #26]
 800a3fe:	f043 0302 	orr.w	r3, r3, #2
 800a402:	b29a      	uxth	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a408:	e7ff      	b.n	800a40a <tcp_receive+0xf0e>
 800a40a:	bf00      	nop
 800a40c:	3750      	adds	r7, #80	; 0x50
 800a40e:	46bd      	mov	sp, r7
 800a410:	bdb0      	pop	{r4, r5, r7, pc}
 800a412:	bf00      	nop
 800a414:	24007ae8 	.word	0x24007ae8
 800a418:	24007ac8 	.word	0x24007ac8
 800a41c:	24007af2 	.word	0x24007af2
 800a420:	08010938 	.word	0x08010938
 800a424:	08010ce0 	.word	0x08010ce0
 800a428:	08010984 	.word	0x08010984

0800a42c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a432:	4b15      	ldr	r3, [pc, #84]	; (800a488 <tcp_get_next_optbyte+0x5c>)
 800a434:	881b      	ldrh	r3, [r3, #0]
 800a436:	1c5a      	adds	r2, r3, #1
 800a438:	b291      	uxth	r1, r2
 800a43a:	4a13      	ldr	r2, [pc, #76]	; (800a488 <tcp_get_next_optbyte+0x5c>)
 800a43c:	8011      	strh	r1, [r2, #0]
 800a43e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a440:	4b12      	ldr	r3, [pc, #72]	; (800a48c <tcp_get_next_optbyte+0x60>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d004      	beq.n	800a452 <tcp_get_next_optbyte+0x26>
 800a448:	4b11      	ldr	r3, [pc, #68]	; (800a490 <tcp_get_next_optbyte+0x64>)
 800a44a:	881b      	ldrh	r3, [r3, #0]
 800a44c:	88fa      	ldrh	r2, [r7, #6]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d208      	bcs.n	800a464 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a452:	4b10      	ldr	r3, [pc, #64]	; (800a494 <tcp_get_next_optbyte+0x68>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3314      	adds	r3, #20
 800a458:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a45a:	88fb      	ldrh	r3, [r7, #6]
 800a45c:	683a      	ldr	r2, [r7, #0]
 800a45e:	4413      	add	r3, r2
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	e00b      	b.n	800a47c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a464:	88fb      	ldrh	r3, [r7, #6]
 800a466:	b2da      	uxtb	r2, r3
 800a468:	4b09      	ldr	r3, [pc, #36]	; (800a490 <tcp_get_next_optbyte+0x64>)
 800a46a:	881b      	ldrh	r3, [r3, #0]
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a472:	4b06      	ldr	r3, [pc, #24]	; (800a48c <tcp_get_next_optbyte+0x60>)
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	797b      	ldrb	r3, [r7, #5]
 800a478:	4413      	add	r3, r2
 800a47a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	24007ae4 	.word	0x24007ae4
 800a48c:	24007ae0 	.word	0x24007ae0
 800a490:	24007ade 	.word	0x24007ade
 800a494:	24007ad8 	.word	0x24007ad8

0800a498 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d106      	bne.n	800a4b4 <tcp_parseopt+0x1c>
 800a4a6:	4b32      	ldr	r3, [pc, #200]	; (800a570 <tcp_parseopt+0xd8>)
 800a4a8:	f240 727d 	movw	r2, #1917	; 0x77d
 800a4ac:	4931      	ldr	r1, [pc, #196]	; (800a574 <tcp_parseopt+0xdc>)
 800a4ae:	4832      	ldr	r0, [pc, #200]	; (800a578 <tcp_parseopt+0xe0>)
 800a4b0:	f004 fa0c 	bl	800e8cc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a4b4:	4b31      	ldr	r3, [pc, #196]	; (800a57c <tcp_parseopt+0xe4>)
 800a4b6:	881b      	ldrh	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d055      	beq.n	800a568 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a4bc:	4b30      	ldr	r3, [pc, #192]	; (800a580 <tcp_parseopt+0xe8>)
 800a4be:	2200      	movs	r2, #0
 800a4c0:	801a      	strh	r2, [r3, #0]
 800a4c2:	e045      	b.n	800a550 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a4c4:	f7ff ffb2 	bl	800a42c <tcp_get_next_optbyte>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d006      	beq.n	800a4e0 <tcp_parseopt+0x48>
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	dc2b      	bgt.n	800a52e <tcp_parseopt+0x96>
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d041      	beq.n	800a55e <tcp_parseopt+0xc6>
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d127      	bne.n	800a52e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a4de:	e037      	b.n	800a550 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a4e0:	f7ff ffa4 	bl	800a42c <tcp_get_next_optbyte>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b04      	cmp	r3, #4
 800a4e8:	d13b      	bne.n	800a562 <tcp_parseopt+0xca>
 800a4ea:	4b25      	ldr	r3, [pc, #148]	; (800a580 <tcp_parseopt+0xe8>)
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	4a22      	ldr	r2, [pc, #136]	; (800a57c <tcp_parseopt+0xe4>)
 800a4f2:	8812      	ldrh	r2, [r2, #0]
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	da34      	bge.n	800a562 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a4f8:	f7ff ff98 	bl	800a42c <tcp_get_next_optbyte>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	021b      	lsls	r3, r3, #8
 800a502:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a504:	f7ff ff92 	bl	800a42c <tcp_get_next_optbyte>
 800a508:	4603      	mov	r3, r0
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	89bb      	ldrh	r3, [r7, #12]
 800a50e:	4313      	orrs	r3, r2
 800a510:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a512:	89bb      	ldrh	r3, [r7, #12]
 800a514:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a518:	d804      	bhi.n	800a524 <tcp_parseopt+0x8c>
 800a51a:	89bb      	ldrh	r3, [r7, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d001      	beq.n	800a524 <tcp_parseopt+0x8c>
 800a520:	89ba      	ldrh	r2, [r7, #12]
 800a522:	e001      	b.n	800a528 <tcp_parseopt+0x90>
 800a524:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a52c:	e010      	b.n	800a550 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a52e:	f7ff ff7d 	bl	800a42c <tcp_get_next_optbyte>
 800a532:	4603      	mov	r3, r0
 800a534:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a536:	7afb      	ldrb	r3, [r7, #11]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d914      	bls.n	800a566 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a53c:	7afb      	ldrb	r3, [r7, #11]
 800a53e:	b29a      	uxth	r2, r3
 800a540:	4b0f      	ldr	r3, [pc, #60]	; (800a580 <tcp_parseopt+0xe8>)
 800a542:	881b      	ldrh	r3, [r3, #0]
 800a544:	4413      	add	r3, r2
 800a546:	b29b      	uxth	r3, r3
 800a548:	3b02      	subs	r3, #2
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	4b0c      	ldr	r3, [pc, #48]	; (800a580 <tcp_parseopt+0xe8>)
 800a54e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a550:	4b0b      	ldr	r3, [pc, #44]	; (800a580 <tcp_parseopt+0xe8>)
 800a552:	881a      	ldrh	r2, [r3, #0]
 800a554:	4b09      	ldr	r3, [pc, #36]	; (800a57c <tcp_parseopt+0xe4>)
 800a556:	881b      	ldrh	r3, [r3, #0]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d3b3      	bcc.n	800a4c4 <tcp_parseopt+0x2c>
 800a55c:	e004      	b.n	800a568 <tcp_parseopt+0xd0>
          return;
 800a55e:	bf00      	nop
 800a560:	e002      	b.n	800a568 <tcp_parseopt+0xd0>
            return;
 800a562:	bf00      	nop
 800a564:	e000      	b.n	800a568 <tcp_parseopt+0xd0>
            return;
 800a566:	bf00      	nop
      }
    }
  }
}
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	08010938 	.word	0x08010938
 800a574:	08010d9c 	.word	0x08010d9c
 800a578:	08010984 	.word	0x08010984
 800a57c:	24007adc 	.word	0x24007adc
 800a580:	24007ae4 	.word	0x24007ae4

0800a584 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a584:	b480      	push	{r7}
 800a586:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a588:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <tcp_trigger_input_pcb_close+0x1c>)
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	f043 0310 	orr.w	r3, r3, #16
 800a590:	b2da      	uxtb	r2, r3
 800a592:	4b03      	ldr	r3, [pc, #12]	; (800a5a0 <tcp_trigger_input_pcb_close+0x1c>)
 800a594:	701a      	strb	r2, [r3, #0]
}
 800a596:	bf00      	nop
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	24007af5 	.word	0x24007af5

0800a5a4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00a      	beq.n	800a5cc <tcp_route+0x28>
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	7a1b      	ldrb	r3, [r3, #8]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d006      	beq.n	800a5cc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	7a1b      	ldrb	r3, [r3, #8]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fb fb5a 	bl	8005c7c <netif_get_by_index>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	e003      	b.n	800a5d4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f002 fea3 	bl	800d318 <ip4_route>
 800a5d2:	4603      	mov	r3, r0
  }
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a5dc:	b590      	push	{r4, r7, lr}
 800a5de:	b087      	sub	sp, #28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	603b      	str	r3, [r7, #0]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d105      	bne.n	800a5fe <tcp_create_segment+0x22>
 800a5f2:	4b44      	ldr	r3, [pc, #272]	; (800a704 <tcp_create_segment+0x128>)
 800a5f4:	22a3      	movs	r2, #163	; 0xa3
 800a5f6:	4944      	ldr	r1, [pc, #272]	; (800a708 <tcp_create_segment+0x12c>)
 800a5f8:	4844      	ldr	r0, [pc, #272]	; (800a70c <tcp_create_segment+0x130>)
 800a5fa:	f004 f967 	bl	800e8cc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d105      	bne.n	800a610 <tcp_create_segment+0x34>
 800a604:	4b3f      	ldr	r3, [pc, #252]	; (800a704 <tcp_create_segment+0x128>)
 800a606:	22a4      	movs	r2, #164	; 0xa4
 800a608:	4941      	ldr	r1, [pc, #260]	; (800a710 <tcp_create_segment+0x134>)
 800a60a:	4840      	ldr	r0, [pc, #256]	; (800a70c <tcp_create_segment+0x130>)
 800a60c:	f004 f95e 	bl	800e8cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a610:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	b2db      	uxtb	r3, r3
 800a618:	f003 0304 	and.w	r3, r3, #4
 800a61c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a61e:	2003      	movs	r0, #3
 800a620:	f7fa ffa6 	bl	8005570 <memp_malloc>
 800a624:	6138      	str	r0, [r7, #16]
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d104      	bne.n	800a636 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a62c:	68b8      	ldr	r0, [r7, #8]
 800a62e:	f7fb fe85 	bl	800633c <pbuf_free>
    return NULL;
 800a632:	2300      	movs	r3, #0
 800a634:	e061      	b.n	800a6fa <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a63c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	2200      	movs	r2, #0
 800a642:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	891a      	ldrh	r2, [r3, #8]
 800a64e:	7dfb      	ldrb	r3, [r7, #23]
 800a650:	b29b      	uxth	r3, r3
 800a652:	429a      	cmp	r2, r3
 800a654:	d205      	bcs.n	800a662 <tcp_create_segment+0x86>
 800a656:	4b2b      	ldr	r3, [pc, #172]	; (800a704 <tcp_create_segment+0x128>)
 800a658:	22b0      	movs	r2, #176	; 0xb0
 800a65a:	492e      	ldr	r1, [pc, #184]	; (800a714 <tcp_create_segment+0x138>)
 800a65c:	482b      	ldr	r0, [pc, #172]	; (800a70c <tcp_create_segment+0x130>)
 800a65e:	f004 f935 	bl	800e8cc <iprintf>
  seg->len = p->tot_len - optlen;
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	891a      	ldrh	r2, [r3, #8]
 800a666:	7dfb      	ldrb	r3, [r7, #23]
 800a668:	b29b      	uxth	r3, r3
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a672:	2114      	movs	r1, #20
 800a674:	68b8      	ldr	r0, [r7, #8]
 800a676:	f7fb fdcb 	bl	8006210 <pbuf_add_header>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d004      	beq.n	800a68a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a680:	6938      	ldr	r0, [r7, #16]
 800a682:	f7fd f8ce 	bl	8007822 <tcp_seg_free>
    return NULL;
 800a686:	2300      	movs	r3, #0
 800a688:	e037      	b.n	800a6fa <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	685a      	ldr	r2, [r3, #4]
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	8ada      	ldrh	r2, [r3, #22]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	68dc      	ldr	r4, [r3, #12]
 800a69c:	4610      	mov	r0, r2
 800a69e:	f7fa fa37 	bl	8004b10 <lwip_htons>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	8b1a      	ldrh	r2, [r3, #24]
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	68dc      	ldr	r4, [r3, #12]
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	f7fa fa2e 	bl	8004b10 <lwip_htons>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	68dc      	ldr	r4, [r3, #12]
 800a6bc:	6838      	ldr	r0, [r7, #0]
 800a6be:	f7fa fa3c 	bl	8004b3a <lwip_htonl>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a6c6:	7dfb      	ldrb	r3, [r7, #23]
 800a6c8:	089b      	lsrs	r3, r3, #2
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	3305      	adds	r3, #5
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	031b      	lsls	r3, r3, #12
 800a6d4:	b29a      	uxth	r2, r3
 800a6d6:	79fb      	ldrb	r3, [r7, #7]
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	68dc      	ldr	r4, [r3, #12]
 800a6e2:	4610      	mov	r0, r2
 800a6e4:	f7fa fa14 	bl	8004b10 <lwip_htons>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	749a      	strb	r2, [r3, #18]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	74da      	strb	r2, [r3, #19]
  return seg;
 800a6f8:	693b      	ldr	r3, [r7, #16]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	371c      	adds	r7, #28
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd90      	pop	{r4, r7, pc}
 800a702:	bf00      	nop
 800a704:	08010db8 	.word	0x08010db8
 800a708:	08010dec 	.word	0x08010dec
 800a70c:	08010e0c 	.word	0x08010e0c
 800a710:	08010e34 	.word	0x08010e34
 800a714:	08010e58 	.word	0x08010e58

0800a718 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a718:	b590      	push	{r4, r7, lr}
 800a71a:	b08b      	sub	sp, #44	; 0x2c
 800a71c:	af02      	add	r7, sp, #8
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	460b      	mov	r3, r1
 800a722:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a724:	2300      	movs	r3, #0
 800a726:	61fb      	str	r3, [r7, #28]
 800a728:	2300      	movs	r3, #0
 800a72a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a72c:	2300      	movs	r3, #0
 800a72e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d106      	bne.n	800a744 <tcp_split_unsent_seg+0x2c>
 800a736:	4b95      	ldr	r3, [pc, #596]	; (800a98c <tcp_split_unsent_seg+0x274>)
 800a738:	f240 324b 	movw	r2, #843	; 0x34b
 800a73c:	4994      	ldr	r1, [pc, #592]	; (800a990 <tcp_split_unsent_seg+0x278>)
 800a73e:	4895      	ldr	r0, [pc, #596]	; (800a994 <tcp_split_unsent_seg+0x27c>)
 800a740:	f004 f8c4 	bl	800e8cc <iprintf>

  useg = pcb->unsent;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a748:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d102      	bne.n	800a756 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a750:	f04f 33ff 	mov.w	r3, #4294967295
 800a754:	e116      	b.n	800a984 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a756:	887b      	ldrh	r3, [r7, #2]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d109      	bne.n	800a770 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a75c:	4b8b      	ldr	r3, [pc, #556]	; (800a98c <tcp_split_unsent_seg+0x274>)
 800a75e:	f240 3253 	movw	r2, #851	; 0x353
 800a762:	498d      	ldr	r1, [pc, #564]	; (800a998 <tcp_split_unsent_seg+0x280>)
 800a764:	488b      	ldr	r0, [pc, #556]	; (800a994 <tcp_split_unsent_seg+0x27c>)
 800a766:	f004 f8b1 	bl	800e8cc <iprintf>
    return ERR_VAL;
 800a76a:	f06f 0305 	mvn.w	r3, #5
 800a76e:	e109      	b.n	800a984 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	891b      	ldrh	r3, [r3, #8]
 800a774:	887a      	ldrh	r2, [r7, #2]
 800a776:	429a      	cmp	r2, r3
 800a778:	d301      	bcc.n	800a77e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	e102      	b.n	800a984 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a782:	887a      	ldrh	r2, [r7, #2]
 800a784:	429a      	cmp	r2, r3
 800a786:	d906      	bls.n	800a796 <tcp_split_unsent_seg+0x7e>
 800a788:	4b80      	ldr	r3, [pc, #512]	; (800a98c <tcp_split_unsent_seg+0x274>)
 800a78a:	f240 325b 	movw	r2, #859	; 0x35b
 800a78e:	4983      	ldr	r1, [pc, #524]	; (800a99c <tcp_split_unsent_seg+0x284>)
 800a790:	4880      	ldr	r0, [pc, #512]	; (800a994 <tcp_split_unsent_seg+0x27c>)
 800a792:	f004 f89b 	bl	800e8cc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	891b      	ldrh	r3, [r3, #8]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d106      	bne.n	800a7ac <tcp_split_unsent_seg+0x94>
 800a79e:	4b7b      	ldr	r3, [pc, #492]	; (800a98c <tcp_split_unsent_seg+0x274>)
 800a7a0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a7a4:	497e      	ldr	r1, [pc, #504]	; (800a9a0 <tcp_split_unsent_seg+0x288>)
 800a7a6:	487b      	ldr	r0, [pc, #492]	; (800a994 <tcp_split_unsent_seg+0x27c>)
 800a7a8:	f004 f890 	bl	800e8cc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	7a9b      	ldrb	r3, [r3, #10]
 800a7b0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a7b2:	7bfb      	ldrb	r3, [r7, #15]
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	f003 0304 	and.w	r3, r3, #4
 800a7bc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	891a      	ldrh	r2, [r3, #8]
 800a7c2:	887b      	ldrh	r3, [r7, #2]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a7c8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	89bb      	ldrh	r3, [r7, #12]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	2036      	movs	r0, #54	; 0x36
 800a7da:	f7fb facb 	bl	8005d74 <pbuf_alloc>
 800a7de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 80b7 	beq.w	800a956 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	891a      	ldrh	r2, [r3, #8]
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	891b      	ldrh	r3, [r3, #8]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	887b      	ldrh	r3, [r7, #2]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	6858      	ldr	r0, [r3, #4]
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	685a      	ldr	r2, [r3, #4]
 800a804:	7bbb      	ldrb	r3, [r7, #14]
 800a806:	18d1      	adds	r1, r2, r3
 800a808:	897b      	ldrh	r3, [r7, #10]
 800a80a:	89ba      	ldrh	r2, [r7, #12]
 800a80c:	f7fb ff80 	bl	8006710 <pbuf_copy_partial>
 800a810:	4603      	mov	r3, r0
 800a812:	461a      	mov	r2, r3
 800a814:	89bb      	ldrh	r3, [r7, #12]
 800a816:	4293      	cmp	r3, r2
 800a818:	f040 809f 	bne.w	800a95a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	899b      	ldrh	r3, [r3, #12]
 800a822:	b29b      	uxth	r3, r3
 800a824:	4618      	mov	r0, r3
 800a826:	f7fa f973 	bl	8004b10 <lwip_htons>
 800a82a:	4603      	mov	r3, r0
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a832:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a834:	2300      	movs	r3, #0
 800a836:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a838:	7efb      	ldrb	r3, [r7, #27]
 800a83a:	f003 0308 	and.w	r3, r3, #8
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d007      	beq.n	800a852 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a842:	7efb      	ldrb	r3, [r7, #27]
 800a844:	f023 0308 	bic.w	r3, r3, #8
 800a848:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a84a:	7ebb      	ldrb	r3, [r7, #26]
 800a84c:	f043 0308 	orr.w	r3, r3, #8
 800a850:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a852:	7efb      	ldrb	r3, [r7, #27]
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d007      	beq.n	800a86c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a85c:	7efb      	ldrb	r3, [r7, #27]
 800a85e:	f023 0301 	bic.w	r3, r3, #1
 800a862:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a864:	7ebb      	ldrb	r3, [r7, #26]
 800a866:	f043 0301 	orr.w	r3, r3, #1
 800a86a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	4618      	mov	r0, r3
 800a874:	f7fa f961 	bl	8004b3a <lwip_htonl>
 800a878:	4602      	mov	r2, r0
 800a87a:	887b      	ldrh	r3, [r7, #2]
 800a87c:	18d1      	adds	r1, r2, r3
 800a87e:	7eba      	ldrb	r2, [r7, #26]
 800a880:	7bfb      	ldrb	r3, [r7, #15]
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	460b      	mov	r3, r1
 800a886:	6939      	ldr	r1, [r7, #16]
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7ff fea7 	bl	800a5dc <tcp_create_segment>
 800a88e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d063      	beq.n	800a95e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7fb fdd6 	bl	800644c <pbuf_clen>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a8aa:	1a9b      	subs	r3, r3, r2
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	6858      	ldr	r0, [r3, #4]
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	891a      	ldrh	r2, [r3, #8]
 800a8be:	89bb      	ldrh	r3, [r7, #12]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	f7fb fbb3 	bl	8006030 <pbuf_realloc>
  useg->len -= remainder;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	891a      	ldrh	r2, [r3, #8]
 800a8ce:	89bb      	ldrh	r3, [r7, #12]
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	899b      	ldrh	r3, [r3, #12]
 800a8de:	b29c      	uxth	r4, r3
 800a8e0:	7efb      	ldrb	r3, [r7, #27]
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fa f913 	bl	8004b10 <lwip_htons>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	4322      	orrs	r2, r4
 800a8f4:	b292      	uxth	r2, r2
 800a8f6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fb fda5 	bl	800644c <pbuf_clen>
 800a902:	4603      	mov	r3, r0
 800a904:	461a      	mov	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a90c:	4413      	add	r3, r2
 800a90e:	b29a      	uxth	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fb fd96 	bl	800644c <pbuf_clen>
 800a920:	4603      	mov	r3, r0
 800a922:	461a      	mov	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a92a:	4413      	add	r3, r2
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	69fa      	ldr	r2, [r7, #28]
 800a940:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d103      	bne.n	800a952 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	e016      	b.n	800a984 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a956:	bf00      	nop
 800a958:	e002      	b.n	800a960 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a95a:	bf00      	nop
 800a95c:	e000      	b.n	800a960 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a95e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d006      	beq.n	800a974 <tcp_split_unsent_seg+0x25c>
 800a966:	4b09      	ldr	r3, [pc, #36]	; (800a98c <tcp_split_unsent_seg+0x274>)
 800a968:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a96c:	490d      	ldr	r1, [pc, #52]	; (800a9a4 <tcp_split_unsent_seg+0x28c>)
 800a96e:	4809      	ldr	r0, [pc, #36]	; (800a994 <tcp_split_unsent_seg+0x27c>)
 800a970:	f003 ffac 	bl	800e8cc <iprintf>
  if (p != NULL) {
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d002      	beq.n	800a980 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a97a:	6938      	ldr	r0, [r7, #16]
 800a97c:	f7fb fcde 	bl	800633c <pbuf_free>
  }

  return ERR_MEM;
 800a980:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a984:	4618      	mov	r0, r3
 800a986:	3724      	adds	r7, #36	; 0x24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd90      	pop	{r4, r7, pc}
 800a98c:	08010db8 	.word	0x08010db8
 800a990:	0801114c 	.word	0x0801114c
 800a994:	08010e0c 	.word	0x08010e0c
 800a998:	08011170 	.word	0x08011170
 800a99c:	08011194 	.word	0x08011194
 800a9a0:	080111a4 	.word	0x080111a4
 800a9a4:	080111b4 	.word	0x080111b4

0800a9a8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a9a8:	b590      	push	{r4, r7, lr}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d106      	bne.n	800a9c4 <tcp_send_fin+0x1c>
 800a9b6:	4b21      	ldr	r3, [pc, #132]	; (800aa3c <tcp_send_fin+0x94>)
 800a9b8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a9bc:	4920      	ldr	r1, [pc, #128]	; (800aa40 <tcp_send_fin+0x98>)
 800a9be:	4821      	ldr	r0, [pc, #132]	; (800aa44 <tcp_send_fin+0x9c>)
 800a9c0:	f003 ff84 	bl	800e8cc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d02e      	beq.n	800aa2a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9d0:	60fb      	str	r3, [r7, #12]
 800a9d2:	e002      	b.n	800a9da <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1f8      	bne.n	800a9d4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	899b      	ldrh	r3, [r3, #12]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fa f890 	bl	8004b10 <lwip_htons>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	f003 0307 	and.w	r3, r3, #7
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d116      	bne.n	800aa2a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	899b      	ldrh	r3, [r3, #12]
 800aa02:	b29c      	uxth	r4, r3
 800aa04:	2001      	movs	r0, #1
 800aa06:	f7fa f883 	bl	8004b10 <lwip_htons>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	4322      	orrs	r2, r4
 800aa14:	b292      	uxth	r2, r2
 800aa16:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	8b5b      	ldrh	r3, [r3, #26]
 800aa1c:	f043 0320 	orr.w	r3, r3, #32
 800aa20:	b29a      	uxth	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800aa26:	2300      	movs	r3, #0
 800aa28:	e004      	b.n	800aa34 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 f80b 	bl	800aa48 <tcp_enqueue_flags>
 800aa32:	4603      	mov	r3, r0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3714      	adds	r7, #20
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd90      	pop	{r4, r7, pc}
 800aa3c:	08010db8 	.word	0x08010db8
 800aa40:	080111c0 	.word	0x080111c0
 800aa44:	08010e0c 	.word	0x08010e0c

0800aa48 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b08a      	sub	sp, #40	; 0x28
 800aa4c:	af02      	add	r7, sp, #8
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	460b      	mov	r3, r1
 800aa52:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800aa54:	2300      	movs	r3, #0
 800aa56:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800aa5c:	78fb      	ldrb	r3, [r7, #3]
 800aa5e:	f003 0303 	and.w	r3, r3, #3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d106      	bne.n	800aa74 <tcp_enqueue_flags+0x2c>
 800aa66:	4b67      	ldr	r3, [pc, #412]	; (800ac04 <tcp_enqueue_flags+0x1bc>)
 800aa68:	f240 4211 	movw	r2, #1041	; 0x411
 800aa6c:	4966      	ldr	r1, [pc, #408]	; (800ac08 <tcp_enqueue_flags+0x1c0>)
 800aa6e:	4867      	ldr	r0, [pc, #412]	; (800ac0c <tcp_enqueue_flags+0x1c4>)
 800aa70:	f003 ff2c 	bl	800e8cc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d106      	bne.n	800aa88 <tcp_enqueue_flags+0x40>
 800aa7a:	4b62      	ldr	r3, [pc, #392]	; (800ac04 <tcp_enqueue_flags+0x1bc>)
 800aa7c:	f240 4213 	movw	r2, #1043	; 0x413
 800aa80:	4963      	ldr	r1, [pc, #396]	; (800ac10 <tcp_enqueue_flags+0x1c8>)
 800aa82:	4862      	ldr	r0, [pc, #392]	; (800ac0c <tcp_enqueue_flags+0x1c4>)
 800aa84:	f003 ff22 	bl	800e8cc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800aa88:	78fb      	ldrb	r3, [r7, #3]
 800aa8a:	f003 0302 	and.w	r3, r3, #2
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800aa92:	2301      	movs	r3, #1
 800aa94:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aa96:	7ffb      	ldrb	r3, [r7, #31]
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	f003 0304 	and.w	r3, r3, #4
 800aaa0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800aaa2:	7dfb      	ldrb	r3, [r7, #23]
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aaaa:	4619      	mov	r1, r3
 800aaac:	2036      	movs	r0, #54	; 0x36
 800aaae:	f7fb f961 	bl	8005d74 <pbuf_alloc>
 800aab2:	6138      	str	r0, [r7, #16]
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d109      	bne.n	800aace <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	8b5b      	ldrh	r3, [r3, #26]
 800aabe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800aac8:	f04f 33ff 	mov.w	r3, #4294967295
 800aacc:	e095      	b.n	800abfa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	895a      	ldrh	r2, [r3, #10]
 800aad2:	7dfb      	ldrb	r3, [r7, #23]
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d206      	bcs.n	800aae8 <tcp_enqueue_flags+0xa0>
 800aada:	4b4a      	ldr	r3, [pc, #296]	; (800ac04 <tcp_enqueue_flags+0x1bc>)
 800aadc:	f240 4239 	movw	r2, #1081	; 0x439
 800aae0:	494c      	ldr	r1, [pc, #304]	; (800ac14 <tcp_enqueue_flags+0x1cc>)
 800aae2:	484a      	ldr	r0, [pc, #296]	; (800ac0c <tcp_enqueue_flags+0x1c4>)
 800aae4:	f003 fef2 	bl	800e8cc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800aaec:	78fa      	ldrb	r2, [r7, #3]
 800aaee:	7ffb      	ldrb	r3, [r7, #31]
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	6939      	ldr	r1, [r7, #16]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7ff fd70 	bl	800a5dc <tcp_create_segment>
 800aafc:	60f8      	str	r0, [r7, #12]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d109      	bne.n	800ab18 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	8b5b      	ldrh	r3, [r3, #26]
 800ab08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab0c:	b29a      	uxth	r2, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ab12:	f04f 33ff 	mov.w	r3, #4294967295
 800ab16:	e070      	b.n	800abfa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	f003 0303 	and.w	r3, r3, #3
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d006      	beq.n	800ab32 <tcp_enqueue_flags+0xea>
 800ab24:	4b37      	ldr	r3, [pc, #220]	; (800ac04 <tcp_enqueue_flags+0x1bc>)
 800ab26:	f240 4242 	movw	r2, #1090	; 0x442
 800ab2a:	493b      	ldr	r1, [pc, #236]	; (800ac18 <tcp_enqueue_flags+0x1d0>)
 800ab2c:	4837      	ldr	r0, [pc, #220]	; (800ac0c <tcp_enqueue_flags+0x1c4>)
 800ab2e:	f003 fecd 	bl	800e8cc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	891b      	ldrh	r3, [r3, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d006      	beq.n	800ab48 <tcp_enqueue_flags+0x100>
 800ab3a:	4b32      	ldr	r3, [pc, #200]	; (800ac04 <tcp_enqueue_flags+0x1bc>)
 800ab3c:	f240 4243 	movw	r2, #1091	; 0x443
 800ab40:	4936      	ldr	r1, [pc, #216]	; (800ac1c <tcp_enqueue_flags+0x1d4>)
 800ab42:	4832      	ldr	r0, [pc, #200]	; (800ac0c <tcp_enqueue_flags+0x1c4>)
 800ab44:	f003 fec2 	bl	800e8cc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d103      	bne.n	800ab58 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	66da      	str	r2, [r3, #108]	; 0x6c
 800ab56:	e00d      	b.n	800ab74 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab5c:	61bb      	str	r3, [r7, #24]
 800ab5e:	e002      	b.n	800ab66 <tcp_enqueue_flags+0x11e>
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	61bb      	str	r3, [r7, #24]
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d1f8      	bne.n	800ab60 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ab7c:	78fb      	ldrb	r3, [r7, #3]
 800ab7e:	f003 0302 	and.w	r3, r3, #2
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d104      	bne.n	800ab90 <tcp_enqueue_flags+0x148>
 800ab86:	78fb      	ldrb	r3, [r7, #3]
 800ab88:	f003 0301 	and.w	r3, r3, #1
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d004      	beq.n	800ab9a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab94:	1c5a      	adds	r2, r3, #1
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ab9a:	78fb      	ldrb	r3, [r7, #3]
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d006      	beq.n	800abb2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	8b5b      	ldrh	r3, [r3, #26]
 800aba8:	f043 0320 	orr.w	r3, r3, #32
 800abac:	b29a      	uxth	r2, r3
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fb fc48 	bl	800644c <pbuf_clen>
 800abbc:	4603      	mov	r3, r0
 800abbe:	461a      	mov	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800abc6:	4413      	add	r3, r2
 800abc8:	b29a      	uxth	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00e      	beq.n	800abf8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10a      	bne.n	800abf8 <tcp_enqueue_flags+0x1b0>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d106      	bne.n	800abf8 <tcp_enqueue_flags+0x1b0>
 800abea:	4b06      	ldr	r3, [pc, #24]	; (800ac04 <tcp_enqueue_flags+0x1bc>)
 800abec:	f240 4265 	movw	r2, #1125	; 0x465
 800abf0:	490b      	ldr	r1, [pc, #44]	; (800ac20 <tcp_enqueue_flags+0x1d8>)
 800abf2:	4806      	ldr	r0, [pc, #24]	; (800ac0c <tcp_enqueue_flags+0x1c4>)
 800abf4:	f003 fe6a 	bl	800e8cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3720      	adds	r7, #32
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	08010db8 	.word	0x08010db8
 800ac08:	080111dc 	.word	0x080111dc
 800ac0c:	08010e0c 	.word	0x08010e0c
 800ac10:	08011234 	.word	0x08011234
 800ac14:	08011254 	.word	0x08011254
 800ac18:	08011290 	.word	0x08011290
 800ac1c:	080112a8 	.word	0x080112a8
 800ac20:	080112d4 	.word	0x080112d4

0800ac24 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ac24:	b5b0      	push	{r4, r5, r7, lr}
 800ac26:	b08a      	sub	sp, #40	; 0x28
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d106      	bne.n	800ac40 <tcp_output+0x1c>
 800ac32:	4b8a      	ldr	r3, [pc, #552]	; (800ae5c <tcp_output+0x238>)
 800ac34:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ac38:	4989      	ldr	r1, [pc, #548]	; (800ae60 <tcp_output+0x23c>)
 800ac3a:	488a      	ldr	r0, [pc, #552]	; (800ae64 <tcp_output+0x240>)
 800ac3c:	f003 fe46 	bl	800e8cc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	7d1b      	ldrb	r3, [r3, #20]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d106      	bne.n	800ac56 <tcp_output+0x32>
 800ac48:	4b84      	ldr	r3, [pc, #528]	; (800ae5c <tcp_output+0x238>)
 800ac4a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ac4e:	4986      	ldr	r1, [pc, #536]	; (800ae68 <tcp_output+0x244>)
 800ac50:	4884      	ldr	r0, [pc, #528]	; (800ae64 <tcp_output+0x240>)
 800ac52:	f003 fe3b 	bl	800e8cc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ac56:	4b85      	ldr	r3, [pc, #532]	; (800ae6c <tcp_output+0x248>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d101      	bne.n	800ac64 <tcp_output+0x40>
    return ERR_OK;
 800ac60:	2300      	movs	r3, #0
 800ac62:	e1ce      	b.n	800b002 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac70:	4293      	cmp	r3, r2
 800ac72:	bf28      	it	cs
 800ac74:	4613      	movcs	r3, r2
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ac80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10b      	bne.n	800ac9e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	8b5b      	ldrh	r3, [r3, #26]
 800ac8a:	f003 0302 	and.w	r3, r3, #2
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 81aa 	beq.w	800afe8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fdcb 	bl	800b830 <tcp_send_empty_ack>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	e1b1      	b.n	800b002 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	3304      	adds	r3, #4
 800aca4:	461a      	mov	r2, r3
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff fc7c 	bl	800a5a4 <tcp_route>
 800acac:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d102      	bne.n	800acba <tcp_output+0x96>
    return ERR_RTE;
 800acb4:	f06f 0303 	mvn.w	r3, #3
 800acb8:	e1a3      	b.n	800b002 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d003      	beq.n	800acc8 <tcp_output+0xa4>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d111      	bne.n	800acec <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d002      	beq.n	800acd4 <tcp_output+0xb0>
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	3304      	adds	r3, #4
 800acd2:	e000      	b.n	800acd6 <tcp_output+0xb2>
 800acd4:	2300      	movs	r3, #0
 800acd6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d102      	bne.n	800ace4 <tcp_output+0xc0>
      return ERR_RTE;
 800acde:	f06f 0303 	mvn.w	r3, #3
 800ace2:	e18e      	b.n	800b002 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800acec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7f9 ff21 	bl	8004b3a <lwip_htonl>
 800acf8:	4602      	mov	r2, r0
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad02:	8912      	ldrh	r2, [r2, #8]
 800ad04:	4413      	add	r3, r2
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d227      	bcs.n	800ad5c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad12:	461a      	mov	r2, r3
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d114      	bne.n	800ad44 <tcp_output+0x120>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d110      	bne.n	800ad44 <tcp_output+0x120>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10b      	bne.n	800ad44 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	8b5b      	ldrh	r3, [r3, #26]
 800ad48:	f003 0302 	and.w	r3, r3, #2
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f000 814d 	beq.w	800afec <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fd6c 	bl	800b830 <tcp_send_empty_ack>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	e152      	b.n	800b002 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad68:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ad6a:	6a3b      	ldr	r3, [r7, #32]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f000 811c 	beq.w	800afaa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ad72:	e002      	b.n	800ad7a <tcp_output+0x156>
 800ad74:	6a3b      	ldr	r3, [r7, #32]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	623b      	str	r3, [r7, #32]
 800ad7a:	6a3b      	ldr	r3, [r7, #32]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1f8      	bne.n	800ad74 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ad82:	e112      	b.n	800afaa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	899b      	ldrh	r3, [r3, #12]
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7f9 febf 	bl	8004b10 <lwip_htons>
 800ad92:	4603      	mov	r3, r0
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	f003 0304 	and.w	r3, r3, #4
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d006      	beq.n	800adac <tcp_output+0x188>
 800ad9e:	4b2f      	ldr	r3, [pc, #188]	; (800ae5c <tcp_output+0x238>)
 800ada0:	f240 5236 	movw	r2, #1334	; 0x536
 800ada4:	4932      	ldr	r1, [pc, #200]	; (800ae70 <tcp_output+0x24c>)
 800ada6:	482f      	ldr	r0, [pc, #188]	; (800ae64 <tcp_output+0x240>)
 800ada8:	f003 fd90 	bl	800e8cc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d01f      	beq.n	800adf4 <tcp_output+0x1d0>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	8b5b      	ldrh	r3, [r3, #26]
 800adb8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d119      	bne.n	800adf4 <tcp_output+0x1d0>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00b      	beq.n	800ade0 <tcp_output+0x1bc>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d110      	bne.n	800adf4 <tcp_output+0x1d0>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800add6:	891a      	ldrh	r2, [r3, #8]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800addc:	429a      	cmp	r2, r3
 800adde:	d209      	bcs.n	800adf4 <tcp_output+0x1d0>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d004      	beq.n	800adf4 <tcp_output+0x1d0>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800adf0:	2b08      	cmp	r3, #8
 800adf2:	d901      	bls.n	800adf8 <tcp_output+0x1d4>
 800adf4:	2301      	movs	r3, #1
 800adf6:	e000      	b.n	800adfa <tcp_output+0x1d6>
 800adf8:	2300      	movs	r3, #0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d106      	bne.n	800ae0c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	8b5b      	ldrh	r3, [r3, #26]
 800ae02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 80e4 	beq.w	800afd4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	7d1b      	ldrb	r3, [r3, #20]
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	d00d      	beq.n	800ae30 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	899b      	ldrh	r3, [r3, #12]
 800ae1a:	b29c      	uxth	r4, r3
 800ae1c:	2010      	movs	r0, #16
 800ae1e:	f7f9 fe77 	bl	8004b10 <lwip_htons>
 800ae22:	4603      	mov	r3, r0
 800ae24:	461a      	mov	r2, r3
 800ae26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	4322      	orrs	r2, r4
 800ae2c:	b292      	uxth	r2, r2
 800ae2e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	6879      	ldr	r1, [r7, #4]
 800ae34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae36:	f000 f909 	bl	800b04c <tcp_output_segment>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ae3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d016      	beq.n	800ae74 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	8b5b      	ldrh	r3, [r3, #26]
 800ae4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae4e:	b29a      	uxth	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	835a      	strh	r2, [r3, #26]
      return err;
 800ae54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae58:	e0d3      	b.n	800b002 <tcp_output+0x3de>
 800ae5a:	bf00      	nop
 800ae5c:	08010db8 	.word	0x08010db8
 800ae60:	080112fc 	.word	0x080112fc
 800ae64:	08010e0c 	.word	0x08010e0c
 800ae68:	08011314 	.word	0x08011314
 800ae6c:	24007afc 	.word	0x24007afc
 800ae70:	0801133c 	.word	0x0801133c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ae74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	7d1b      	ldrb	r3, [r3, #20]
 800ae80:	2b02      	cmp	r3, #2
 800ae82:	d006      	beq.n	800ae92 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	8b5b      	ldrh	r3, [r3, #26]
 800ae88:	f023 0303 	bic.w	r3, r3, #3
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7f9 fe4e 	bl	8004b3a <lwip_htonl>
 800ae9e:	4604      	mov	r4, r0
 800aea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea2:	891b      	ldrh	r3, [r3, #8]
 800aea4:	461d      	mov	r5, r3
 800aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	899b      	ldrh	r3, [r3, #12]
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7f9 fe2e 	bl	8004b10 <lwip_htons>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	f003 0303 	and.w	r3, r3, #3
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d001      	beq.n	800aec4 <tcp_output+0x2a0>
 800aec0:	2301      	movs	r3, #1
 800aec2:	e000      	b.n	800aec6 <tcp_output+0x2a2>
 800aec4:	2300      	movs	r3, #0
 800aec6:	442b      	add	r3, r5
 800aec8:	4423      	add	r3, r4
 800aeca:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	da02      	bge.n	800aede <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee0:	891b      	ldrh	r3, [r3, #8]
 800aee2:	461c      	mov	r4, r3
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	899b      	ldrh	r3, [r3, #12]
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7f9 fe0f 	bl	8004b10 <lwip_htons>
 800aef2:	4603      	mov	r3, r0
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	f003 0303 	and.w	r3, r3, #3
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <tcp_output+0x2de>
 800aefe:	2301      	movs	r3, #1
 800af00:	e000      	b.n	800af04 <tcp_output+0x2e0>
 800af02:	2300      	movs	r3, #0
 800af04:	4423      	add	r3, r4
 800af06:	2b00      	cmp	r3, #0
 800af08:	d049      	beq.n	800af9e <tcp_output+0x37a>
      seg->next = NULL;
 800af0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0c:	2200      	movs	r2, #0
 800af0e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af14:	2b00      	cmp	r3, #0
 800af16:	d105      	bne.n	800af24 <tcp_output+0x300>
        pcb->unacked = seg;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af1c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800af1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af20:	623b      	str	r3, [r7, #32]
 800af22:	e03f      	b.n	800afa4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800af24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7f9 fe05 	bl	8004b3a <lwip_htonl>
 800af30:	4604      	mov	r4, r0
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	4618      	mov	r0, r3
 800af3a:	f7f9 fdfe 	bl	8004b3a <lwip_htonl>
 800af3e:	4603      	mov	r3, r0
 800af40:	1ae3      	subs	r3, r4, r3
 800af42:	2b00      	cmp	r3, #0
 800af44:	da24      	bge.n	800af90 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	3370      	adds	r3, #112	; 0x70
 800af4a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800af4c:	e002      	b.n	800af54 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d011      	beq.n	800af80 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	4618      	mov	r0, r3
 800af66:	f7f9 fde8 	bl	8004b3a <lwip_htonl>
 800af6a:	4604      	mov	r4, r0
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	4618      	mov	r0, r3
 800af74:	f7f9 fde1 	bl	8004b3a <lwip_htonl>
 800af78:	4603      	mov	r3, r0
 800af7a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	dbe6      	blt.n	800af4e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af86:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af8c:	601a      	str	r2, [r3, #0]
 800af8e:	e009      	b.n	800afa4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800af90:	6a3b      	ldr	r3, [r7, #32]
 800af92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af94:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800af96:	6a3b      	ldr	r3, [r7, #32]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	623b      	str	r3, [r7, #32]
 800af9c:	e002      	b.n	800afa4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800af9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afa0:	f7fc fc3f 	bl	8007822 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afa8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800afaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afac:	2b00      	cmp	r3, #0
 800afae:	d012      	beq.n	800afd6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800afb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7f9 fdbf 	bl	8004b3a <lwip_htonl>
 800afbc:	4602      	mov	r2, r0
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afc6:	8912      	ldrh	r2, [r2, #8]
 800afc8:	4413      	add	r3, r2
  while (seg != NULL &&
 800afca:	69ba      	ldr	r2, [r7, #24]
 800afcc:	429a      	cmp	r2, r3
 800afce:	f4bf aed9 	bcs.w	800ad84 <tcp_output+0x160>
 800afd2:	e000      	b.n	800afd6 <tcp_output+0x3b2>
      break;
 800afd4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d108      	bne.n	800aff0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800afe6:	e004      	b.n	800aff2 <tcp_output+0x3ce>
    goto output_done;
 800afe8:	bf00      	nop
 800afea:	e002      	b.n	800aff2 <tcp_output+0x3ce>
    goto output_done;
 800afec:	bf00      	nop
 800afee:	e000      	b.n	800aff2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800aff0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	8b5b      	ldrh	r3, [r3, #26]
 800aff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800affa:	b29a      	uxth	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3728      	adds	r7, #40	; 0x28
 800b006:	46bd      	mov	sp, r7
 800b008:	bdb0      	pop	{r4, r5, r7, pc}
 800b00a:	bf00      	nop

0800b00c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d106      	bne.n	800b028 <tcp_output_segment_busy+0x1c>
 800b01a:	4b09      	ldr	r3, [pc, #36]	; (800b040 <tcp_output_segment_busy+0x34>)
 800b01c:	f240 529a 	movw	r2, #1434	; 0x59a
 800b020:	4908      	ldr	r1, [pc, #32]	; (800b044 <tcp_output_segment_busy+0x38>)
 800b022:	4809      	ldr	r0, [pc, #36]	; (800b048 <tcp_output_segment_busy+0x3c>)
 800b024:	f003 fc52 	bl	800e8cc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	7b9b      	ldrb	r3, [r3, #14]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d001      	beq.n	800b036 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b032:	2301      	movs	r3, #1
 800b034:	e000      	b.n	800b038 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	08010db8 	.word	0x08010db8
 800b044:	08011354 	.word	0x08011354
 800b048:	08010e0c 	.word	0x08010e0c

0800b04c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b04c:	b5b0      	push	{r4, r5, r7, lr}
 800b04e:	b08c      	sub	sp, #48	; 0x30
 800b050:	af04      	add	r7, sp, #16
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d106      	bne.n	800b06c <tcp_output_segment+0x20>
 800b05e:	4b64      	ldr	r3, [pc, #400]	; (800b1f0 <tcp_output_segment+0x1a4>)
 800b060:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b064:	4963      	ldr	r1, [pc, #396]	; (800b1f4 <tcp_output_segment+0x1a8>)
 800b066:	4864      	ldr	r0, [pc, #400]	; (800b1f8 <tcp_output_segment+0x1ac>)
 800b068:	f003 fc30 	bl	800e8cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d106      	bne.n	800b080 <tcp_output_segment+0x34>
 800b072:	4b5f      	ldr	r3, [pc, #380]	; (800b1f0 <tcp_output_segment+0x1a4>)
 800b074:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b078:	4960      	ldr	r1, [pc, #384]	; (800b1fc <tcp_output_segment+0x1b0>)
 800b07a:	485f      	ldr	r0, [pc, #380]	; (800b1f8 <tcp_output_segment+0x1ac>)
 800b07c:	f003 fc26 	bl	800e8cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d106      	bne.n	800b094 <tcp_output_segment+0x48>
 800b086:	4b5a      	ldr	r3, [pc, #360]	; (800b1f0 <tcp_output_segment+0x1a4>)
 800b088:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b08c:	495c      	ldr	r1, [pc, #368]	; (800b200 <tcp_output_segment+0x1b4>)
 800b08e:	485a      	ldr	r0, [pc, #360]	; (800b1f8 <tcp_output_segment+0x1ac>)
 800b090:	f003 fc1c 	bl	800e8cc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	f7ff ffb9 	bl	800b00c <tcp_output_segment_busy>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	e0a1      	b.n	800b1e8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	68dc      	ldr	r4, [r3, #12]
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	f7f9 fd44 	bl	8004b3a <lwip_htonl>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	68dc      	ldr	r4, [r3, #12]
 800b0be:	4610      	mov	r0, r2
 800b0c0:	f7f9 fd26 	bl	8004b10 <lwip_htons>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b0d0:	441a      	add	r2, r3
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	3314      	adds	r3, #20
 800b0dc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	7a9b      	ldrb	r3, [r3, #10]
 800b0e2:	f003 0301 	and.w	r3, r3, #1
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d015      	beq.n	800b116 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	6879      	ldr	r1, [r7, #4]
 800b0f2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b0f6:	f7fc fe8b 	bl	8007e10 <tcp_eff_send_mss_netif>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b0fe:	8b7b      	ldrh	r3, [r7, #26]
 800b100:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b104:	4618      	mov	r0, r3
 800b106:	f7f9 fd18 	bl	8004b3a <lwip_htonl>
 800b10a:	4602      	mov	r2, r0
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	3304      	adds	r3, #4
 800b114:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	da02      	bge.n	800b126 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	2200      	movs	r2, #0
 800b124:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10c      	bne.n	800b148 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b12e:	4b35      	ldr	r3, [pc, #212]	; (800b204 <tcp_output_segment+0x1b8>)
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7f9 fcfc 	bl	8004b3a <lwip_htonl>
 800b142:	4602      	mov	r2, r0
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	68da      	ldr	r2, [r3, #12]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	1ad3      	subs	r3, r2, r3
 800b154:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	8959      	ldrh	r1, [r3, #10]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	8b3a      	ldrh	r2, [r7, #24]
 800b162:	1a8a      	subs	r2, r1, r2
 800b164:	b292      	uxth	r2, r2
 800b166:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	8919      	ldrh	r1, [r3, #8]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	8b3a      	ldrh	r2, [r7, #24]
 800b174:	1a8a      	subs	r2, r1, r2
 800b176:	b292      	uxth	r2, r2
 800b178:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	68d2      	ldr	r2, [r2, #12]
 800b182:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	741a      	strb	r2, [r3, #16]
 800b18c:	2200      	movs	r2, #0
 800b18e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	68da      	ldr	r2, [r3, #12]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	7a9b      	ldrb	r3, [r3, #10]
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d001      	beq.n	800b1a4 <tcp_output_segment+0x158>
 800b1a0:	2318      	movs	r3, #24
 800b1a2:	e000      	b.n	800b1a6 <tcp_output_segment+0x15a>
 800b1a4:	2314      	movs	r3, #20
 800b1a6:	4413      	add	r3, r2
 800b1a8:	69fa      	ldr	r2, [r7, #28]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d006      	beq.n	800b1bc <tcp_output_segment+0x170>
 800b1ae:	4b10      	ldr	r3, [pc, #64]	; (800b1f0 <tcp_output_segment+0x1a4>)
 800b1b0:	f240 621c 	movw	r2, #1564	; 0x61c
 800b1b4:	4914      	ldr	r1, [pc, #80]	; (800b208 <tcp_output_segment+0x1bc>)
 800b1b6:	4810      	ldr	r0, [pc, #64]	; (800b1f8 <tcp_output_segment+0x1ac>)
 800b1b8:	f003 fb88 	bl	800e8cc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6858      	ldr	r0, [r3, #4]
 800b1c0:	68b9      	ldr	r1, [r7, #8]
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	1d1c      	adds	r4, r3, #4
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	7add      	ldrb	r5, [r3, #11]
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	7a9b      	ldrb	r3, [r3, #10]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	9202      	str	r2, [sp, #8]
 800b1d2:	2206      	movs	r2, #6
 800b1d4:	9201      	str	r2, [sp, #4]
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	462b      	mov	r3, r5
 800b1da:	4622      	mov	r2, r4
 800b1dc:	f002 fa5a 	bl	800d694 <ip4_output_if>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b1e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3720      	adds	r7, #32
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bdb0      	pop	{r4, r5, r7, pc}
 800b1f0:	08010db8 	.word	0x08010db8
 800b1f4:	0801137c 	.word	0x0801137c
 800b1f8:	08010e0c 	.word	0x08010e0c
 800b1fc:	0801139c 	.word	0x0801139c
 800b200:	080113bc 	.word	0x080113bc
 800b204:	24007ab0 	.word	0x24007ab0
 800b208:	080113e0 	.word	0x080113e0

0800b20c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b20c:	b5b0      	push	{r4, r5, r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d106      	bne.n	800b228 <tcp_rexmit_rto_prepare+0x1c>
 800b21a:	4b31      	ldr	r3, [pc, #196]	; (800b2e0 <tcp_rexmit_rto_prepare+0xd4>)
 800b21c:	f240 6263 	movw	r2, #1635	; 0x663
 800b220:	4930      	ldr	r1, [pc, #192]	; (800b2e4 <tcp_rexmit_rto_prepare+0xd8>)
 800b222:	4831      	ldr	r0, [pc, #196]	; (800b2e8 <tcp_rexmit_rto_prepare+0xdc>)
 800b224:	f003 fb52 	bl	800e8cc <iprintf>

  if (pcb->unacked == NULL) {
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d102      	bne.n	800b236 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b230:	f06f 0305 	mvn.w	r3, #5
 800b234:	e050      	b.n	800b2d8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	e00b      	b.n	800b256 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f7ff fee4 	bl	800b00c <tcp_output_segment_busy>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d002      	beq.n	800b250 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b24a:	f06f 0305 	mvn.w	r3, #5
 800b24e:	e043      	b.n	800b2d8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	60fb      	str	r3, [r7, #12]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1ef      	bne.n	800b23e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	f7ff fed4 	bl	800b00c <tcp_output_segment_busy>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d002      	beq.n	800b270 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b26a:	f06f 0305 	mvn.w	r3, #5
 800b26e:	e033      	b.n	800b2d8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	8b5b      	ldrh	r3, [r3, #26]
 800b28a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b28e:	b29a      	uxth	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7f9 fc4d 	bl	8004b3a <lwip_htonl>
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	891b      	ldrh	r3, [r3, #8]
 800b2a6:	461d      	mov	r5, r3
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	899b      	ldrh	r3, [r3, #12]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7f9 fc2d 	bl	8004b10 <lwip_htons>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	f003 0303 	and.w	r3, r3, #3
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <tcp_rexmit_rto_prepare+0xba>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e000      	b.n	800b2c8 <tcp_rexmit_rto_prepare+0xbc>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	442b      	add	r3, r5
 800b2ca:	18e2      	adds	r2, r4, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bdb0      	pop	{r4, r5, r7, pc}
 800b2e0:	08010db8 	.word	0x08010db8
 800b2e4:	080113f4 	.word	0x080113f4
 800b2e8:	08010e0c 	.word	0x08010e0c

0800b2ec <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d106      	bne.n	800b308 <tcp_rexmit_rto_commit+0x1c>
 800b2fa:	4b0d      	ldr	r3, [pc, #52]	; (800b330 <tcp_rexmit_rto_commit+0x44>)
 800b2fc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b300:	490c      	ldr	r1, [pc, #48]	; (800b334 <tcp_rexmit_rto_commit+0x48>)
 800b302:	480d      	ldr	r0, [pc, #52]	; (800b338 <tcp_rexmit_rto_commit+0x4c>)
 800b304:	f003 fae2 	bl	800e8cc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b30e:	2bff      	cmp	r3, #255	; 0xff
 800b310:	d007      	beq.n	800b322 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b318:	3301      	adds	r3, #1
 800b31a:	b2da      	uxtb	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7ff fc7e 	bl	800ac24 <tcp_output>
}
 800b328:	bf00      	nop
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	08010db8 	.word	0x08010db8
 800b334:	08011418 	.word	0x08011418
 800b338:	08010e0c 	.word	0x08010e0c

0800b33c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d106      	bne.n	800b358 <tcp_rexmit_rto+0x1c>
 800b34a:	4b0a      	ldr	r3, [pc, #40]	; (800b374 <tcp_rexmit_rto+0x38>)
 800b34c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b350:	4909      	ldr	r1, [pc, #36]	; (800b378 <tcp_rexmit_rto+0x3c>)
 800b352:	480a      	ldr	r0, [pc, #40]	; (800b37c <tcp_rexmit_rto+0x40>)
 800b354:	f003 faba 	bl	800e8cc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7ff ff57 	bl	800b20c <tcp_rexmit_rto_prepare>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d102      	bne.n	800b36a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f7ff ffc1 	bl	800b2ec <tcp_rexmit_rto_commit>
  }
}
 800b36a:	bf00      	nop
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	08010db8 	.word	0x08010db8
 800b378:	0801143c 	.word	0x0801143c
 800b37c:	08010e0c 	.word	0x08010e0c

0800b380 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b380:	b590      	push	{r4, r7, lr}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d106      	bne.n	800b39c <tcp_rexmit+0x1c>
 800b38e:	4b2f      	ldr	r3, [pc, #188]	; (800b44c <tcp_rexmit+0xcc>)
 800b390:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b394:	492e      	ldr	r1, [pc, #184]	; (800b450 <tcp_rexmit+0xd0>)
 800b396:	482f      	ldr	r0, [pc, #188]	; (800b454 <tcp_rexmit+0xd4>)
 800b398:	f003 fa98 	bl	800e8cc <iprintf>

  if (pcb->unacked == NULL) {
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d102      	bne.n	800b3aa <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b3a4:	f06f 0305 	mvn.w	r3, #5
 800b3a8:	e04c      	b.n	800b444 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ae:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b3b0:	68b8      	ldr	r0, [r7, #8]
 800b3b2:	f7ff fe2b 	bl	800b00c <tcp_output_segment_busy>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b3bc:	f06f 0305 	mvn.w	r3, #5
 800b3c0:	e040      	b.n	800b444 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	336c      	adds	r3, #108	; 0x6c
 800b3ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b3d0:	e002      	b.n	800b3d8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d011      	beq.n	800b404 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7f9 fba6 	bl	8004b3a <lwip_htonl>
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7f9 fb9f 	bl	8004b3a <lwip_htonl>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b400:	2b00      	cmp	r3, #0
 800b402:	dbe6      	blt.n	800b3d2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d103      	bne.n	800b422 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b428:	2bff      	cmp	r3, #255	; 0xff
 800b42a:	d007      	beq.n	800b43c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b432:	3301      	adds	r3, #1
 800b434:	b2da      	uxtb	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd90      	pop	{r4, r7, pc}
 800b44c:	08010db8 	.word	0x08010db8
 800b450:	08011458 	.word	0x08011458
 800b454:	08010e0c 	.word	0x08010e0c

0800b458 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d106      	bne.n	800b474 <tcp_rexmit_fast+0x1c>
 800b466:	4b2a      	ldr	r3, [pc, #168]	; (800b510 <tcp_rexmit_fast+0xb8>)
 800b468:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b46c:	4929      	ldr	r1, [pc, #164]	; (800b514 <tcp_rexmit_fast+0xbc>)
 800b46e:	482a      	ldr	r0, [pc, #168]	; (800b518 <tcp_rexmit_fast+0xc0>)
 800b470:	f003 fa2c 	bl	800e8cc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d045      	beq.n	800b508 <tcp_rexmit_fast+0xb0>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	8b5b      	ldrh	r3, [r3, #26]
 800b480:	f003 0304 	and.w	r3, r3, #4
 800b484:	2b00      	cmp	r3, #0
 800b486:	d13f      	bne.n	800b508 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7ff ff79 	bl	800b380 <tcp_rexmit>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d139      	bne.n	800b508 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	bf28      	it	cs
 800b4a4:	4613      	movcs	r3, r2
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	da00      	bge.n	800b4ae <tcp_rexmit_fast+0x56>
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	105b      	asrs	r3, r3, #1
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b4be:	461a      	mov	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4c4:	005b      	lsls	r3, r3, #1
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d206      	bcs.n	800b4d8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4ce:	005b      	lsls	r3, r3, #1
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	0049      	lsls	r1, r1, #1
 800b4e6:	440b      	add	r3, r1
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	4413      	add	r3, r2
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	8b5b      	ldrh	r3, [r3, #26]
 800b4f8:	f043 0304 	orr.w	r3, r3, #4
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b508:	bf00      	nop
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	08010db8 	.word	0x08010db8
 800b514:	08011470 	.word	0x08011470
 800b518:	08010e0c 	.word	0x08010e0c

0800b51c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b086      	sub	sp, #24
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	607b      	str	r3, [r7, #4]
 800b526:	460b      	mov	r3, r1
 800b528:	817b      	strh	r3, [r7, #10]
 800b52a:	4613      	mov	r3, r2
 800b52c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b52e:	897a      	ldrh	r2, [r7, #10]
 800b530:	893b      	ldrh	r3, [r7, #8]
 800b532:	4413      	add	r3, r2
 800b534:	b29b      	uxth	r3, r3
 800b536:	3314      	adds	r3, #20
 800b538:	b29b      	uxth	r3, r3
 800b53a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b53e:	4619      	mov	r1, r3
 800b540:	2022      	movs	r0, #34	; 0x22
 800b542:	f7fa fc17 	bl	8005d74 <pbuf_alloc>
 800b546:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d04d      	beq.n	800b5ea <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b54e:	897b      	ldrh	r3, [r7, #10]
 800b550:	3313      	adds	r3, #19
 800b552:	697a      	ldr	r2, [r7, #20]
 800b554:	8952      	ldrh	r2, [r2, #10]
 800b556:	4293      	cmp	r3, r2
 800b558:	db06      	blt.n	800b568 <tcp_output_alloc_header_common+0x4c>
 800b55a:	4b26      	ldr	r3, [pc, #152]	; (800b5f4 <tcp_output_alloc_header_common+0xd8>)
 800b55c:	f240 7223 	movw	r2, #1827	; 0x723
 800b560:	4925      	ldr	r1, [pc, #148]	; (800b5f8 <tcp_output_alloc_header_common+0xdc>)
 800b562:	4826      	ldr	r0, [pc, #152]	; (800b5fc <tcp_output_alloc_header_common+0xe0>)
 800b564:	f003 f9b2 	bl	800e8cc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b56e:	8c3b      	ldrh	r3, [r7, #32]
 800b570:	4618      	mov	r0, r3
 800b572:	f7f9 facd 	bl	8004b10 <lwip_htons>
 800b576:	4603      	mov	r3, r0
 800b578:	461a      	mov	r2, r3
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b57e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b580:	4618      	mov	r0, r3
 800b582:	f7f9 fac5 	bl	8004b10 <lwip_htons>
 800b586:	4603      	mov	r3, r0
 800b588:	461a      	mov	r2, r3
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f7f9 fad0 	bl	8004b3a <lwip_htonl>
 800b59a:	4602      	mov	r2, r0
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b5a0:	897b      	ldrh	r3, [r7, #10]
 800b5a2:	089b      	lsrs	r3, r3, #2
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	3305      	adds	r3, #5
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	031b      	lsls	r3, r3, #12
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7f9 faa9 	bl	8004b10 <lwip_htons>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b5c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7f9 faa1 	bl	8004b10 <lwip_htons>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	741a      	strb	r2, [r3, #16]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	749a      	strb	r2, [r3, #18]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b5ea:	697b      	ldr	r3, [r7, #20]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3718      	adds	r7, #24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	08010db8 	.word	0x08010db8
 800b5f8:	08011490 	.word	0x08011490
 800b5fc:	08010e0c 	.word	0x08010e0c

0800b600 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b600:	b5b0      	push	{r4, r5, r7, lr}
 800b602:	b08a      	sub	sp, #40	; 0x28
 800b604:	af04      	add	r7, sp, #16
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	607b      	str	r3, [r7, #4]
 800b60a:	460b      	mov	r3, r1
 800b60c:	817b      	strh	r3, [r7, #10]
 800b60e:	4613      	mov	r3, r2
 800b610:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d106      	bne.n	800b626 <tcp_output_alloc_header+0x26>
 800b618:	4b15      	ldr	r3, [pc, #84]	; (800b670 <tcp_output_alloc_header+0x70>)
 800b61a:	f240 7242 	movw	r2, #1858	; 0x742
 800b61e:	4915      	ldr	r1, [pc, #84]	; (800b674 <tcp_output_alloc_header+0x74>)
 800b620:	4815      	ldr	r0, [pc, #84]	; (800b678 <tcp_output_alloc_header+0x78>)
 800b622:	f003 f953 	bl	800e8cc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	8adb      	ldrh	r3, [r3, #22]
 800b62e:	68fa      	ldr	r2, [r7, #12]
 800b630:	8b12      	ldrh	r2, [r2, #24]
 800b632:	68f9      	ldr	r1, [r7, #12]
 800b634:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b636:	893d      	ldrh	r5, [r7, #8]
 800b638:	897c      	ldrh	r4, [r7, #10]
 800b63a:	9103      	str	r1, [sp, #12]
 800b63c:	2110      	movs	r1, #16
 800b63e:	9102      	str	r1, [sp, #8]
 800b640:	9201      	str	r2, [sp, #4]
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	462a      	mov	r2, r5
 800b648:	4621      	mov	r1, r4
 800b64a:	f7ff ff67 	bl	800b51c <tcp_output_alloc_header_common>
 800b64e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d006      	beq.n	800b664 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b65e:	441a      	add	r2, r3
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b664:	697b      	ldr	r3, [r7, #20]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3718      	adds	r7, #24
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bdb0      	pop	{r4, r5, r7, pc}
 800b66e:	bf00      	nop
 800b670:	08010db8 	.word	0x08010db8
 800b674:	080114c0 	.word	0x080114c0
 800b678:	08010e0c 	.word	0x08010e0c

0800b67c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b088      	sub	sp, #32
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	4611      	mov	r1, r2
 800b688:	461a      	mov	r2, r3
 800b68a:	460b      	mov	r3, r1
 800b68c:	71fb      	strb	r3, [r7, #7]
 800b68e:	4613      	mov	r3, r2
 800b690:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b692:	2300      	movs	r3, #0
 800b694:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d106      	bne.n	800b6aa <tcp_output_fill_options+0x2e>
 800b69c:	4b12      	ldr	r3, [pc, #72]	; (800b6e8 <tcp_output_fill_options+0x6c>)
 800b69e:	f240 7256 	movw	r2, #1878	; 0x756
 800b6a2:	4912      	ldr	r1, [pc, #72]	; (800b6ec <tcp_output_fill_options+0x70>)
 800b6a4:	4812      	ldr	r0, [pc, #72]	; (800b6f0 <tcp_output_fill_options+0x74>)
 800b6a6:	f003 f911 	bl	800e8cc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	3314      	adds	r3, #20
 800b6b4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b6b6:	8bfb      	ldrh	r3, [r7, #30]
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	79fb      	ldrb	r3, [r7, #7]
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	f003 0304 	and.w	r3, r3, #4
 800b6c4:	4413      	add	r3, r2
 800b6c6:	3314      	adds	r3, #20
 800b6c8:	69ba      	ldr	r2, [r7, #24]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d006      	beq.n	800b6e0 <tcp_output_fill_options+0x64>
 800b6d2:	4b05      	ldr	r3, [pc, #20]	; (800b6e8 <tcp_output_fill_options+0x6c>)
 800b6d4:	f240 7275 	movw	r2, #1909	; 0x775
 800b6d8:	4906      	ldr	r1, [pc, #24]	; (800b6f4 <tcp_output_fill_options+0x78>)
 800b6da:	4805      	ldr	r0, [pc, #20]	; (800b6f0 <tcp_output_fill_options+0x74>)
 800b6dc:	f003 f8f6 	bl	800e8cc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b6e0:	bf00      	nop
 800b6e2:	3720      	adds	r7, #32
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	08010db8 	.word	0x08010db8
 800b6ec:	080114e8 	.word	0x080114e8
 800b6f0:	08010e0c 	.word	0x08010e0c
 800b6f4:	080113e0 	.word	0x080113e0

0800b6f8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b08a      	sub	sp, #40	; 0x28
 800b6fc:	af04      	add	r7, sp, #16
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	607a      	str	r2, [r7, #4]
 800b704:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d106      	bne.n	800b71a <tcp_output_control_segment+0x22>
 800b70c:	4b1c      	ldr	r3, [pc, #112]	; (800b780 <tcp_output_control_segment+0x88>)
 800b70e:	f240 7287 	movw	r2, #1927	; 0x787
 800b712:	491c      	ldr	r1, [pc, #112]	; (800b784 <tcp_output_control_segment+0x8c>)
 800b714:	481c      	ldr	r0, [pc, #112]	; (800b788 <tcp_output_control_segment+0x90>)
 800b716:	f003 f8d9 	bl	800e8cc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	6879      	ldr	r1, [r7, #4]
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f7fe ff40 	bl	800a5a4 <tcp_route>
 800b724:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d102      	bne.n	800b732 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b72c:	23fc      	movs	r3, #252	; 0xfc
 800b72e:	75fb      	strb	r3, [r7, #23]
 800b730:	e01c      	b.n	800b76c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d006      	beq.n	800b746 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	7adb      	ldrb	r3, [r3, #11]
 800b73c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	7a9b      	ldrb	r3, [r3, #10]
 800b742:	757b      	strb	r3, [r7, #21]
 800b744:	e003      	b.n	800b74e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b746:	23ff      	movs	r3, #255	; 0xff
 800b748:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b74a:	2300      	movs	r3, #0
 800b74c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b74e:	7dba      	ldrb	r2, [r7, #22]
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	9302      	str	r3, [sp, #8]
 800b754:	2306      	movs	r3, #6
 800b756:	9301      	str	r3, [sp, #4]
 800b758:	7d7b      	ldrb	r3, [r7, #21]
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	4613      	mov	r3, r2
 800b75e:	683a      	ldr	r2, [r7, #0]
 800b760:	6879      	ldr	r1, [r7, #4]
 800b762:	68b8      	ldr	r0, [r7, #8]
 800b764:	f001 ff96 	bl	800d694 <ip4_output_if>
 800b768:	4603      	mov	r3, r0
 800b76a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b76c:	68b8      	ldr	r0, [r7, #8]
 800b76e:	f7fa fde5 	bl	800633c <pbuf_free>
  return err;
 800b772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3718      	adds	r7, #24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	08010db8 	.word	0x08010db8
 800b784:	08011510 	.word	0x08011510
 800b788:	08010e0c 	.word	0x08010e0c

0800b78c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b78c:	b590      	push	{r4, r7, lr}
 800b78e:	b08b      	sub	sp, #44	; 0x2c
 800b790:	af04      	add	r7, sp, #16
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
 800b798:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d106      	bne.n	800b7ae <tcp_rst+0x22>
 800b7a0:	4b1f      	ldr	r3, [pc, #124]	; (800b820 <tcp_rst+0x94>)
 800b7a2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b7a6:	491f      	ldr	r1, [pc, #124]	; (800b824 <tcp_rst+0x98>)
 800b7a8:	481f      	ldr	r0, [pc, #124]	; (800b828 <tcp_rst+0x9c>)
 800b7aa:	f003 f88f 	bl	800e8cc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d106      	bne.n	800b7c2 <tcp_rst+0x36>
 800b7b4:	4b1a      	ldr	r3, [pc, #104]	; (800b820 <tcp_rst+0x94>)
 800b7b6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b7ba:	491c      	ldr	r1, [pc, #112]	; (800b82c <tcp_rst+0xa0>)
 800b7bc:	481a      	ldr	r0, [pc, #104]	; (800b828 <tcp_rst+0x9c>)
 800b7be:	f003 f885 	bl	800e8cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b7c6:	f246 0308 	movw	r3, #24584	; 0x6008
 800b7ca:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b7cc:	7dfb      	ldrb	r3, [r7, #23]
 800b7ce:	b29c      	uxth	r4, r3
 800b7d0:	68b8      	ldr	r0, [r7, #8]
 800b7d2:	f7f9 f9b2 	bl	8004b3a <lwip_htonl>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	8abb      	ldrh	r3, [r7, #20]
 800b7da:	9303      	str	r3, [sp, #12]
 800b7dc:	2314      	movs	r3, #20
 800b7de:	9302      	str	r3, [sp, #8]
 800b7e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b7e2:	9301      	str	r3, [sp, #4]
 800b7e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7ff fe94 	bl	800b51c <tcp_output_alloc_header_common>
 800b7f4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00c      	beq.n	800b816 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
 800b7fe:	2200      	movs	r2, #0
 800b800:	6939      	ldr	r1, [r7, #16]
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f7ff ff3a 	bl	800b67c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	6939      	ldr	r1, [r7, #16]
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f7ff ff72 	bl	800b6f8 <tcp_output_control_segment>
 800b814:	e000      	b.n	800b818 <tcp_rst+0x8c>
    return;
 800b816:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b818:	371c      	adds	r7, #28
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd90      	pop	{r4, r7, pc}
 800b81e:	bf00      	nop
 800b820:	08010db8 	.word	0x08010db8
 800b824:	0801153c 	.word	0x0801153c
 800b828:	08010e0c 	.word	0x08010e0c
 800b82c:	08011558 	.word	0x08011558

0800b830 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b830:	b590      	push	{r4, r7, lr}
 800b832:	b087      	sub	sp, #28
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b83c:	2300      	movs	r3, #0
 800b83e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d106      	bne.n	800b854 <tcp_send_empty_ack+0x24>
 800b846:	4b28      	ldr	r3, [pc, #160]	; (800b8e8 <tcp_send_empty_ack+0xb8>)
 800b848:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b84c:	4927      	ldr	r1, [pc, #156]	; (800b8ec <tcp_send_empty_ack+0xbc>)
 800b84e:	4828      	ldr	r0, [pc, #160]	; (800b8f0 <tcp_send_empty_ack+0xc0>)
 800b850:	f003 f83c 	bl	800e8cc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b854:	7dfb      	ldrb	r3, [r7, #23]
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	f003 0304 	and.w	r3, r3, #4
 800b85e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b860:	7d7b      	ldrb	r3, [r7, #21]
 800b862:	b29c      	uxth	r4, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b868:	4618      	mov	r0, r3
 800b86a:	f7f9 f966 	bl	8004b3a <lwip_htonl>
 800b86e:	4603      	mov	r3, r0
 800b870:	2200      	movs	r2, #0
 800b872:	4621      	mov	r1, r4
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f7ff fec3 	bl	800b600 <tcp_output_alloc_header>
 800b87a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d109      	bne.n	800b896 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	8b5b      	ldrh	r3, [r3, #26]
 800b886:	f043 0303 	orr.w	r3, r3, #3
 800b88a:	b29a      	uxth	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b890:	f06f 0301 	mvn.w	r3, #1
 800b894:	e023      	b.n	800b8de <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b896:	7dbb      	ldrb	r3, [r7, #22]
 800b898:	7dfa      	ldrb	r2, [r7, #23]
 800b89a:	6939      	ldr	r1, [r7, #16]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7ff feed 	bl	800b67c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	6939      	ldr	r1, [r7, #16]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff ff24 	bl	800b6f8 <tcp_output_control_segment>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b8b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d007      	beq.n	800b8cc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	8b5b      	ldrh	r3, [r3, #26]
 800b8c0:	f043 0303 	orr.w	r3, r3, #3
 800b8c4:	b29a      	uxth	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	835a      	strh	r2, [r3, #26]
 800b8ca:	e006      	b.n	800b8da <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	8b5b      	ldrh	r3, [r3, #26]
 800b8d0:	f023 0303 	bic.w	r3, r3, #3
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b8da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	371c      	adds	r7, #28
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd90      	pop	{r4, r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	08010db8 	.word	0x08010db8
 800b8ec:	08011574 	.word	0x08011574
 800b8f0:	08010e0c 	.word	0x08010e0c

0800b8f4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b8f4:	b590      	push	{r4, r7, lr}
 800b8f6:	b087      	sub	sp, #28
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d106      	bne.n	800b914 <tcp_keepalive+0x20>
 800b906:	4b18      	ldr	r3, [pc, #96]	; (800b968 <tcp_keepalive+0x74>)
 800b908:	f640 0224 	movw	r2, #2084	; 0x824
 800b90c:	4917      	ldr	r1, [pc, #92]	; (800b96c <tcp_keepalive+0x78>)
 800b90e:	4818      	ldr	r0, [pc, #96]	; (800b970 <tcp_keepalive+0x7c>)
 800b910:	f002 ffdc 	bl	800e8cc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b914:	7dfb      	ldrb	r3, [r7, #23]
 800b916:	b29c      	uxth	r4, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b91c:	3b01      	subs	r3, #1
 800b91e:	4618      	mov	r0, r3
 800b920:	f7f9 f90b 	bl	8004b3a <lwip_htonl>
 800b924:	4603      	mov	r3, r0
 800b926:	2200      	movs	r2, #0
 800b928:	4621      	mov	r1, r4
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f7ff fe68 	bl	800b600 <tcp_output_alloc_header>
 800b930:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d102      	bne.n	800b93e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b938:	f04f 33ff 	mov.w	r3, #4294967295
 800b93c:	e010      	b.n	800b960 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b93e:	7dfb      	ldrb	r3, [r7, #23]
 800b940:	2200      	movs	r2, #0
 800b942:	6939      	ldr	r1, [r7, #16]
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f7ff fe99 	bl	800b67c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	3304      	adds	r3, #4
 800b950:	6939      	ldr	r1, [r7, #16]
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7ff fed0 	bl	800b6f8 <tcp_output_control_segment>
 800b958:	4603      	mov	r3, r0
 800b95a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b95c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b960:	4618      	mov	r0, r3
 800b962:	371c      	adds	r7, #28
 800b964:	46bd      	mov	sp, r7
 800b966:	bd90      	pop	{r4, r7, pc}
 800b968:	08010db8 	.word	0x08010db8
 800b96c:	08011594 	.word	0x08011594
 800b970:	08010e0c 	.word	0x08010e0c

0800b974 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b974:	b590      	push	{r4, r7, lr}
 800b976:	b08b      	sub	sp, #44	; 0x2c
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b97c:	2300      	movs	r3, #0
 800b97e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d106      	bne.n	800b996 <tcp_zero_window_probe+0x22>
 800b988:	4b4c      	ldr	r3, [pc, #304]	; (800babc <tcp_zero_window_probe+0x148>)
 800b98a:	f640 024f 	movw	r2, #2127	; 0x84f
 800b98e:	494c      	ldr	r1, [pc, #304]	; (800bac0 <tcp_zero_window_probe+0x14c>)
 800b990:	484c      	ldr	r0, [pc, #304]	; (800bac4 <tcp_zero_window_probe+0x150>)
 800b992:	f002 ff9b 	bl	800e8cc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b99a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d101      	bne.n	800b9a6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	e086      	b.n	800bab4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b9ac:	2bff      	cmp	r3, #255	; 0xff
 800b9ae:	d007      	beq.n	800b9c0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	b2da      	uxtb	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b9c0:	6a3b      	ldr	r3, [r7, #32]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	899b      	ldrh	r3, [r3, #12]
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7f9 f8a1 	bl	8004b10 <lwip_htons>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	f003 0301 	and.w	r3, r3, #1
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d005      	beq.n	800b9e6 <tcp_zero_window_probe+0x72>
 800b9da:	6a3b      	ldr	r3, [r7, #32]
 800b9dc:	891b      	ldrh	r3, [r3, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <tcp_zero_window_probe+0x72>
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e000      	b.n	800b9e8 <tcp_zero_window_probe+0x74>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b9ea:	7ffb      	ldrb	r3, [r7, #31]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	bf0c      	ite	eq
 800b9f0:	2301      	moveq	r3, #1
 800b9f2:	2300      	movne	r3, #0
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9fc:	b299      	uxth	r1, r3
 800b9fe:	6a3b      	ldr	r3, [r7, #32]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	8bba      	ldrh	r2, [r7, #28]
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7ff fdfa 	bl	800b600 <tcp_output_alloc_header>
 800ba0c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ba0e:	69bb      	ldr	r3, [r7, #24]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d102      	bne.n	800ba1a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ba14:	f04f 33ff 	mov.w	r3, #4294967295
 800ba18:	e04c      	b.n	800bab4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ba20:	7ffb      	ldrb	r3, [r7, #31]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d011      	beq.n	800ba4a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	899b      	ldrh	r3, [r3, #12]
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	b21b      	sxth	r3, r3
 800ba2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ba32:	b21c      	sxth	r4, r3
 800ba34:	2011      	movs	r0, #17
 800ba36:	f7f9 f86b 	bl	8004b10 <lwip_htons>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	b21b      	sxth	r3, r3
 800ba3e:	4323      	orrs	r3, r4
 800ba40:	b21b      	sxth	r3, r3
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	819a      	strh	r2, [r3, #12]
 800ba48:	e010      	b.n	800ba6c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	3314      	adds	r3, #20
 800ba50:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ba52:	6a3b      	ldr	r3, [r7, #32]
 800ba54:	6858      	ldr	r0, [r3, #4]
 800ba56:	6a3b      	ldr	r3, [r7, #32]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	891a      	ldrh	r2, [r3, #8]
 800ba5c:	6a3b      	ldr	r3, [r7, #32]
 800ba5e:	891b      	ldrh	r3, [r3, #8]
 800ba60:	1ad3      	subs	r3, r2, r3
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	2201      	movs	r2, #1
 800ba66:	6939      	ldr	r1, [r7, #16]
 800ba68:	f7fa fe52 	bl	8006710 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ba6c:	6a3b      	ldr	r3, [r7, #32]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7f9 f861 	bl	8004b3a <lwip_htonl>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	da02      	bge.n	800ba90 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ba90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba94:	2200      	movs	r2, #0
 800ba96:	69b9      	ldr	r1, [r7, #24]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f7ff fdef 	bl	800b67c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	3304      	adds	r3, #4
 800baa4:	69b9      	ldr	r1, [r7, #24]
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f7ff fe26 	bl	800b6f8 <tcp_output_control_segment>
 800baac:	4603      	mov	r3, r0
 800baae:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bab0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	372c      	adds	r7, #44	; 0x2c
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd90      	pop	{r4, r7, pc}
 800babc:	08010db8 	.word	0x08010db8
 800bac0:	080115b0 	.word	0x080115b0
 800bac4:	08010e0c 	.word	0x08010e0c

0800bac8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bad0:	f7fa ff0c 	bl	80068ec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bad4:	4b0a      	ldr	r3, [pc, #40]	; (800bb00 <tcpip_tcp_timer+0x38>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d103      	bne.n	800bae4 <tcpip_tcp_timer+0x1c>
 800badc:	4b09      	ldr	r3, [pc, #36]	; (800bb04 <tcpip_tcp_timer+0x3c>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d005      	beq.n	800baf0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bae4:	2200      	movs	r2, #0
 800bae6:	4908      	ldr	r1, [pc, #32]	; (800bb08 <tcpip_tcp_timer+0x40>)
 800bae8:	20fa      	movs	r0, #250	; 0xfa
 800baea:	f000 f8f3 	bl	800bcd4 <sys_timeout>
 800baee:	e003      	b.n	800baf8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800baf0:	4b06      	ldr	r3, [pc, #24]	; (800bb0c <tcpip_tcp_timer+0x44>)
 800baf2:	2200      	movs	r2, #0
 800baf4:	601a      	str	r2, [r3, #0]
  }
}
 800baf6:	bf00      	nop
 800baf8:	bf00      	nop
 800bafa:	3708      	adds	r7, #8
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	24007abc 	.word	0x24007abc
 800bb04:	24007ac0 	.word	0x24007ac0
 800bb08:	0800bac9 	.word	0x0800bac9
 800bb0c:	24007b08 	.word	0x24007b08

0800bb10 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bb14:	4b0a      	ldr	r3, [pc, #40]	; (800bb40 <tcp_timer_needed+0x30>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10f      	bne.n	800bb3c <tcp_timer_needed+0x2c>
 800bb1c:	4b09      	ldr	r3, [pc, #36]	; (800bb44 <tcp_timer_needed+0x34>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d103      	bne.n	800bb2c <tcp_timer_needed+0x1c>
 800bb24:	4b08      	ldr	r3, [pc, #32]	; (800bb48 <tcp_timer_needed+0x38>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d007      	beq.n	800bb3c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bb2c:	4b04      	ldr	r3, [pc, #16]	; (800bb40 <tcp_timer_needed+0x30>)
 800bb2e:	2201      	movs	r2, #1
 800bb30:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bb32:	2200      	movs	r2, #0
 800bb34:	4905      	ldr	r1, [pc, #20]	; (800bb4c <tcp_timer_needed+0x3c>)
 800bb36:	20fa      	movs	r0, #250	; 0xfa
 800bb38:	f000 f8cc 	bl	800bcd4 <sys_timeout>
  }
}
 800bb3c:	bf00      	nop
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	24007b08 	.word	0x24007b08
 800bb44:	24007abc 	.word	0x24007abc
 800bb48:	24007ac0 	.word	0x24007ac0
 800bb4c:	0800bac9 	.word	0x0800bac9

0800bb50 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b086      	sub	sp, #24
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bb5c:	2006      	movs	r0, #6
 800bb5e:	f7f9 fd07 	bl	8005570 <memp_malloc>
 800bb62:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d109      	bne.n	800bb7e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d151      	bne.n	800bc14 <sys_timeout_abs+0xc4>
 800bb70:	4b2a      	ldr	r3, [pc, #168]	; (800bc1c <sys_timeout_abs+0xcc>)
 800bb72:	22be      	movs	r2, #190	; 0xbe
 800bb74:	492a      	ldr	r1, [pc, #168]	; (800bc20 <sys_timeout_abs+0xd0>)
 800bb76:	482b      	ldr	r0, [pc, #172]	; (800bc24 <sys_timeout_abs+0xd4>)
 800bb78:	f002 fea8 	bl	800e8cc <iprintf>
    return;
 800bb7c:	e04a      	b.n	800bc14 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	2200      	movs	r2, #0
 800bb82:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bb96:	4b24      	ldr	r3, [pc, #144]	; (800bc28 <sys_timeout_abs+0xd8>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d103      	bne.n	800bba6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bb9e:	4a22      	ldr	r2, [pc, #136]	; (800bc28 <sys_timeout_abs+0xd8>)
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	6013      	str	r3, [r2, #0]
    return;
 800bba4:	e037      	b.n	800bc16 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	685a      	ldr	r2, [r3, #4]
 800bbaa:	4b1f      	ldr	r3, [pc, #124]	; (800bc28 <sys_timeout_abs+0xd8>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	0fdb      	lsrs	r3, r3, #31
 800bbb4:	f003 0301 	and.w	r3, r3, #1
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d007      	beq.n	800bbce <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bbbe:	4b1a      	ldr	r3, [pc, #104]	; (800bc28 <sys_timeout_abs+0xd8>)
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bbc6:	4a18      	ldr	r2, [pc, #96]	; (800bc28 <sys_timeout_abs+0xd8>)
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	6013      	str	r3, [r2, #0]
 800bbcc:	e023      	b.n	800bc16 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bbce:	4b16      	ldr	r3, [pc, #88]	; (800bc28 <sys_timeout_abs+0xd8>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	617b      	str	r3, [r7, #20]
 800bbd4:	e01a      	b.n	800bc0c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00b      	beq.n	800bbf6 <sys_timeout_abs+0xa6>
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	685a      	ldr	r2, [r3, #4]
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	1ad3      	subs	r3, r2, r3
 800bbea:	0fdb      	lsrs	r3, r3, #31
 800bbec:	f003 0301 	and.w	r3, r3, #1
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d007      	beq.n	800bc06 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	693a      	ldr	r2, [r7, #16]
 800bc02:	601a      	str	r2, [r3, #0]
        break;
 800bc04:	e007      	b.n	800bc16 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	617b      	str	r3, [r7, #20]
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1e1      	bne.n	800bbd6 <sys_timeout_abs+0x86>
 800bc12:	e000      	b.n	800bc16 <sys_timeout_abs+0xc6>
    return;
 800bc14:	bf00      	nop
      }
    }
  }
}
 800bc16:	3718      	adds	r7, #24
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	080115d4 	.word	0x080115d4
 800bc20:	08011608 	.word	0x08011608
 800bc24:	08011648 	.word	0x08011648
 800bc28:	24007b00 	.word	0x24007b00

0800bc2c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b086      	sub	sp, #24
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	4798      	blx	r3

  now = sys_now();
 800bc3e:	f7f8 fd17 	bl	8004670 <sys_now>
 800bc42:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	4b0f      	ldr	r3, [pc, #60]	; (800bc88 <lwip_cyclic_timer+0x5c>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	1ad3      	subs	r3, r2, r3
 800bc56:	0fdb      	lsrs	r3, r3, #31
 800bc58:	f003 0301 	and.w	r3, r3, #1
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d009      	beq.n	800bc76 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	4413      	add	r3, r2
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	4907      	ldr	r1, [pc, #28]	; (800bc8c <lwip_cyclic_timer+0x60>)
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7ff ff6e 	bl	800bb50 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bc74:	e004      	b.n	800bc80 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	4904      	ldr	r1, [pc, #16]	; (800bc8c <lwip_cyclic_timer+0x60>)
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f7ff ff68 	bl	800bb50 <sys_timeout_abs>
}
 800bc80:	bf00      	nop
 800bc82:	3718      	adds	r7, #24
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	24007b04 	.word	0x24007b04
 800bc8c:	0800bc2d 	.word	0x0800bc2d

0800bc90 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bc96:	2301      	movs	r3, #1
 800bc98:	607b      	str	r3, [r7, #4]
 800bc9a:	e00e      	b.n	800bcba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bc9c:	4a0b      	ldr	r2, [pc, #44]	; (800bccc <sys_timeouts_init+0x3c>)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	00db      	lsls	r3, r3, #3
 800bca8:	4a08      	ldr	r2, [pc, #32]	; (800bccc <sys_timeouts_init+0x3c>)
 800bcaa:	4413      	add	r3, r2
 800bcac:	461a      	mov	r2, r3
 800bcae:	4908      	ldr	r1, [pc, #32]	; (800bcd0 <sys_timeouts_init+0x40>)
 800bcb0:	f000 f810 	bl	800bcd4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	607b      	str	r3, [r7, #4]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	d9ed      	bls.n	800bc9c <sys_timeouts_init+0xc>
  }
}
 800bcc0:	bf00      	nop
 800bcc2:	bf00      	nop
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	080121b8 	.word	0x080121b8
 800bcd0:	0800bc2d 	.word	0x0800bc2d

0800bcd4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b086      	sub	sp, #24
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bce6:	d306      	bcc.n	800bcf6 <sys_timeout+0x22>
 800bce8:	4b0a      	ldr	r3, [pc, #40]	; (800bd14 <sys_timeout+0x40>)
 800bcea:	f240 1229 	movw	r2, #297	; 0x129
 800bcee:	490a      	ldr	r1, [pc, #40]	; (800bd18 <sys_timeout+0x44>)
 800bcf0:	480a      	ldr	r0, [pc, #40]	; (800bd1c <sys_timeout+0x48>)
 800bcf2:	f002 fdeb 	bl	800e8cc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bcf6:	f7f8 fcbb 	bl	8004670 <sys_now>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	4413      	add	r3, r2
 800bd00:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	68b9      	ldr	r1, [r7, #8]
 800bd06:	6978      	ldr	r0, [r7, #20]
 800bd08:	f7ff ff22 	bl	800bb50 <sys_timeout_abs>
#endif
}
 800bd0c:	bf00      	nop
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	080115d4 	.word	0x080115d4
 800bd18:	08011670 	.word	0x08011670
 800bd1c:	08011648 	.word	0x08011648

0800bd20 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bd26:	f7f8 fca3 	bl	8004670 <sys_now>
 800bd2a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bd2c:	4b1a      	ldr	r3, [pc, #104]	; (800bd98 <sys_check_timeouts+0x78>)
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <sys_check_timeouts+0x1a>
 800bd36:	f7f9 ffc7 	bl	8005cc8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bd3a:	4b18      	ldr	r3, [pc, #96]	; (800bd9c <sys_check_timeouts+0x7c>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d022      	beq.n	800bd8c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	1ad3      	subs	r3, r2, r3
 800bd4e:	0fdb      	lsrs	r3, r3, #31
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d11a      	bne.n	800bd90 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a0f      	ldr	r2, [pc, #60]	; (800bd9c <sys_check_timeouts+0x7c>)
 800bd60:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	4a0b      	ldr	r2, [pc, #44]	; (800bda0 <sys_check_timeouts+0x80>)
 800bd74:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bd76:	68b9      	ldr	r1, [r7, #8]
 800bd78:	2006      	movs	r0, #6
 800bd7a:	f7f9 fc69 	bl	8005650 <memp_free>
    if (handler != NULL) {
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d0d3      	beq.n	800bd2c <sys_check_timeouts+0xc>
      handler(arg);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6838      	ldr	r0, [r7, #0]
 800bd88:	4798      	blx	r3
  do {
 800bd8a:	e7cf      	b.n	800bd2c <sys_check_timeouts+0xc>
      return;
 800bd8c:	bf00      	nop
 800bd8e:	e000      	b.n	800bd92 <sys_check_timeouts+0x72>
      return;
 800bd90:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	24007aad 	.word	0x24007aad
 800bd9c:	24007b00 	.word	0x24007b00
 800bda0:	24007b04 	.word	0x24007b04

0800bda4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bda8:	f002 fca2 	bl	800e6f0 <rand>
 800bdac:	4603      	mov	r3, r0
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	4b01      	ldr	r3, [pc, #4]	; (800bdc4 <udp_init+0x20>)
 800bdbe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bdc0:	bf00      	nop
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	2400002c 	.word	0x2400002c

0800bdc8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d105      	bne.n	800bde8 <udp_input_local_match+0x20>
 800bddc:	4b27      	ldr	r3, [pc, #156]	; (800be7c <udp_input_local_match+0xb4>)
 800bdde:	2287      	movs	r2, #135	; 0x87
 800bde0:	4927      	ldr	r1, [pc, #156]	; (800be80 <udp_input_local_match+0xb8>)
 800bde2:	4828      	ldr	r0, [pc, #160]	; (800be84 <udp_input_local_match+0xbc>)
 800bde4:	f002 fd72 	bl	800e8cc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d105      	bne.n	800bdfa <udp_input_local_match+0x32>
 800bdee:	4b23      	ldr	r3, [pc, #140]	; (800be7c <udp_input_local_match+0xb4>)
 800bdf0:	2288      	movs	r2, #136	; 0x88
 800bdf2:	4925      	ldr	r1, [pc, #148]	; (800be88 <udp_input_local_match+0xc0>)
 800bdf4:	4823      	ldr	r0, [pc, #140]	; (800be84 <udp_input_local_match+0xbc>)
 800bdf6:	f002 fd69 	bl	800e8cc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	7a1b      	ldrb	r3, [r3, #8]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00b      	beq.n	800be1a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	7a1a      	ldrb	r2, [r3, #8]
 800be06:	4b21      	ldr	r3, [pc, #132]	; (800be8c <udp_input_local_match+0xc4>)
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be0e:	3301      	adds	r3, #1
 800be10:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800be12:	429a      	cmp	r2, r3
 800be14:	d001      	beq.n	800be1a <udp_input_local_match+0x52>
    return 0;
 800be16:	2300      	movs	r3, #0
 800be18:	e02b      	b.n	800be72 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800be1a:	79fb      	ldrb	r3, [r7, #7]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d018      	beq.n	800be52 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d013      	beq.n	800be4e <udp_input_local_match+0x86>
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00f      	beq.n	800be4e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800be2e:	4b17      	ldr	r3, [pc, #92]	; (800be8c <udp_input_local_match+0xc4>)
 800be30:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800be32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be36:	d00a      	beq.n	800be4e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	4b13      	ldr	r3, [pc, #76]	; (800be8c <udp_input_local_match+0xc4>)
 800be3e:	695b      	ldr	r3, [r3, #20]
 800be40:	405a      	eors	r2, r3
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	3308      	adds	r3, #8
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d110      	bne.n	800be70 <udp_input_local_match+0xa8>
          return 1;
 800be4e:	2301      	movs	r3, #1
 800be50:	e00f      	b.n	800be72 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d009      	beq.n	800be6c <udp_input_local_match+0xa4>
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d005      	beq.n	800be6c <udp_input_local_match+0xa4>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	4b09      	ldr	r3, [pc, #36]	; (800be8c <udp_input_local_match+0xc4>)
 800be66:	695b      	ldr	r3, [r3, #20]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d101      	bne.n	800be70 <udp_input_local_match+0xa8>
        return 1;
 800be6c:	2301      	movs	r3, #1
 800be6e:	e000      	b.n	800be72 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	080116bc 	.word	0x080116bc
 800be80:	080116ec 	.word	0x080116ec
 800be84:	08011710 	.word	0x08011710
 800be88:	08011738 	.word	0x08011738
 800be8c:	24004b94 	.word	0x24004b94

0800be90 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800be90:	b590      	push	{r4, r7, lr}
 800be92:	b08d      	sub	sp, #52	; 0x34
 800be94:	af02      	add	r7, sp, #8
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800be9a:	2300      	movs	r3, #0
 800be9c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d105      	bne.n	800beb0 <udp_input+0x20>
 800bea4:	4b7c      	ldr	r3, [pc, #496]	; (800c098 <udp_input+0x208>)
 800bea6:	22cf      	movs	r2, #207	; 0xcf
 800bea8:	497c      	ldr	r1, [pc, #496]	; (800c09c <udp_input+0x20c>)
 800beaa:	487d      	ldr	r0, [pc, #500]	; (800c0a0 <udp_input+0x210>)
 800beac:	f002 fd0e 	bl	800e8cc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d105      	bne.n	800bec2 <udp_input+0x32>
 800beb6:	4b78      	ldr	r3, [pc, #480]	; (800c098 <udp_input+0x208>)
 800beb8:	22d0      	movs	r2, #208	; 0xd0
 800beba:	497a      	ldr	r1, [pc, #488]	; (800c0a4 <udp_input+0x214>)
 800bebc:	4878      	ldr	r0, [pc, #480]	; (800c0a0 <udp_input+0x210>)
 800bebe:	f002 fd05 	bl	800e8cc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	895b      	ldrh	r3, [r3, #10]
 800bec6:	2b07      	cmp	r3, #7
 800bec8:	d803      	bhi.n	800bed2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f7fa fa36 	bl	800633c <pbuf_free>
    goto end;
 800bed0:	e0de      	b.n	800c090 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bed8:	4b73      	ldr	r3, [pc, #460]	; (800c0a8 <udp_input+0x218>)
 800beda:	695b      	ldr	r3, [r3, #20]
 800bedc:	4a72      	ldr	r2, [pc, #456]	; (800c0a8 <udp_input+0x218>)
 800bede:	6812      	ldr	r2, [r2, #0]
 800bee0:	4611      	mov	r1, r2
 800bee2:	4618      	mov	r0, r3
 800bee4:	f001 fcae 	bl	800d844 <ip4_addr_isbroadcast_u32>
 800bee8:	4603      	mov	r3, r0
 800beea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	881b      	ldrh	r3, [r3, #0]
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7f8 fe0c 	bl	8004b10 <lwip_htons>
 800bef8:	4603      	mov	r3, r0
 800befa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	885b      	ldrh	r3, [r3, #2]
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7f8 fe04 	bl	8004b10 <lwip_htons>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bf10:	2300      	movs	r3, #0
 800bf12:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bf14:	2300      	movs	r3, #0
 800bf16:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf18:	4b64      	ldr	r3, [pc, #400]	; (800c0ac <udp_input+0x21c>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	627b      	str	r3, [r7, #36]	; 0x24
 800bf1e:	e054      	b.n	800bfca <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf22:	8a5b      	ldrh	r3, [r3, #18]
 800bf24:	89fa      	ldrh	r2, [r7, #14]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d14a      	bne.n	800bfc0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bf2a:	7cfb      	ldrb	r3, [r7, #19]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf32:	f7ff ff49 	bl	800bdc8 <udp_input_local_match>
 800bf36:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d041      	beq.n	800bfc0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	7c1b      	ldrb	r3, [r3, #16]
 800bf40:	f003 0304 	and.w	r3, r3, #4
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d11d      	bne.n	800bf84 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d102      	bne.n	800bf54 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf50:	61fb      	str	r3, [r7, #28]
 800bf52:	e017      	b.n	800bf84 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bf54:	7cfb      	ldrb	r3, [r7, #19]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d014      	beq.n	800bf84 <udp_input+0xf4>
 800bf5a:	4b53      	ldr	r3, [pc, #332]	; (800c0a8 <udp_input+0x218>)
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf62:	d10f      	bne.n	800bf84 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d008      	beq.n	800bf84 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d101      	bne.n	800bf84 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800bf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf82:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf86:	8a9b      	ldrh	r3, [r3, #20]
 800bf88:	8a3a      	ldrh	r2, [r7, #16]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d118      	bne.n	800bfc0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bf8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf90:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d005      	beq.n	800bfa2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf98:	685a      	ldr	r2, [r3, #4]
 800bf9a:	4b43      	ldr	r3, [pc, #268]	; (800c0a8 <udp_input+0x218>)
 800bf9c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d10e      	bne.n	800bfc0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bfa2:	6a3b      	ldr	r3, [r7, #32]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d014      	beq.n	800bfd2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfaa:	68da      	ldr	r2, [r3, #12]
 800bfac:	6a3b      	ldr	r3, [r7, #32]
 800bfae:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bfb0:	4b3e      	ldr	r3, [pc, #248]	; (800c0ac <udp_input+0x21c>)
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bfb8:	4a3c      	ldr	r2, [pc, #240]	; (800c0ac <udp_input+0x21c>)
 800bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bfbe:	e008      	b.n	800bfd2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	627b      	str	r3, [r7, #36]	; 0x24
 800bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1a7      	bne.n	800bf20 <udp_input+0x90>
 800bfd0:	e000      	b.n	800bfd4 <udp_input+0x144>
        break;
 800bfd2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d101      	bne.n	800bfde <udp_input+0x14e>
    pcb = uncon_pcb;
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d002      	beq.n	800bfea <udp_input+0x15a>
    for_us = 1;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	76fb      	strb	r3, [r7, #27]
 800bfe8:	e00a      	b.n	800c000 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	3304      	adds	r3, #4
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	4b2d      	ldr	r3, [pc, #180]	; (800c0a8 <udp_input+0x218>)
 800bff2:	695b      	ldr	r3, [r3, #20]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	bf0c      	ite	eq
 800bff8:	2301      	moveq	r3, #1
 800bffa:	2300      	movne	r3, #0
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c000:	7efb      	ldrb	r3, [r7, #27]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d041      	beq.n	800c08a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c006:	2108      	movs	r1, #8
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f7fa f911 	bl	8006230 <pbuf_remove_header>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00a      	beq.n	800c02a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c014:	4b20      	ldr	r3, [pc, #128]	; (800c098 <udp_input+0x208>)
 800c016:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c01a:	4925      	ldr	r1, [pc, #148]	; (800c0b0 <udp_input+0x220>)
 800c01c:	4820      	ldr	r0, [pc, #128]	; (800c0a0 <udp_input+0x210>)
 800c01e:	f002 fc55 	bl	800e8cc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f7fa f98a 	bl	800633c <pbuf_free>
      goto end;
 800c028:	e032      	b.n	800c090 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d012      	beq.n	800c056 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00a      	beq.n	800c04e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03a:	699c      	ldr	r4, [r3, #24]
 800c03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03e:	69d8      	ldr	r0, [r3, #28]
 800c040:	8a3b      	ldrh	r3, [r7, #16]
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	4b1b      	ldr	r3, [pc, #108]	; (800c0b4 <udp_input+0x224>)
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c04a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c04c:	e021      	b.n	800c092 <udp_input+0x202>
        pbuf_free(p);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7fa f974 	bl	800633c <pbuf_free>
        goto end;
 800c054:	e01c      	b.n	800c090 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c056:	7cfb      	ldrb	r3, [r7, #19]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d112      	bne.n	800c082 <udp_input+0x1f2>
 800c05c:	4b12      	ldr	r3, [pc, #72]	; (800c0a8 <udp_input+0x218>)
 800c05e:	695b      	ldr	r3, [r3, #20]
 800c060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c064:	2be0      	cmp	r3, #224	; 0xe0
 800c066:	d00c      	beq.n	800c082 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c068:	4b0f      	ldr	r3, [pc, #60]	; (800c0a8 <udp_input+0x218>)
 800c06a:	899b      	ldrh	r3, [r3, #12]
 800c06c:	3308      	adds	r3, #8
 800c06e:	b29b      	uxth	r3, r3
 800c070:	b21b      	sxth	r3, r3
 800c072:	4619      	mov	r1, r3
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f7fa f94e 	bl	8006316 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c07a:	2103      	movs	r1, #3
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f001 f8b7 	bl	800d1f0 <icmp_dest_unreach>
      pbuf_free(p);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f7fa f95a 	bl	800633c <pbuf_free>
  return;
 800c088:	e003      	b.n	800c092 <udp_input+0x202>
    pbuf_free(p);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7fa f956 	bl	800633c <pbuf_free>
  return;
 800c090:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c092:	372c      	adds	r7, #44	; 0x2c
 800c094:	46bd      	mov	sp, r7
 800c096:	bd90      	pop	{r4, r7, pc}
 800c098:	080116bc 	.word	0x080116bc
 800c09c:	08011760 	.word	0x08011760
 800c0a0:	08011710 	.word	0x08011710
 800c0a4:	08011778 	.word	0x08011778
 800c0a8:	24004b94 	.word	0x24004b94
 800c0ac:	24007b0c 	.word	0x24007b0c
 800c0b0:	08011794 	.word	0x08011794
 800c0b4:	24004ba4 	.word	0x24004ba4

0800c0b8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d01e      	beq.n	800c106 <udp_netif_ip_addr_changed+0x4e>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d01a      	beq.n	800c106 <udp_netif_ip_addr_changed+0x4e>
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d017      	beq.n	800c106 <udp_netif_ip_addr_changed+0x4e>
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d013      	beq.n	800c106 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c0de:	4b0d      	ldr	r3, [pc, #52]	; (800c114 <udp_netif_ip_addr_changed+0x5c>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	60fb      	str	r3, [r7, #12]
 800c0e4:	e00c      	b.n	800c100 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d103      	bne.n	800c0fa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	60fb      	str	r3, [r7, #12]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d1ef      	bne.n	800c0e6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c106:	bf00      	nop
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	24007b0c 	.word	0x24007b0c

0800c118 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c120:	4915      	ldr	r1, [pc, #84]	; (800c178 <etharp_free_entry+0x60>)
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	4613      	mov	r3, r2
 800c126:	005b      	lsls	r3, r3, #1
 800c128:	4413      	add	r3, r2
 800c12a:	00db      	lsls	r3, r3, #3
 800c12c:	440b      	add	r3, r1
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d013      	beq.n	800c15c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c134:	4910      	ldr	r1, [pc, #64]	; (800c178 <etharp_free_entry+0x60>)
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	4613      	mov	r3, r2
 800c13a:	005b      	lsls	r3, r3, #1
 800c13c:	4413      	add	r3, r2
 800c13e:	00db      	lsls	r3, r3, #3
 800c140:	440b      	add	r3, r1
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4618      	mov	r0, r3
 800c146:	f7fa f8f9 	bl	800633c <pbuf_free>
    arp_table[i].q = NULL;
 800c14a:	490b      	ldr	r1, [pc, #44]	; (800c178 <etharp_free_entry+0x60>)
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	4613      	mov	r3, r2
 800c150:	005b      	lsls	r3, r3, #1
 800c152:	4413      	add	r3, r2
 800c154:	00db      	lsls	r3, r3, #3
 800c156:	440b      	add	r3, r1
 800c158:	2200      	movs	r2, #0
 800c15a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c15c:	4906      	ldr	r1, [pc, #24]	; (800c178 <etharp_free_entry+0x60>)
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	4613      	mov	r3, r2
 800c162:	005b      	lsls	r3, r3, #1
 800c164:	4413      	add	r3, r2
 800c166:	00db      	lsls	r3, r3, #3
 800c168:	440b      	add	r3, r1
 800c16a:	3314      	adds	r3, #20
 800c16c:	2200      	movs	r2, #0
 800c16e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c170:	bf00      	nop
 800c172:	3708      	adds	r7, #8
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	24007b10 	.word	0x24007b10

0800c17c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c182:	2300      	movs	r3, #0
 800c184:	607b      	str	r3, [r7, #4]
 800c186:	e096      	b.n	800c2b6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c188:	494f      	ldr	r1, [pc, #316]	; (800c2c8 <etharp_tmr+0x14c>)
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	4613      	mov	r3, r2
 800c18e:	005b      	lsls	r3, r3, #1
 800c190:	4413      	add	r3, r2
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	440b      	add	r3, r1
 800c196:	3314      	adds	r3, #20
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c19c:	78fb      	ldrb	r3, [r7, #3]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f000 8086 	beq.w	800c2b0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c1a4:	4948      	ldr	r1, [pc, #288]	; (800c2c8 <etharp_tmr+0x14c>)
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	005b      	lsls	r3, r3, #1
 800c1ac:	4413      	add	r3, r2
 800c1ae:	00db      	lsls	r3, r3, #3
 800c1b0:	440b      	add	r3, r1
 800c1b2:	3312      	adds	r3, #18
 800c1b4:	881b      	ldrh	r3, [r3, #0]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	b298      	uxth	r0, r3
 800c1ba:	4943      	ldr	r1, [pc, #268]	; (800c2c8 <etharp_tmr+0x14c>)
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	4613      	mov	r3, r2
 800c1c0:	005b      	lsls	r3, r3, #1
 800c1c2:	4413      	add	r3, r2
 800c1c4:	00db      	lsls	r3, r3, #3
 800c1c6:	440b      	add	r3, r1
 800c1c8:	3312      	adds	r3, #18
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c1ce:	493e      	ldr	r1, [pc, #248]	; (800c2c8 <etharp_tmr+0x14c>)
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	005b      	lsls	r3, r3, #1
 800c1d6:	4413      	add	r3, r2
 800c1d8:	00db      	lsls	r3, r3, #3
 800c1da:	440b      	add	r3, r1
 800c1dc:	3312      	adds	r3, #18
 800c1de:	881b      	ldrh	r3, [r3, #0]
 800c1e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c1e4:	d215      	bcs.n	800c212 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c1e6:	4938      	ldr	r1, [pc, #224]	; (800c2c8 <etharp_tmr+0x14c>)
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	005b      	lsls	r3, r3, #1
 800c1ee:	4413      	add	r3, r2
 800c1f0:	00db      	lsls	r3, r3, #3
 800c1f2:	440b      	add	r3, r1
 800c1f4:	3314      	adds	r3, #20
 800c1f6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d10e      	bne.n	800c21a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c1fc:	4932      	ldr	r1, [pc, #200]	; (800c2c8 <etharp_tmr+0x14c>)
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	4613      	mov	r3, r2
 800c202:	005b      	lsls	r3, r3, #1
 800c204:	4413      	add	r3, r2
 800c206:	00db      	lsls	r3, r3, #3
 800c208:	440b      	add	r3, r1
 800c20a:	3312      	adds	r3, #18
 800c20c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c20e:	2b04      	cmp	r3, #4
 800c210:	d903      	bls.n	800c21a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f7ff ff80 	bl	800c118 <etharp_free_entry>
 800c218:	e04a      	b.n	800c2b0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c21a:	492b      	ldr	r1, [pc, #172]	; (800c2c8 <etharp_tmr+0x14c>)
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	4613      	mov	r3, r2
 800c220:	005b      	lsls	r3, r3, #1
 800c222:	4413      	add	r3, r2
 800c224:	00db      	lsls	r3, r3, #3
 800c226:	440b      	add	r3, r1
 800c228:	3314      	adds	r3, #20
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b03      	cmp	r3, #3
 800c22e:	d10a      	bne.n	800c246 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c230:	4925      	ldr	r1, [pc, #148]	; (800c2c8 <etharp_tmr+0x14c>)
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	4613      	mov	r3, r2
 800c236:	005b      	lsls	r3, r3, #1
 800c238:	4413      	add	r3, r2
 800c23a:	00db      	lsls	r3, r3, #3
 800c23c:	440b      	add	r3, r1
 800c23e:	3314      	adds	r3, #20
 800c240:	2204      	movs	r2, #4
 800c242:	701a      	strb	r2, [r3, #0]
 800c244:	e034      	b.n	800c2b0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c246:	4920      	ldr	r1, [pc, #128]	; (800c2c8 <etharp_tmr+0x14c>)
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	4613      	mov	r3, r2
 800c24c:	005b      	lsls	r3, r3, #1
 800c24e:	4413      	add	r3, r2
 800c250:	00db      	lsls	r3, r3, #3
 800c252:	440b      	add	r3, r1
 800c254:	3314      	adds	r3, #20
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	2b04      	cmp	r3, #4
 800c25a:	d10a      	bne.n	800c272 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c25c:	491a      	ldr	r1, [pc, #104]	; (800c2c8 <etharp_tmr+0x14c>)
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	4613      	mov	r3, r2
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	4413      	add	r3, r2
 800c266:	00db      	lsls	r3, r3, #3
 800c268:	440b      	add	r3, r1
 800c26a:	3314      	adds	r3, #20
 800c26c:	2202      	movs	r2, #2
 800c26e:	701a      	strb	r2, [r3, #0]
 800c270:	e01e      	b.n	800c2b0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c272:	4915      	ldr	r1, [pc, #84]	; (800c2c8 <etharp_tmr+0x14c>)
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	4613      	mov	r3, r2
 800c278:	005b      	lsls	r3, r3, #1
 800c27a:	4413      	add	r3, r2
 800c27c:	00db      	lsls	r3, r3, #3
 800c27e:	440b      	add	r3, r1
 800c280:	3314      	adds	r3, #20
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b01      	cmp	r3, #1
 800c286:	d113      	bne.n	800c2b0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c288:	490f      	ldr	r1, [pc, #60]	; (800c2c8 <etharp_tmr+0x14c>)
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	4613      	mov	r3, r2
 800c28e:	005b      	lsls	r3, r3, #1
 800c290:	4413      	add	r3, r2
 800c292:	00db      	lsls	r3, r3, #3
 800c294:	440b      	add	r3, r1
 800c296:	3308      	adds	r3, #8
 800c298:	6818      	ldr	r0, [r3, #0]
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	4613      	mov	r3, r2
 800c29e:	005b      	lsls	r3, r3, #1
 800c2a0:	4413      	add	r3, r2
 800c2a2:	00db      	lsls	r3, r3, #3
 800c2a4:	4a08      	ldr	r2, [pc, #32]	; (800c2c8 <etharp_tmr+0x14c>)
 800c2a6:	4413      	add	r3, r2
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	f000 fe6e 	bl	800cf8c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	607b      	str	r3, [r7, #4]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b09      	cmp	r3, #9
 800c2ba:	f77f af65 	ble.w	800c188 <etharp_tmr+0xc>
      }
    }
  }
}
 800c2be:	bf00      	nop
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	24007b10 	.word	0x24007b10

0800c2cc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b08a      	sub	sp, #40	; 0x28
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	607a      	str	r2, [r7, #4]
 800c2d8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c2da:	230a      	movs	r3, #10
 800c2dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c2de:	230a      	movs	r3, #10
 800c2e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c2e2:	230a      	movs	r3, #10
 800c2e4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c2ea:	230a      	movs	r3, #10
 800c2ec:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	83bb      	strh	r3, [r7, #28]
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	837b      	strh	r3, [r7, #26]
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	843b      	strh	r3, [r7, #32]
 800c2fe:	e0ae      	b.n	800c45e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c300:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c304:	49a6      	ldr	r1, [pc, #664]	; (800c5a0 <etharp_find_entry+0x2d4>)
 800c306:	4613      	mov	r3, r2
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	4413      	add	r3, r2
 800c30c:	00db      	lsls	r3, r3, #3
 800c30e:	440b      	add	r3, r1
 800c310:	3314      	adds	r3, #20
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c316:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c31a:	2b0a      	cmp	r3, #10
 800c31c:	d105      	bne.n	800c32a <etharp_find_entry+0x5e>
 800c31e:	7dfb      	ldrb	r3, [r7, #23]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d102      	bne.n	800c32a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c324:	8c3b      	ldrh	r3, [r7, #32]
 800c326:	847b      	strh	r3, [r7, #34]	; 0x22
 800c328:	e095      	b.n	800c456 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c32a:	7dfb      	ldrb	r3, [r7, #23]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f000 8092 	beq.w	800c456 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c332:	7dfb      	ldrb	r3, [r7, #23]
 800c334:	2b01      	cmp	r3, #1
 800c336:	d009      	beq.n	800c34c <etharp_find_entry+0x80>
 800c338:	7dfb      	ldrb	r3, [r7, #23]
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d806      	bhi.n	800c34c <etharp_find_entry+0x80>
 800c33e:	4b99      	ldr	r3, [pc, #612]	; (800c5a4 <etharp_find_entry+0x2d8>)
 800c340:	f240 1223 	movw	r2, #291	; 0x123
 800c344:	4998      	ldr	r1, [pc, #608]	; (800c5a8 <etharp_find_entry+0x2dc>)
 800c346:	4899      	ldr	r0, [pc, #612]	; (800c5ac <etharp_find_entry+0x2e0>)
 800c348:	f002 fac0 	bl	800e8cc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d020      	beq.n	800c394 <etharp_find_entry+0xc8>
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6819      	ldr	r1, [r3, #0]
 800c356:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c35a:	4891      	ldr	r0, [pc, #580]	; (800c5a0 <etharp_find_entry+0x2d4>)
 800c35c:	4613      	mov	r3, r2
 800c35e:	005b      	lsls	r3, r3, #1
 800c360:	4413      	add	r3, r2
 800c362:	00db      	lsls	r3, r3, #3
 800c364:	4403      	add	r3, r0
 800c366:	3304      	adds	r3, #4
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4299      	cmp	r1, r3
 800c36c:	d112      	bne.n	800c394 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00c      	beq.n	800c38e <etharp_find_entry+0xc2>
 800c374:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c378:	4989      	ldr	r1, [pc, #548]	; (800c5a0 <etharp_find_entry+0x2d4>)
 800c37a:	4613      	mov	r3, r2
 800c37c:	005b      	lsls	r3, r3, #1
 800c37e:	4413      	add	r3, r2
 800c380:	00db      	lsls	r3, r3, #3
 800c382:	440b      	add	r3, r1
 800c384:	3308      	adds	r3, #8
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d102      	bne.n	800c394 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c38e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c392:	e100      	b.n	800c596 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c394:	7dfb      	ldrb	r3, [r7, #23]
 800c396:	2b01      	cmp	r3, #1
 800c398:	d140      	bne.n	800c41c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c39a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c39e:	4980      	ldr	r1, [pc, #512]	; (800c5a0 <etharp_find_entry+0x2d4>)
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	005b      	lsls	r3, r3, #1
 800c3a4:	4413      	add	r3, r2
 800c3a6:	00db      	lsls	r3, r3, #3
 800c3a8:	440b      	add	r3, r1
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d01a      	beq.n	800c3e6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c3b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3b4:	497a      	ldr	r1, [pc, #488]	; (800c5a0 <etharp_find_entry+0x2d4>)
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	005b      	lsls	r3, r3, #1
 800c3ba:	4413      	add	r3, r2
 800c3bc:	00db      	lsls	r3, r3, #3
 800c3be:	440b      	add	r3, r1
 800c3c0:	3312      	adds	r3, #18
 800c3c2:	881b      	ldrh	r3, [r3, #0]
 800c3c4:	8bba      	ldrh	r2, [r7, #28]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d845      	bhi.n	800c456 <etharp_find_entry+0x18a>
            old_queue = i;
 800c3ca:	8c3b      	ldrh	r3, [r7, #32]
 800c3cc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c3ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3d2:	4973      	ldr	r1, [pc, #460]	; (800c5a0 <etharp_find_entry+0x2d4>)
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	005b      	lsls	r3, r3, #1
 800c3d8:	4413      	add	r3, r2
 800c3da:	00db      	lsls	r3, r3, #3
 800c3dc:	440b      	add	r3, r1
 800c3de:	3312      	adds	r3, #18
 800c3e0:	881b      	ldrh	r3, [r3, #0]
 800c3e2:	83bb      	strh	r3, [r7, #28]
 800c3e4:	e037      	b.n	800c456 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c3e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3ea:	496d      	ldr	r1, [pc, #436]	; (800c5a0 <etharp_find_entry+0x2d4>)
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	005b      	lsls	r3, r3, #1
 800c3f0:	4413      	add	r3, r2
 800c3f2:	00db      	lsls	r3, r3, #3
 800c3f4:	440b      	add	r3, r1
 800c3f6:	3312      	adds	r3, #18
 800c3f8:	881b      	ldrh	r3, [r3, #0]
 800c3fa:	8b7a      	ldrh	r2, [r7, #26]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d82a      	bhi.n	800c456 <etharp_find_entry+0x18a>
            old_pending = i;
 800c400:	8c3b      	ldrh	r3, [r7, #32]
 800c402:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c404:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c408:	4965      	ldr	r1, [pc, #404]	; (800c5a0 <etharp_find_entry+0x2d4>)
 800c40a:	4613      	mov	r3, r2
 800c40c:	005b      	lsls	r3, r3, #1
 800c40e:	4413      	add	r3, r2
 800c410:	00db      	lsls	r3, r3, #3
 800c412:	440b      	add	r3, r1
 800c414:	3312      	adds	r3, #18
 800c416:	881b      	ldrh	r3, [r3, #0]
 800c418:	837b      	strh	r3, [r7, #26]
 800c41a:	e01c      	b.n	800c456 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c41c:	7dfb      	ldrb	r3, [r7, #23]
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d919      	bls.n	800c456 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c422:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c426:	495e      	ldr	r1, [pc, #376]	; (800c5a0 <etharp_find_entry+0x2d4>)
 800c428:	4613      	mov	r3, r2
 800c42a:	005b      	lsls	r3, r3, #1
 800c42c:	4413      	add	r3, r2
 800c42e:	00db      	lsls	r3, r3, #3
 800c430:	440b      	add	r3, r1
 800c432:	3312      	adds	r3, #18
 800c434:	881b      	ldrh	r3, [r3, #0]
 800c436:	8b3a      	ldrh	r2, [r7, #24]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d80c      	bhi.n	800c456 <etharp_find_entry+0x18a>
            old_stable = i;
 800c43c:	8c3b      	ldrh	r3, [r7, #32]
 800c43e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c440:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c444:	4956      	ldr	r1, [pc, #344]	; (800c5a0 <etharp_find_entry+0x2d4>)
 800c446:	4613      	mov	r3, r2
 800c448:	005b      	lsls	r3, r3, #1
 800c44a:	4413      	add	r3, r2
 800c44c:	00db      	lsls	r3, r3, #3
 800c44e:	440b      	add	r3, r1
 800c450:	3312      	adds	r3, #18
 800c452:	881b      	ldrh	r3, [r3, #0]
 800c454:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c456:	8c3b      	ldrh	r3, [r7, #32]
 800c458:	3301      	adds	r3, #1
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	843b      	strh	r3, [r7, #32]
 800c45e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c462:	2b09      	cmp	r3, #9
 800c464:	f77f af4c 	ble.w	800c300 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c468:	7afb      	ldrb	r3, [r7, #11]
 800c46a:	f003 0302 	and.w	r3, r3, #2
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d108      	bne.n	800c484 <etharp_find_entry+0x1b8>
 800c472:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c476:	2b0a      	cmp	r3, #10
 800c478:	d107      	bne.n	800c48a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c47a:	7afb      	ldrb	r3, [r7, #11]
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	2b00      	cmp	r3, #0
 800c482:	d102      	bne.n	800c48a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c484:	f04f 33ff 	mov.w	r3, #4294967295
 800c488:	e085      	b.n	800c596 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c48a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c48e:	2b09      	cmp	r3, #9
 800c490:	dc02      	bgt.n	800c498 <etharp_find_entry+0x1cc>
    i = empty;
 800c492:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c494:	843b      	strh	r3, [r7, #32]
 800c496:	e039      	b.n	800c50c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c498:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c49c:	2b09      	cmp	r3, #9
 800c49e:	dc14      	bgt.n	800c4ca <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c4a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4a2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c4a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4a8:	493d      	ldr	r1, [pc, #244]	; (800c5a0 <etharp_find_entry+0x2d4>)
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	005b      	lsls	r3, r3, #1
 800c4ae:	4413      	add	r3, r2
 800c4b0:	00db      	lsls	r3, r3, #3
 800c4b2:	440b      	add	r3, r1
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d018      	beq.n	800c4ec <etharp_find_entry+0x220>
 800c4ba:	4b3a      	ldr	r3, [pc, #232]	; (800c5a4 <etharp_find_entry+0x2d8>)
 800c4bc:	f240 126d 	movw	r2, #365	; 0x16d
 800c4c0:	493b      	ldr	r1, [pc, #236]	; (800c5b0 <etharp_find_entry+0x2e4>)
 800c4c2:	483a      	ldr	r0, [pc, #232]	; (800c5ac <etharp_find_entry+0x2e0>)
 800c4c4:	f002 fa02 	bl	800e8cc <iprintf>
 800c4c8:	e010      	b.n	800c4ec <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c4ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c4ce:	2b09      	cmp	r3, #9
 800c4d0:	dc02      	bgt.n	800c4d8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c4d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c4d4:	843b      	strh	r3, [r7, #32]
 800c4d6:	e009      	b.n	800c4ec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c4d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c4dc:	2b09      	cmp	r3, #9
 800c4de:	dc02      	bgt.n	800c4e6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c4e0:	8bfb      	ldrh	r3, [r7, #30]
 800c4e2:	843b      	strh	r3, [r7, #32]
 800c4e4:	e002      	b.n	800c4ec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ea:	e054      	b.n	800c596 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c4ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c4f0:	2b09      	cmp	r3, #9
 800c4f2:	dd06      	ble.n	800c502 <etharp_find_entry+0x236>
 800c4f4:	4b2b      	ldr	r3, [pc, #172]	; (800c5a4 <etharp_find_entry+0x2d8>)
 800c4f6:	f240 127f 	movw	r2, #383	; 0x17f
 800c4fa:	492e      	ldr	r1, [pc, #184]	; (800c5b4 <etharp_find_entry+0x2e8>)
 800c4fc:	482b      	ldr	r0, [pc, #172]	; (800c5ac <etharp_find_entry+0x2e0>)
 800c4fe:	f002 f9e5 	bl	800e8cc <iprintf>
    etharp_free_entry(i);
 800c502:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c506:	4618      	mov	r0, r3
 800c508:	f7ff fe06 	bl	800c118 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c50c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c510:	2b09      	cmp	r3, #9
 800c512:	dd06      	ble.n	800c522 <etharp_find_entry+0x256>
 800c514:	4b23      	ldr	r3, [pc, #140]	; (800c5a4 <etharp_find_entry+0x2d8>)
 800c516:	f240 1283 	movw	r2, #387	; 0x183
 800c51a:	4926      	ldr	r1, [pc, #152]	; (800c5b4 <etharp_find_entry+0x2e8>)
 800c51c:	4823      	ldr	r0, [pc, #140]	; (800c5ac <etharp_find_entry+0x2e0>)
 800c51e:	f002 f9d5 	bl	800e8cc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c522:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c526:	491e      	ldr	r1, [pc, #120]	; (800c5a0 <etharp_find_entry+0x2d4>)
 800c528:	4613      	mov	r3, r2
 800c52a:	005b      	lsls	r3, r3, #1
 800c52c:	4413      	add	r3, r2
 800c52e:	00db      	lsls	r3, r3, #3
 800c530:	440b      	add	r3, r1
 800c532:	3314      	adds	r3, #20
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d006      	beq.n	800c548 <etharp_find_entry+0x27c>
 800c53a:	4b1a      	ldr	r3, [pc, #104]	; (800c5a4 <etharp_find_entry+0x2d8>)
 800c53c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c540:	491d      	ldr	r1, [pc, #116]	; (800c5b8 <etharp_find_entry+0x2ec>)
 800c542:	481a      	ldr	r0, [pc, #104]	; (800c5ac <etharp_find_entry+0x2e0>)
 800c544:	f002 f9c2 	bl	800e8cc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00b      	beq.n	800c566 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c54e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6819      	ldr	r1, [r3, #0]
 800c556:	4812      	ldr	r0, [pc, #72]	; (800c5a0 <etharp_find_entry+0x2d4>)
 800c558:	4613      	mov	r3, r2
 800c55a:	005b      	lsls	r3, r3, #1
 800c55c:	4413      	add	r3, r2
 800c55e:	00db      	lsls	r3, r3, #3
 800c560:	4403      	add	r3, r0
 800c562:	3304      	adds	r3, #4
 800c564:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c566:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c56a:	490d      	ldr	r1, [pc, #52]	; (800c5a0 <etharp_find_entry+0x2d4>)
 800c56c:	4613      	mov	r3, r2
 800c56e:	005b      	lsls	r3, r3, #1
 800c570:	4413      	add	r3, r2
 800c572:	00db      	lsls	r3, r3, #3
 800c574:	440b      	add	r3, r1
 800c576:	3312      	adds	r3, #18
 800c578:	2200      	movs	r2, #0
 800c57a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c57c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c580:	4907      	ldr	r1, [pc, #28]	; (800c5a0 <etharp_find_entry+0x2d4>)
 800c582:	4613      	mov	r3, r2
 800c584:	005b      	lsls	r3, r3, #1
 800c586:	4413      	add	r3, r2
 800c588:	00db      	lsls	r3, r3, #3
 800c58a:	440b      	add	r3, r1
 800c58c:	3308      	adds	r3, #8
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c592:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c596:	4618      	mov	r0, r3
 800c598:	3728      	adds	r7, #40	; 0x28
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	24007b10 	.word	0x24007b10
 800c5a4:	08011a20 	.word	0x08011a20
 800c5a8:	08011a58 	.word	0x08011a58
 800c5ac:	08011a98 	.word	0x08011a98
 800c5b0:	08011ac0 	.word	0x08011ac0
 800c5b4:	08011ad8 	.word	0x08011ad8
 800c5b8:	08011aec 	.word	0x08011aec

0800c5bc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b088      	sub	sp, #32
 800c5c0:	af02      	add	r7, sp, #8
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
 800c5c8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c5d0:	2b06      	cmp	r3, #6
 800c5d2:	d006      	beq.n	800c5e2 <etharp_update_arp_entry+0x26>
 800c5d4:	4b48      	ldr	r3, [pc, #288]	; (800c6f8 <etharp_update_arp_entry+0x13c>)
 800c5d6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c5da:	4948      	ldr	r1, [pc, #288]	; (800c6fc <etharp_update_arp_entry+0x140>)
 800c5dc:	4848      	ldr	r0, [pc, #288]	; (800c700 <etharp_update_arp_entry+0x144>)
 800c5de:	f002 f975 	bl	800e8cc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d012      	beq.n	800c60e <etharp_update_arp_entry+0x52>
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00e      	beq.n	800c60e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68f9      	ldr	r1, [r7, #12]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f001 f924 	bl	800d844 <ip4_addr_isbroadcast_u32>
 800c5fc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d105      	bne.n	800c60e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c60a:	2be0      	cmp	r3, #224	; 0xe0
 800c60c:	d102      	bne.n	800c614 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c60e:	f06f 030f 	mvn.w	r3, #15
 800c612:	e06c      	b.n	800c6ee <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c614:	78fb      	ldrb	r3, [r7, #3]
 800c616:	68fa      	ldr	r2, [r7, #12]
 800c618:	4619      	mov	r1, r3
 800c61a:	68b8      	ldr	r0, [r7, #8]
 800c61c:	f7ff fe56 	bl	800c2cc <etharp_find_entry>
 800c620:	4603      	mov	r3, r0
 800c622:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c624:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	da02      	bge.n	800c632 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c62c:	8afb      	ldrh	r3, [r7, #22]
 800c62e:	b25b      	sxtb	r3, r3
 800c630:	e05d      	b.n	800c6ee <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c632:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c636:	4933      	ldr	r1, [pc, #204]	; (800c704 <etharp_update_arp_entry+0x148>)
 800c638:	4613      	mov	r3, r2
 800c63a:	005b      	lsls	r3, r3, #1
 800c63c:	4413      	add	r3, r2
 800c63e:	00db      	lsls	r3, r3, #3
 800c640:	440b      	add	r3, r1
 800c642:	3314      	adds	r3, #20
 800c644:	2202      	movs	r2, #2
 800c646:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c648:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c64c:	492d      	ldr	r1, [pc, #180]	; (800c704 <etharp_update_arp_entry+0x148>)
 800c64e:	4613      	mov	r3, r2
 800c650:	005b      	lsls	r3, r3, #1
 800c652:	4413      	add	r3, r2
 800c654:	00db      	lsls	r3, r3, #3
 800c656:	440b      	add	r3, r1
 800c658:	3308      	adds	r3, #8
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c65e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c662:	4613      	mov	r3, r2
 800c664:	005b      	lsls	r3, r3, #1
 800c666:	4413      	add	r3, r2
 800c668:	00db      	lsls	r3, r3, #3
 800c66a:	3308      	adds	r3, #8
 800c66c:	4a25      	ldr	r2, [pc, #148]	; (800c704 <etharp_update_arp_entry+0x148>)
 800c66e:	4413      	add	r3, r2
 800c670:	3304      	adds	r3, #4
 800c672:	2206      	movs	r2, #6
 800c674:	6879      	ldr	r1, [r7, #4]
 800c676:	4618      	mov	r0, r3
 800c678:	f002 fa02 	bl	800ea80 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c67c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c680:	4920      	ldr	r1, [pc, #128]	; (800c704 <etharp_update_arp_entry+0x148>)
 800c682:	4613      	mov	r3, r2
 800c684:	005b      	lsls	r3, r3, #1
 800c686:	4413      	add	r3, r2
 800c688:	00db      	lsls	r3, r3, #3
 800c68a:	440b      	add	r3, r1
 800c68c:	3312      	adds	r3, #18
 800c68e:	2200      	movs	r2, #0
 800c690:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c692:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c696:	491b      	ldr	r1, [pc, #108]	; (800c704 <etharp_update_arp_entry+0x148>)
 800c698:	4613      	mov	r3, r2
 800c69a:	005b      	lsls	r3, r3, #1
 800c69c:	4413      	add	r3, r2
 800c69e:	00db      	lsls	r3, r3, #3
 800c6a0:	440b      	add	r3, r1
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d021      	beq.n	800c6ec <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c6a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6ac:	4915      	ldr	r1, [pc, #84]	; (800c704 <etharp_update_arp_entry+0x148>)
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	005b      	lsls	r3, r3, #1
 800c6b2:	4413      	add	r3, r2
 800c6b4:	00db      	lsls	r3, r3, #3
 800c6b6:	440b      	add	r3, r1
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c6bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6c0:	4910      	ldr	r1, [pc, #64]	; (800c704 <etharp_update_arp_entry+0x148>)
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	4413      	add	r3, r2
 800c6c8:	00db      	lsls	r3, r3, #3
 800c6ca:	440b      	add	r3, r1
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c6d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6939      	ldr	r1, [r7, #16]
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f001 ffbd 	bl	800e660 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c6e6:	6938      	ldr	r0, [r7, #16]
 800c6e8:	f7f9 fe28 	bl	800633c <pbuf_free>
  }
  return ERR_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3718      	adds	r7, #24
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	08011a20 	.word	0x08011a20
 800c6fc:	08011b18 	.word	0x08011b18
 800c700:	08011a98 	.word	0x08011a98
 800c704:	24007b10 	.word	0x24007b10

0800c708 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c710:	2300      	movs	r3, #0
 800c712:	60fb      	str	r3, [r7, #12]
 800c714:	e01e      	b.n	800c754 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c716:	4913      	ldr	r1, [pc, #76]	; (800c764 <etharp_cleanup_netif+0x5c>)
 800c718:	68fa      	ldr	r2, [r7, #12]
 800c71a:	4613      	mov	r3, r2
 800c71c:	005b      	lsls	r3, r3, #1
 800c71e:	4413      	add	r3, r2
 800c720:	00db      	lsls	r3, r3, #3
 800c722:	440b      	add	r3, r1
 800c724:	3314      	adds	r3, #20
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c72a:	7afb      	ldrb	r3, [r7, #11]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00e      	beq.n	800c74e <etharp_cleanup_netif+0x46>
 800c730:	490c      	ldr	r1, [pc, #48]	; (800c764 <etharp_cleanup_netif+0x5c>)
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	4613      	mov	r3, r2
 800c736:	005b      	lsls	r3, r3, #1
 800c738:	4413      	add	r3, r2
 800c73a:	00db      	lsls	r3, r3, #3
 800c73c:	440b      	add	r3, r1
 800c73e:	3308      	adds	r3, #8
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	429a      	cmp	r2, r3
 800c746:	d102      	bne.n	800c74e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f7ff fce5 	bl	800c118 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	3301      	adds	r3, #1
 800c752:	60fb      	str	r3, [r7, #12]
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2b09      	cmp	r3, #9
 800c758:	dddd      	ble.n	800c716 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c75a:	bf00      	nop
 800c75c:	bf00      	nop
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	24007b10 	.word	0x24007b10

0800c768 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c768:	b5b0      	push	{r4, r5, r7, lr}
 800c76a:	b08a      	sub	sp, #40	; 0x28
 800c76c:	af04      	add	r7, sp, #16
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d107      	bne.n	800c788 <etharp_input+0x20>
 800c778:	4b3d      	ldr	r3, [pc, #244]	; (800c870 <etharp_input+0x108>)
 800c77a:	f240 228a 	movw	r2, #650	; 0x28a
 800c77e:	493d      	ldr	r1, [pc, #244]	; (800c874 <etharp_input+0x10c>)
 800c780:	483d      	ldr	r0, [pc, #244]	; (800c878 <etharp_input+0x110>)
 800c782:	f002 f8a3 	bl	800e8cc <iprintf>
 800c786:	e06f      	b.n	800c868 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	881b      	ldrh	r3, [r3, #0]
 800c792:	b29b      	uxth	r3, r3
 800c794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c798:	d10c      	bne.n	800c7b4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c79e:	2b06      	cmp	r3, #6
 800c7a0:	d108      	bne.n	800c7b4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c7a6:	2b04      	cmp	r3, #4
 800c7a8:	d104      	bne.n	800c7b4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	885b      	ldrh	r3, [r3, #2]
 800c7ae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c7b0:	2b08      	cmp	r3, #8
 800c7b2:	d003      	beq.n	800c7bc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7f9 fdc1 	bl	800633c <pbuf_free>
    return;
 800c7ba:	e055      	b.n	800c868 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	330e      	adds	r3, #14
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	3318      	adds	r3, #24
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	3304      	adds	r3, #4
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d102      	bne.n	800c7dc <etharp_input+0x74>
    for_us = 0;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	75fb      	strb	r3, [r7, #23]
 800c7da:	e009      	b.n	800c7f0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	bf0c      	ite	eq
 800c7e8:	2301      	moveq	r3, #1
 800c7ea:	2300      	movne	r3, #0
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	f103 0208 	add.w	r2, r3, #8
 800c7f6:	7dfb      	ldrb	r3, [r7, #23]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d001      	beq.n	800c800 <etharp_input+0x98>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e000      	b.n	800c802 <etharp_input+0x9a>
 800c800:	2302      	movs	r3, #2
 800c802:	f107 010c 	add.w	r1, r7, #12
 800c806:	6838      	ldr	r0, [r7, #0]
 800c808:	f7ff fed8 	bl	800c5bc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	88db      	ldrh	r3, [r3, #6]
 800c810:	b29b      	uxth	r3, r3
 800c812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c816:	d003      	beq.n	800c820 <etharp_input+0xb8>
 800c818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c81c:	d01e      	beq.n	800c85c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c81e:	e020      	b.n	800c862 <etharp_input+0xfa>
      if (for_us) {
 800c820:	7dfb      	ldrb	r3, [r7, #23]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d01c      	beq.n	800c860 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c83c:	693a      	ldr	r2, [r7, #16]
 800c83e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c840:	2102      	movs	r1, #2
 800c842:	9103      	str	r1, [sp, #12]
 800c844:	f107 010c 	add.w	r1, r7, #12
 800c848:	9102      	str	r1, [sp, #8]
 800c84a:	9201      	str	r2, [sp, #4]
 800c84c:	9300      	str	r3, [sp, #0]
 800c84e:	462b      	mov	r3, r5
 800c850:	4622      	mov	r2, r4
 800c852:	4601      	mov	r1, r0
 800c854:	6838      	ldr	r0, [r7, #0]
 800c856:	f000 faeb 	bl	800ce30 <etharp_raw>
      break;
 800c85a:	e001      	b.n	800c860 <etharp_input+0xf8>
      break;
 800c85c:	bf00      	nop
 800c85e:	e000      	b.n	800c862 <etharp_input+0xfa>
      break;
 800c860:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f7f9 fd6a 	bl	800633c <pbuf_free>
}
 800c868:	3718      	adds	r7, #24
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bdb0      	pop	{r4, r5, r7, pc}
 800c86e:	bf00      	nop
 800c870:	08011a20 	.word	0x08011a20
 800c874:	08011b70 	.word	0x08011b70
 800c878:	08011a98 	.word	0x08011a98

0800c87c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b086      	sub	sp, #24
 800c880:	af02      	add	r7, sp, #8
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	4613      	mov	r3, r2
 800c888:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c88a:	79fa      	ldrb	r2, [r7, #7]
 800c88c:	4944      	ldr	r1, [pc, #272]	; (800c9a0 <etharp_output_to_arp_index+0x124>)
 800c88e:	4613      	mov	r3, r2
 800c890:	005b      	lsls	r3, r3, #1
 800c892:	4413      	add	r3, r2
 800c894:	00db      	lsls	r3, r3, #3
 800c896:	440b      	add	r3, r1
 800c898:	3314      	adds	r3, #20
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d806      	bhi.n	800c8ae <etharp_output_to_arp_index+0x32>
 800c8a0:	4b40      	ldr	r3, [pc, #256]	; (800c9a4 <etharp_output_to_arp_index+0x128>)
 800c8a2:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c8a6:	4940      	ldr	r1, [pc, #256]	; (800c9a8 <etharp_output_to_arp_index+0x12c>)
 800c8a8:	4840      	ldr	r0, [pc, #256]	; (800c9ac <etharp_output_to_arp_index+0x130>)
 800c8aa:	f002 f80f 	bl	800e8cc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c8ae:	79fa      	ldrb	r2, [r7, #7]
 800c8b0:	493b      	ldr	r1, [pc, #236]	; (800c9a0 <etharp_output_to_arp_index+0x124>)
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	005b      	lsls	r3, r3, #1
 800c8b6:	4413      	add	r3, r2
 800c8b8:	00db      	lsls	r3, r3, #3
 800c8ba:	440b      	add	r3, r1
 800c8bc:	3314      	adds	r3, #20
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	2b02      	cmp	r3, #2
 800c8c2:	d153      	bne.n	800c96c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c8c4:	79fa      	ldrb	r2, [r7, #7]
 800c8c6:	4936      	ldr	r1, [pc, #216]	; (800c9a0 <etharp_output_to_arp_index+0x124>)
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	005b      	lsls	r3, r3, #1
 800c8cc:	4413      	add	r3, r2
 800c8ce:	00db      	lsls	r3, r3, #3
 800c8d0:	440b      	add	r3, r1
 800c8d2:	3312      	adds	r3, #18
 800c8d4:	881b      	ldrh	r3, [r3, #0]
 800c8d6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c8da:	d919      	bls.n	800c910 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c8dc:	79fa      	ldrb	r2, [r7, #7]
 800c8de:	4613      	mov	r3, r2
 800c8e0:	005b      	lsls	r3, r3, #1
 800c8e2:	4413      	add	r3, r2
 800c8e4:	00db      	lsls	r3, r3, #3
 800c8e6:	4a2e      	ldr	r2, [pc, #184]	; (800c9a0 <etharp_output_to_arp_index+0x124>)
 800c8e8:	4413      	add	r3, r2
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f000 fb4c 	bl	800cf8c <etharp_request>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d138      	bne.n	800c96c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c8fa:	79fa      	ldrb	r2, [r7, #7]
 800c8fc:	4928      	ldr	r1, [pc, #160]	; (800c9a0 <etharp_output_to_arp_index+0x124>)
 800c8fe:	4613      	mov	r3, r2
 800c900:	005b      	lsls	r3, r3, #1
 800c902:	4413      	add	r3, r2
 800c904:	00db      	lsls	r3, r3, #3
 800c906:	440b      	add	r3, r1
 800c908:	3314      	adds	r3, #20
 800c90a:	2203      	movs	r2, #3
 800c90c:	701a      	strb	r2, [r3, #0]
 800c90e:	e02d      	b.n	800c96c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c910:	79fa      	ldrb	r2, [r7, #7]
 800c912:	4923      	ldr	r1, [pc, #140]	; (800c9a0 <etharp_output_to_arp_index+0x124>)
 800c914:	4613      	mov	r3, r2
 800c916:	005b      	lsls	r3, r3, #1
 800c918:	4413      	add	r3, r2
 800c91a:	00db      	lsls	r3, r3, #3
 800c91c:	440b      	add	r3, r1
 800c91e:	3312      	adds	r3, #18
 800c920:	881b      	ldrh	r3, [r3, #0]
 800c922:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c926:	d321      	bcc.n	800c96c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c928:	79fa      	ldrb	r2, [r7, #7]
 800c92a:	4613      	mov	r3, r2
 800c92c:	005b      	lsls	r3, r3, #1
 800c92e:	4413      	add	r3, r2
 800c930:	00db      	lsls	r3, r3, #3
 800c932:	4a1b      	ldr	r2, [pc, #108]	; (800c9a0 <etharp_output_to_arp_index+0x124>)
 800c934:	4413      	add	r3, r2
 800c936:	1d19      	adds	r1, r3, #4
 800c938:	79fa      	ldrb	r2, [r7, #7]
 800c93a:	4613      	mov	r3, r2
 800c93c:	005b      	lsls	r3, r3, #1
 800c93e:	4413      	add	r3, r2
 800c940:	00db      	lsls	r3, r3, #3
 800c942:	3308      	adds	r3, #8
 800c944:	4a16      	ldr	r2, [pc, #88]	; (800c9a0 <etharp_output_to_arp_index+0x124>)
 800c946:	4413      	add	r3, r2
 800c948:	3304      	adds	r3, #4
 800c94a:	461a      	mov	r2, r3
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f000 fafb 	bl	800cf48 <etharp_request_dst>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d109      	bne.n	800c96c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c958:	79fa      	ldrb	r2, [r7, #7]
 800c95a:	4911      	ldr	r1, [pc, #68]	; (800c9a0 <etharp_output_to_arp_index+0x124>)
 800c95c:	4613      	mov	r3, r2
 800c95e:	005b      	lsls	r3, r3, #1
 800c960:	4413      	add	r3, r2
 800c962:	00db      	lsls	r3, r3, #3
 800c964:	440b      	add	r3, r1
 800c966:	3314      	adds	r3, #20
 800c968:	2203      	movs	r2, #3
 800c96a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c972:	79fa      	ldrb	r2, [r7, #7]
 800c974:	4613      	mov	r3, r2
 800c976:	005b      	lsls	r3, r3, #1
 800c978:	4413      	add	r3, r2
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	3308      	adds	r3, #8
 800c97e:	4a08      	ldr	r2, [pc, #32]	; (800c9a0 <etharp_output_to_arp_index+0x124>)
 800c980:	4413      	add	r3, r2
 800c982:	3304      	adds	r3, #4
 800c984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c988:	9200      	str	r2, [sp, #0]
 800c98a:	460a      	mov	r2, r1
 800c98c:	68b9      	ldr	r1, [r7, #8]
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f001 fe66 	bl	800e660 <ethernet_output>
 800c994:	4603      	mov	r3, r0
}
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	24007b10 	.word	0x24007b10
 800c9a4:	08011a20 	.word	0x08011a20
 800c9a8:	08011b90 	.word	0x08011b90
 800c9ac:	08011a98 	.word	0x08011a98

0800c9b0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b08a      	sub	sp, #40	; 0x28
 800c9b4:	af02      	add	r7, sp, #8
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d106      	bne.n	800c9d4 <etharp_output+0x24>
 800c9c6:	4b73      	ldr	r3, [pc, #460]	; (800cb94 <etharp_output+0x1e4>)
 800c9c8:	f240 321e 	movw	r2, #798	; 0x31e
 800c9cc:	4972      	ldr	r1, [pc, #456]	; (800cb98 <etharp_output+0x1e8>)
 800c9ce:	4873      	ldr	r0, [pc, #460]	; (800cb9c <etharp_output+0x1ec>)
 800c9d0:	f001 ff7c 	bl	800e8cc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d106      	bne.n	800c9e8 <etharp_output+0x38>
 800c9da:	4b6e      	ldr	r3, [pc, #440]	; (800cb94 <etharp_output+0x1e4>)
 800c9dc:	f240 321f 	movw	r2, #799	; 0x31f
 800c9e0:	496f      	ldr	r1, [pc, #444]	; (800cba0 <etharp_output+0x1f0>)
 800c9e2:	486e      	ldr	r0, [pc, #440]	; (800cb9c <etharp_output+0x1ec>)
 800c9e4:	f001 ff72 	bl	800e8cc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d106      	bne.n	800c9fc <etharp_output+0x4c>
 800c9ee:	4b69      	ldr	r3, [pc, #420]	; (800cb94 <etharp_output+0x1e4>)
 800c9f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c9f4:	496b      	ldr	r1, [pc, #428]	; (800cba4 <etharp_output+0x1f4>)
 800c9f6:	4869      	ldr	r0, [pc, #420]	; (800cb9c <etharp_output+0x1ec>)
 800c9f8:	f001 ff68 	bl	800e8cc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	68f9      	ldr	r1, [r7, #12]
 800ca02:	4618      	mov	r0, r3
 800ca04:	f000 ff1e 	bl	800d844 <ip4_addr_isbroadcast_u32>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d002      	beq.n	800ca14 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ca0e:	4b66      	ldr	r3, [pc, #408]	; (800cba8 <etharp_output+0x1f8>)
 800ca10:	61fb      	str	r3, [r7, #28]
 800ca12:	e0af      	b.n	800cb74 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca1c:	2be0      	cmp	r3, #224	; 0xe0
 800ca1e:	d118      	bne.n	800ca52 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ca20:	2301      	movs	r3, #1
 800ca22:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ca24:	2300      	movs	r3, #0
 800ca26:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ca28:	235e      	movs	r3, #94	; 0x5e
 800ca2a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	3302      	adds	r3, #2
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	3303      	adds	r3, #3
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ca4a:	f107 0310 	add.w	r3, r7, #16
 800ca4e:	61fb      	str	r3, [r7, #28]
 800ca50:	e090      	b.n	800cb74 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	3304      	adds	r3, #4
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	405a      	eors	r2, r3
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3308      	adds	r3, #8
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4013      	ands	r3, r2
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d012      	beq.n	800ca90 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ca70:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d00b      	beq.n	800ca90 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	330c      	adds	r3, #12
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d003      	beq.n	800ca8a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	330c      	adds	r3, #12
 800ca86:	61bb      	str	r3, [r7, #24]
 800ca88:	e002      	b.n	800ca90 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ca8a:	f06f 0303 	mvn.w	r3, #3
 800ca8e:	e07d      	b.n	800cb8c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ca90:	4b46      	ldr	r3, [pc, #280]	; (800cbac <etharp_output+0x1fc>)
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	4619      	mov	r1, r3
 800ca96:	4a46      	ldr	r2, [pc, #280]	; (800cbb0 <etharp_output+0x200>)
 800ca98:	460b      	mov	r3, r1
 800ca9a:	005b      	lsls	r3, r3, #1
 800ca9c:	440b      	add	r3, r1
 800ca9e:	00db      	lsls	r3, r3, #3
 800caa0:	4413      	add	r3, r2
 800caa2:	3314      	adds	r3, #20
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d925      	bls.n	800caf6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800caaa:	4b40      	ldr	r3, [pc, #256]	; (800cbac <etharp_output+0x1fc>)
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	4619      	mov	r1, r3
 800cab0:	4a3f      	ldr	r2, [pc, #252]	; (800cbb0 <etharp_output+0x200>)
 800cab2:	460b      	mov	r3, r1
 800cab4:	005b      	lsls	r3, r3, #1
 800cab6:	440b      	add	r3, r1
 800cab8:	00db      	lsls	r3, r3, #3
 800caba:	4413      	add	r3, r2
 800cabc:	3308      	adds	r3, #8
 800cabe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cac0:	68fa      	ldr	r2, [r7, #12]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d117      	bne.n	800caf6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	4b38      	ldr	r3, [pc, #224]	; (800cbac <etharp_output+0x1fc>)
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	4618      	mov	r0, r3
 800cad0:	4937      	ldr	r1, [pc, #220]	; (800cbb0 <etharp_output+0x200>)
 800cad2:	4603      	mov	r3, r0
 800cad4:	005b      	lsls	r3, r3, #1
 800cad6:	4403      	add	r3, r0
 800cad8:	00db      	lsls	r3, r3, #3
 800cada:	440b      	add	r3, r1
 800cadc:	3304      	adds	r3, #4
 800cade:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d108      	bne.n	800caf6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cae4:	4b31      	ldr	r3, [pc, #196]	; (800cbac <etharp_output+0x1fc>)
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	461a      	mov	r2, r3
 800caea:	68b9      	ldr	r1, [r7, #8]
 800caec:	68f8      	ldr	r0, [r7, #12]
 800caee:	f7ff fec5 	bl	800c87c <etharp_output_to_arp_index>
 800caf2:	4603      	mov	r3, r0
 800caf4:	e04a      	b.n	800cb8c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800caf6:	2300      	movs	r3, #0
 800caf8:	75fb      	strb	r3, [r7, #23]
 800cafa:	e031      	b.n	800cb60 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cafc:	7dfa      	ldrb	r2, [r7, #23]
 800cafe:	492c      	ldr	r1, [pc, #176]	; (800cbb0 <etharp_output+0x200>)
 800cb00:	4613      	mov	r3, r2
 800cb02:	005b      	lsls	r3, r3, #1
 800cb04:	4413      	add	r3, r2
 800cb06:	00db      	lsls	r3, r3, #3
 800cb08:	440b      	add	r3, r1
 800cb0a:	3314      	adds	r3, #20
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d923      	bls.n	800cb5a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cb12:	7dfa      	ldrb	r2, [r7, #23]
 800cb14:	4926      	ldr	r1, [pc, #152]	; (800cbb0 <etharp_output+0x200>)
 800cb16:	4613      	mov	r3, r2
 800cb18:	005b      	lsls	r3, r3, #1
 800cb1a:	4413      	add	r3, r2
 800cb1c:	00db      	lsls	r3, r3, #3
 800cb1e:	440b      	add	r3, r1
 800cb20:	3308      	adds	r3, #8
 800cb22:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d117      	bne.n	800cb5a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	6819      	ldr	r1, [r3, #0]
 800cb2e:	7dfa      	ldrb	r2, [r7, #23]
 800cb30:	481f      	ldr	r0, [pc, #124]	; (800cbb0 <etharp_output+0x200>)
 800cb32:	4613      	mov	r3, r2
 800cb34:	005b      	lsls	r3, r3, #1
 800cb36:	4413      	add	r3, r2
 800cb38:	00db      	lsls	r3, r3, #3
 800cb3a:	4403      	add	r3, r0
 800cb3c:	3304      	adds	r3, #4
 800cb3e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cb40:	4299      	cmp	r1, r3
 800cb42:	d10a      	bne.n	800cb5a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cb44:	4a19      	ldr	r2, [pc, #100]	; (800cbac <etharp_output+0x1fc>)
 800cb46:	7dfb      	ldrb	r3, [r7, #23]
 800cb48:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cb4a:	7dfb      	ldrb	r3, [r7, #23]
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	68b9      	ldr	r1, [r7, #8]
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f7ff fe93 	bl	800c87c <etharp_output_to_arp_index>
 800cb56:	4603      	mov	r3, r0
 800cb58:	e018      	b.n	800cb8c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cb5a:	7dfb      	ldrb	r3, [r7, #23]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	75fb      	strb	r3, [r7, #23]
 800cb60:	7dfb      	ldrb	r3, [r7, #23]
 800cb62:	2b09      	cmp	r3, #9
 800cb64:	d9ca      	bls.n	800cafc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	69b9      	ldr	r1, [r7, #24]
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	f000 f822 	bl	800cbb4 <etharp_query>
 800cb70:	4603      	mov	r3, r0
 800cb72:	e00b      	b.n	800cb8c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cb7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	68b9      	ldr	r1, [r7, #8]
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f001 fd6b 	bl	800e660 <ethernet_output>
 800cb8a:	4603      	mov	r3, r0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3720      	adds	r7, #32
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	08011a20 	.word	0x08011a20
 800cb98:	08011b70 	.word	0x08011b70
 800cb9c:	08011a98 	.word	0x08011a98
 800cba0:	08011bc0 	.word	0x08011bc0
 800cba4:	08011b60 	.word	0x08011b60
 800cba8:	080121d4 	.word	0x080121d4
 800cbac:	24007c00 	.word	0x24007c00
 800cbb0:	24007b10 	.word	0x24007b10

0800cbb4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b08c      	sub	sp, #48	; 0x30
 800cbb8:	af02      	add	r7, sp, #8
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	60b9      	str	r1, [r7, #8]
 800cbbe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	3326      	adds	r3, #38	; 0x26
 800cbc4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cbc6:	23ff      	movs	r3, #255	; 0xff
 800cbc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	68f9      	ldr	r1, [r7, #12]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 fe34 	bl	800d844 <ip4_addr_isbroadcast_u32>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d10c      	bne.n	800cbfc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cbea:	2be0      	cmp	r3, #224	; 0xe0
 800cbec:	d006      	beq.n	800cbfc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d003      	beq.n	800cbfc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d102      	bne.n	800cc02 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cbfc:	f06f 030f 	mvn.w	r3, #15
 800cc00:	e101      	b.n	800ce06 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cc02:	68fa      	ldr	r2, [r7, #12]
 800cc04:	2101      	movs	r1, #1
 800cc06:	68b8      	ldr	r0, [r7, #8]
 800cc08:	f7ff fb60 	bl	800c2cc <etharp_find_entry>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800cc10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	da02      	bge.n	800cc1e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800cc18:	8a7b      	ldrh	r3, [r7, #18]
 800cc1a:	b25b      	sxtb	r3, r3
 800cc1c:	e0f3      	b.n	800ce06 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cc1e:	8a7b      	ldrh	r3, [r7, #18]
 800cc20:	2b7e      	cmp	r3, #126	; 0x7e
 800cc22:	d906      	bls.n	800cc32 <etharp_query+0x7e>
 800cc24:	4b7a      	ldr	r3, [pc, #488]	; (800ce10 <etharp_query+0x25c>)
 800cc26:	f240 32c1 	movw	r2, #961	; 0x3c1
 800cc2a:	497a      	ldr	r1, [pc, #488]	; (800ce14 <etharp_query+0x260>)
 800cc2c:	487a      	ldr	r0, [pc, #488]	; (800ce18 <etharp_query+0x264>)
 800cc2e:	f001 fe4d 	bl	800e8cc <iprintf>
  i = (netif_addr_idx_t)i_err;
 800cc32:	8a7b      	ldrh	r3, [r7, #18]
 800cc34:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cc36:	7c7a      	ldrb	r2, [r7, #17]
 800cc38:	4978      	ldr	r1, [pc, #480]	; (800ce1c <etharp_query+0x268>)
 800cc3a:	4613      	mov	r3, r2
 800cc3c:	005b      	lsls	r3, r3, #1
 800cc3e:	4413      	add	r3, r2
 800cc40:	00db      	lsls	r3, r3, #3
 800cc42:	440b      	add	r3, r1
 800cc44:	3314      	adds	r3, #20
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d115      	bne.n	800cc78 <etharp_query+0xc4>
    is_new_entry = 1;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cc50:	7c7a      	ldrb	r2, [r7, #17]
 800cc52:	4972      	ldr	r1, [pc, #456]	; (800ce1c <etharp_query+0x268>)
 800cc54:	4613      	mov	r3, r2
 800cc56:	005b      	lsls	r3, r3, #1
 800cc58:	4413      	add	r3, r2
 800cc5a:	00db      	lsls	r3, r3, #3
 800cc5c:	440b      	add	r3, r1
 800cc5e:	3314      	adds	r3, #20
 800cc60:	2201      	movs	r2, #1
 800cc62:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800cc64:	7c7a      	ldrb	r2, [r7, #17]
 800cc66:	496d      	ldr	r1, [pc, #436]	; (800ce1c <etharp_query+0x268>)
 800cc68:	4613      	mov	r3, r2
 800cc6a:	005b      	lsls	r3, r3, #1
 800cc6c:	4413      	add	r3, r2
 800cc6e:	00db      	lsls	r3, r3, #3
 800cc70:	440b      	add	r3, r1
 800cc72:	3308      	adds	r3, #8
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cc78:	7c7a      	ldrb	r2, [r7, #17]
 800cc7a:	4968      	ldr	r1, [pc, #416]	; (800ce1c <etharp_query+0x268>)
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	005b      	lsls	r3, r3, #1
 800cc80:	4413      	add	r3, r2
 800cc82:	00db      	lsls	r3, r3, #3
 800cc84:	440b      	add	r3, r1
 800cc86:	3314      	adds	r3, #20
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d011      	beq.n	800ccb2 <etharp_query+0xfe>
 800cc8e:	7c7a      	ldrb	r2, [r7, #17]
 800cc90:	4962      	ldr	r1, [pc, #392]	; (800ce1c <etharp_query+0x268>)
 800cc92:	4613      	mov	r3, r2
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	4413      	add	r3, r2
 800cc98:	00db      	lsls	r3, r3, #3
 800cc9a:	440b      	add	r3, r1
 800cc9c:	3314      	adds	r3, #20
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d806      	bhi.n	800ccb2 <etharp_query+0xfe>
 800cca4:	4b5a      	ldr	r3, [pc, #360]	; (800ce10 <etharp_query+0x25c>)
 800cca6:	f240 32cd 	movw	r2, #973	; 0x3cd
 800ccaa:	495d      	ldr	r1, [pc, #372]	; (800ce20 <etharp_query+0x26c>)
 800ccac:	485a      	ldr	r0, [pc, #360]	; (800ce18 <etharp_query+0x264>)
 800ccae:	f001 fe0d 	bl	800e8cc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ccb2:	6a3b      	ldr	r3, [r7, #32]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d102      	bne.n	800ccbe <etharp_query+0x10a>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d10c      	bne.n	800ccd8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ccbe:	68b9      	ldr	r1, [r7, #8]
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f000 f963 	bl	800cf8c <etharp_request>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d102      	bne.n	800ccd8 <etharp_query+0x124>
      return result;
 800ccd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccd6:	e096      	b.n	800ce06 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d106      	bne.n	800ccec <etharp_query+0x138>
 800ccde:	4b4c      	ldr	r3, [pc, #304]	; (800ce10 <etharp_query+0x25c>)
 800cce0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cce4:	494f      	ldr	r1, [pc, #316]	; (800ce24 <etharp_query+0x270>)
 800cce6:	484c      	ldr	r0, [pc, #304]	; (800ce18 <etharp_query+0x264>)
 800cce8:	f001 fdf0 	bl	800e8cc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ccec:	7c7a      	ldrb	r2, [r7, #17]
 800ccee:	494b      	ldr	r1, [pc, #300]	; (800ce1c <etharp_query+0x268>)
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	005b      	lsls	r3, r3, #1
 800ccf4:	4413      	add	r3, r2
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	440b      	add	r3, r1
 800ccfa:	3314      	adds	r3, #20
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d917      	bls.n	800cd32 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cd02:	4a49      	ldr	r2, [pc, #292]	; (800ce28 <etharp_query+0x274>)
 800cd04:	7c7b      	ldrb	r3, [r7, #17]
 800cd06:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cd08:	7c7a      	ldrb	r2, [r7, #17]
 800cd0a:	4613      	mov	r3, r2
 800cd0c:	005b      	lsls	r3, r3, #1
 800cd0e:	4413      	add	r3, r2
 800cd10:	00db      	lsls	r3, r3, #3
 800cd12:	3308      	adds	r3, #8
 800cd14:	4a41      	ldr	r2, [pc, #260]	; (800ce1c <etharp_query+0x268>)
 800cd16:	4413      	add	r3, r2
 800cd18:	3304      	adds	r3, #4
 800cd1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd1e:	9200      	str	r2, [sp, #0]
 800cd20:	697a      	ldr	r2, [r7, #20]
 800cd22:	6879      	ldr	r1, [r7, #4]
 800cd24:	68f8      	ldr	r0, [r7, #12]
 800cd26:	f001 fc9b 	bl	800e660 <ethernet_output>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd30:	e067      	b.n	800ce02 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cd32:	7c7a      	ldrb	r2, [r7, #17]
 800cd34:	4939      	ldr	r1, [pc, #228]	; (800ce1c <etharp_query+0x268>)
 800cd36:	4613      	mov	r3, r2
 800cd38:	005b      	lsls	r3, r3, #1
 800cd3a:	4413      	add	r3, r2
 800cd3c:	00db      	lsls	r3, r3, #3
 800cd3e:	440b      	add	r3, r1
 800cd40:	3314      	adds	r3, #20
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d15c      	bne.n	800ce02 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cd50:	e01c      	b.n	800cd8c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	895a      	ldrh	r2, [r3, #10]
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	891b      	ldrh	r3, [r3, #8]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d10a      	bne.n	800cd74 <etharp_query+0x1c0>
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d006      	beq.n	800cd74 <etharp_query+0x1c0>
 800cd66:	4b2a      	ldr	r3, [pc, #168]	; (800ce10 <etharp_query+0x25c>)
 800cd68:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cd6c:	492f      	ldr	r1, [pc, #188]	; (800ce2c <etharp_query+0x278>)
 800cd6e:	482a      	ldr	r0, [pc, #168]	; (800ce18 <etharp_query+0x264>)
 800cd70:	f001 fdac 	bl	800e8cc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800cd74:	69fb      	ldr	r3, [r7, #28]
 800cd76:	7b1b      	ldrb	r3, [r3, #12]
 800cd78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <etharp_query+0x1d2>
        copy_needed = 1;
 800cd80:	2301      	movs	r3, #1
 800cd82:	61bb      	str	r3, [r7, #24]
        break;
 800cd84:	e005      	b.n	800cd92 <etharp_query+0x1de>
      }
      p = p->next;
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1df      	bne.n	800cd52 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800cd92:	69bb      	ldr	r3, [r7, #24]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d007      	beq.n	800cda8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800cd9e:	200e      	movs	r0, #14
 800cda0:	f7f9 fd28 	bl	80067f4 <pbuf_clone>
 800cda4:	61f8      	str	r0, [r7, #28]
 800cda6:	e004      	b.n	800cdb2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cdac:	69f8      	ldr	r0, [r7, #28]
 800cdae:	f7f9 fb65 	bl	800647c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d021      	beq.n	800cdfc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800cdb8:	7c7a      	ldrb	r2, [r7, #17]
 800cdba:	4918      	ldr	r1, [pc, #96]	; (800ce1c <etharp_query+0x268>)
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	005b      	lsls	r3, r3, #1
 800cdc0:	4413      	add	r3, r2
 800cdc2:	00db      	lsls	r3, r3, #3
 800cdc4:	440b      	add	r3, r1
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00a      	beq.n	800cde2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800cdcc:	7c7a      	ldrb	r2, [r7, #17]
 800cdce:	4913      	ldr	r1, [pc, #76]	; (800ce1c <etharp_query+0x268>)
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	4413      	add	r3, r2
 800cdd6:	00db      	lsls	r3, r3, #3
 800cdd8:	440b      	add	r3, r1
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7f9 faad 	bl	800633c <pbuf_free>
      }
      arp_table[i].q = p;
 800cde2:	7c7a      	ldrb	r2, [r7, #17]
 800cde4:	490d      	ldr	r1, [pc, #52]	; (800ce1c <etharp_query+0x268>)
 800cde6:	4613      	mov	r3, r2
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	4413      	add	r3, r2
 800cdec:	00db      	lsls	r3, r3, #3
 800cdee:	440b      	add	r3, r1
 800cdf0:	69fa      	ldr	r2, [r7, #28]
 800cdf2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cdfa:	e002      	b.n	800ce02 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cdfc:	23ff      	movs	r3, #255	; 0xff
 800cdfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ce02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3728      	adds	r7, #40	; 0x28
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	08011a20 	.word	0x08011a20
 800ce14:	08011bcc 	.word	0x08011bcc
 800ce18:	08011a98 	.word	0x08011a98
 800ce1c:	24007b10 	.word	0x24007b10
 800ce20:	08011bdc 	.word	0x08011bdc
 800ce24:	08011bc0 	.word	0x08011bc0
 800ce28:	24007c00 	.word	0x24007c00
 800ce2c:	08011c04 	.word	0x08011c04

0800ce30 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b08a      	sub	sp, #40	; 0x28
 800ce34:	af02      	add	r7, sp, #8
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	607a      	str	r2, [r7, #4]
 800ce3c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d106      	bne.n	800ce56 <etharp_raw+0x26>
 800ce48:	4b3a      	ldr	r3, [pc, #232]	; (800cf34 <etharp_raw+0x104>)
 800ce4a:	f240 4257 	movw	r2, #1111	; 0x457
 800ce4e:	493a      	ldr	r1, [pc, #232]	; (800cf38 <etharp_raw+0x108>)
 800ce50:	483a      	ldr	r0, [pc, #232]	; (800cf3c <etharp_raw+0x10c>)
 800ce52:	f001 fd3b 	bl	800e8cc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ce56:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ce5a:	211c      	movs	r1, #28
 800ce5c:	200e      	movs	r0, #14
 800ce5e:	f7f8 ff89 	bl	8005d74 <pbuf_alloc>
 800ce62:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ce64:	69bb      	ldr	r3, [r7, #24]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d102      	bne.n	800ce70 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ce6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce6e:	e05d      	b.n	800cf2c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	895b      	ldrh	r3, [r3, #10]
 800ce74:	2b1b      	cmp	r3, #27
 800ce76:	d806      	bhi.n	800ce86 <etharp_raw+0x56>
 800ce78:	4b2e      	ldr	r3, [pc, #184]	; (800cf34 <etharp_raw+0x104>)
 800ce7a:	f240 4262 	movw	r2, #1122	; 0x462
 800ce7e:	4930      	ldr	r1, [pc, #192]	; (800cf40 <etharp_raw+0x110>)
 800ce80:	482e      	ldr	r0, [pc, #184]	; (800cf3c <etharp_raw+0x10c>)
 800ce82:	f001 fd23 	bl	800e8cc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ce8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7f7 fe3e 	bl	8004b10 <lwip_htons>
 800ce94:	4603      	mov	r3, r0
 800ce96:	461a      	mov	r2, r3
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cea2:	2b06      	cmp	r3, #6
 800cea4:	d006      	beq.n	800ceb4 <etharp_raw+0x84>
 800cea6:	4b23      	ldr	r3, [pc, #140]	; (800cf34 <etharp_raw+0x104>)
 800cea8:	f240 4269 	movw	r2, #1129	; 0x469
 800ceac:	4925      	ldr	r1, [pc, #148]	; (800cf44 <etharp_raw+0x114>)
 800ceae:	4823      	ldr	r0, [pc, #140]	; (800cf3c <etharp_raw+0x10c>)
 800ceb0:	f001 fd0c 	bl	800e8cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	3308      	adds	r3, #8
 800ceb8:	2206      	movs	r2, #6
 800ceba:	6839      	ldr	r1, [r7, #0]
 800cebc:	4618      	mov	r0, r3
 800cebe:	f001 fddf 	bl	800ea80 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	3312      	adds	r3, #18
 800cec6:	2206      	movs	r2, #6
 800cec8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ceca:	4618      	mov	r0, r3
 800cecc:	f001 fdd8 	bl	800ea80 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	330e      	adds	r3, #14
 800ced4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ced6:	6812      	ldr	r2, [r2, #0]
 800ced8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	3318      	adds	r3, #24
 800cede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cee0:	6812      	ldr	r2, [r2, #0]
 800cee2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	2200      	movs	r2, #0
 800cee8:	701a      	strb	r2, [r3, #0]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f042 0201 	orr.w	r2, r2, #1
 800cef0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f042 0208 	orr.w	r2, r2, #8
 800cefa:	709a      	strb	r2, [r3, #2]
 800cefc:	2200      	movs	r2, #0
 800cefe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	2206      	movs	r2, #6
 800cf04:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	2204      	movs	r2, #4
 800cf0a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cf0c:	f640 0306 	movw	r3, #2054	; 0x806
 800cf10:	9300      	str	r3, [sp, #0]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	68ba      	ldr	r2, [r7, #8]
 800cf16:	69b9      	ldr	r1, [r7, #24]
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f001 fba1 	bl	800e660 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cf1e:	69b8      	ldr	r0, [r7, #24]
 800cf20:	f7f9 fa0c 	bl	800633c <pbuf_free>
  p = NULL;
 800cf24:	2300      	movs	r3, #0
 800cf26:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cf28:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3720      	adds	r7, #32
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	08011a20 	.word	0x08011a20
 800cf38:	08011b70 	.word	0x08011b70
 800cf3c:	08011a98 	.word	0x08011a98
 800cf40:	08011c20 	.word	0x08011c20
 800cf44:	08011c54 	.word	0x08011c54

0800cf48 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b088      	sub	sp, #32
 800cf4c:	af04      	add	r7, sp, #16
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cf64:	2201      	movs	r2, #1
 800cf66:	9203      	str	r2, [sp, #12]
 800cf68:	68ba      	ldr	r2, [r7, #8]
 800cf6a:	9202      	str	r2, [sp, #8]
 800cf6c:	4a06      	ldr	r2, [pc, #24]	; (800cf88 <etharp_request_dst+0x40>)
 800cf6e:	9201      	str	r2, [sp, #4]
 800cf70:	9300      	str	r3, [sp, #0]
 800cf72:	4603      	mov	r3, r0
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f7ff ff5a 	bl	800ce30 <etharp_raw>
 800cf7c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	080121dc 	.word	0x080121dc

0800cf8c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800cf96:	4a05      	ldr	r2, [pc, #20]	; (800cfac <etharp_request+0x20>)
 800cf98:	6839      	ldr	r1, [r7, #0]
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f7ff ffd4 	bl	800cf48 <etharp_request_dst>
 800cfa0:	4603      	mov	r3, r0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	080121d4 	.word	0x080121d4

0800cfb0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b08e      	sub	sp, #56	; 0x38
 800cfb4:	af04      	add	r7, sp, #16
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800cfba:	4b87      	ldr	r3, [pc, #540]	; (800d1d8 <icmp_input+0x228>)
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	f003 030f 	and.w	r3, r3, #15
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800cfd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cfd2:	2b13      	cmp	r3, #19
 800cfd4:	f240 80e8 	bls.w	800d1a8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	895b      	ldrh	r3, [r3, #10]
 800cfdc:	2b03      	cmp	r3, #3
 800cfde:	f240 80e5 	bls.w	800d1ac <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800cfec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	f000 80d2 	beq.w	800d19a <icmp_input+0x1ea>
 800cff6:	2b08      	cmp	r3, #8
 800cff8:	f040 80d2 	bne.w	800d1a0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800cffc:	4b77      	ldr	r3, [pc, #476]	; (800d1dc <icmp_input+0x22c>)
 800cffe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d000:	4b75      	ldr	r3, [pc, #468]	; (800d1d8 <icmp_input+0x228>)
 800d002:	695b      	ldr	r3, [r3, #20]
 800d004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d008:	2be0      	cmp	r3, #224	; 0xe0
 800d00a:	f000 80d6 	beq.w	800d1ba <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d00e:	4b72      	ldr	r3, [pc, #456]	; (800d1d8 <icmp_input+0x228>)
 800d010:	695b      	ldr	r3, [r3, #20]
 800d012:	4a71      	ldr	r2, [pc, #452]	; (800d1d8 <icmp_input+0x228>)
 800d014:	6812      	ldr	r2, [r2, #0]
 800d016:	4611      	mov	r1, r2
 800d018:	4618      	mov	r0, r3
 800d01a:	f000 fc13 	bl	800d844 <ip4_addr_isbroadcast_u32>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	f040 80cc 	bne.w	800d1be <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	891b      	ldrh	r3, [r3, #8]
 800d02a:	2b07      	cmp	r3, #7
 800d02c:	f240 80c0 	bls.w	800d1b0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f7f7 fe0a 	bl	8004c4a <inet_chksum_pbuf>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d003      	beq.n	800d044 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f7f9 f97d 	bl	800633c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800d042:	e0c5      	b.n	800d1d0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d044:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d046:	330e      	adds	r3, #14
 800d048:	4619      	mov	r1, r3
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f7f9 f8e0 	bl	8006210 <pbuf_add_header>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d04b      	beq.n	800d0ee <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	891a      	ldrh	r2, [r3, #8]
 800d05a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d05c:	4413      	add	r3, r2
 800d05e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	891b      	ldrh	r3, [r3, #8]
 800d064:	8b7a      	ldrh	r2, [r7, #26]
 800d066:	429a      	cmp	r2, r3
 800d068:	f0c0 80ab 	bcc.w	800d1c2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d06c:	8b7b      	ldrh	r3, [r7, #26]
 800d06e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d072:	4619      	mov	r1, r3
 800d074:	200e      	movs	r0, #14
 800d076:	f7f8 fe7d 	bl	8005d74 <pbuf_alloc>
 800d07a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 80a1 	beq.w	800d1c6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	895b      	ldrh	r3, [r3, #10]
 800d088:	461a      	mov	r2, r3
 800d08a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d08c:	3308      	adds	r3, #8
 800d08e:	429a      	cmp	r2, r3
 800d090:	d203      	bcs.n	800d09a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d092:	6978      	ldr	r0, [r7, #20]
 800d094:	f7f9 f952 	bl	800633c <pbuf_free>
          goto icmperr;
 800d098:	e096      	b.n	800d1c8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d0a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f001 fcec 	bl	800ea80 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d0a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	6978      	ldr	r0, [r7, #20]
 800d0ae:	f7f9 f8bf 	bl	8006230 <pbuf_remove_header>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d009      	beq.n	800d0cc <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d0b8:	4b49      	ldr	r3, [pc, #292]	; (800d1e0 <icmp_input+0x230>)
 800d0ba:	22b6      	movs	r2, #182	; 0xb6
 800d0bc:	4949      	ldr	r1, [pc, #292]	; (800d1e4 <icmp_input+0x234>)
 800d0be:	484a      	ldr	r0, [pc, #296]	; (800d1e8 <icmp_input+0x238>)
 800d0c0:	f001 fc04 	bl	800e8cc <iprintf>
          pbuf_free(r);
 800d0c4:	6978      	ldr	r0, [r7, #20]
 800d0c6:	f7f9 f939 	bl	800633c <pbuf_free>
          goto icmperr;
 800d0ca:	e07d      	b.n	800d1c8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d0cc:	6879      	ldr	r1, [r7, #4]
 800d0ce:	6978      	ldr	r0, [r7, #20]
 800d0d0:	f7f9 fa4c 	bl	800656c <pbuf_copy>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d003      	beq.n	800d0e2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d0da:	6978      	ldr	r0, [r7, #20]
 800d0dc:	f7f9 f92e 	bl	800633c <pbuf_free>
          goto icmperr;
 800d0e0:	e072      	b.n	800d1c8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7f9 f92a 	bl	800633c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	607b      	str	r3, [r7, #4]
 800d0ec:	e00f      	b.n	800d10e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d0ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0f0:	330e      	adds	r3, #14
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f7f9 f89b 	bl	8006230 <pbuf_remove_header>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d006      	beq.n	800d10e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d100:	4b37      	ldr	r3, [pc, #220]	; (800d1e0 <icmp_input+0x230>)
 800d102:	22c7      	movs	r2, #199	; 0xc7
 800d104:	4939      	ldr	r1, [pc, #228]	; (800d1ec <icmp_input+0x23c>)
 800d106:	4838      	ldr	r0, [pc, #224]	; (800d1e8 <icmp_input+0x238>)
 800d108:	f001 fbe0 	bl	800e8cc <iprintf>
          goto icmperr;
 800d10c:	e05c      	b.n	800d1c8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d114:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d116:	4619      	mov	r1, r3
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f7f9 f879 	bl	8006210 <pbuf_add_header>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d13c      	bne.n	800d19e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d132:	4b29      	ldr	r3, [pc, #164]	; (800d1d8 <icmp_input+0x228>)
 800d134:	691a      	ldr	r2, [r3, #16]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	2200      	movs	r2, #0
 800d13e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	885b      	ldrh	r3, [r3, #2]
 800d144:	b29b      	uxth	r3, r3
 800d146:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d907      	bls.n	800d15e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	885b      	ldrh	r3, [r3, #2]
 800d152:	b29b      	uxth	r3, r3
 800d154:	3309      	adds	r3, #9
 800d156:	b29a      	uxth	r2, r3
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	805a      	strh	r2, [r3, #2]
 800d15c:	e006      	b.n	800d16c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	885b      	ldrh	r3, [r3, #2]
 800d162:	b29b      	uxth	r3, r3
 800d164:	3308      	adds	r3, #8
 800d166:	b29a      	uxth	r2, r3
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	22ff      	movs	r2, #255	; 0xff
 800d170:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2200      	movs	r2, #0
 800d176:	729a      	strb	r2, [r3, #10]
 800d178:	2200      	movs	r2, #0
 800d17a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	9302      	str	r3, [sp, #8]
 800d180:	2301      	movs	r3, #1
 800d182:	9301      	str	r3, [sp, #4]
 800d184:	2300      	movs	r3, #0
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	23ff      	movs	r3, #255	; 0xff
 800d18a:	2200      	movs	r2, #0
 800d18c:	69f9      	ldr	r1, [r7, #28]
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 fa80 	bl	800d694 <ip4_output_if>
 800d194:	4603      	mov	r3, r0
 800d196:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d198:	e001      	b.n	800d19e <icmp_input+0x1ee>
      break;
 800d19a:	bf00      	nop
 800d19c:	e000      	b.n	800d1a0 <icmp_input+0x1f0>
      break;
 800d19e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7f9 f8cb 	bl	800633c <pbuf_free>
  return;
 800d1a6:	e013      	b.n	800d1d0 <icmp_input+0x220>
    goto lenerr;
 800d1a8:	bf00      	nop
 800d1aa:	e002      	b.n	800d1b2 <icmp_input+0x202>
    goto lenerr;
 800d1ac:	bf00      	nop
 800d1ae:	e000      	b.n	800d1b2 <icmp_input+0x202>
        goto lenerr;
 800d1b0:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7f9 f8c2 	bl	800633c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d1b8:	e00a      	b.n	800d1d0 <icmp_input+0x220>
        goto icmperr;
 800d1ba:	bf00      	nop
 800d1bc:	e004      	b.n	800d1c8 <icmp_input+0x218>
        goto icmperr;
 800d1be:	bf00      	nop
 800d1c0:	e002      	b.n	800d1c8 <icmp_input+0x218>
          goto icmperr;
 800d1c2:	bf00      	nop
 800d1c4:	e000      	b.n	800d1c8 <icmp_input+0x218>
          goto icmperr;
 800d1c6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7f9 f8b7 	bl	800633c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d1ce:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d1d0:	3728      	adds	r7, #40	; 0x28
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	24004b94 	.word	0x24004b94
 800d1dc:	24004ba8 	.word	0x24004ba8
 800d1e0:	08011c98 	.word	0x08011c98
 800d1e4:	08011cd0 	.word	0x08011cd0
 800d1e8:	08011d08 	.word	0x08011d08
 800d1ec:	08011d30 	.word	0x08011d30

0800d1f0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d1fc:	78fb      	ldrb	r3, [r7, #3]
 800d1fe:	461a      	mov	r2, r3
 800d200:	2103      	movs	r1, #3
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 f814 	bl	800d230 <icmp_send_response>
}
 800d208:	bf00      	nop
 800d20a:	3708      	adds	r7, #8
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	460b      	mov	r3, r1
 800d21a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d21c:	78fb      	ldrb	r3, [r7, #3]
 800d21e:	461a      	mov	r2, r3
 800d220:	210b      	movs	r1, #11
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 f804 	bl	800d230 <icmp_send_response>
}
 800d228:	bf00      	nop
 800d22a:	3708      	adds	r7, #8
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b08c      	sub	sp, #48	; 0x30
 800d234:	af04      	add	r7, sp, #16
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	460b      	mov	r3, r1
 800d23a:	70fb      	strb	r3, [r7, #3]
 800d23c:	4613      	mov	r3, r2
 800d23e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d240:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d244:	2124      	movs	r1, #36	; 0x24
 800d246:	2022      	movs	r0, #34	; 0x22
 800d248:	f7f8 fd94 	bl	8005d74 <pbuf_alloc>
 800d24c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d056      	beq.n	800d302 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	895b      	ldrh	r3, [r3, #10]
 800d258:	2b23      	cmp	r3, #35	; 0x23
 800d25a:	d806      	bhi.n	800d26a <icmp_send_response+0x3a>
 800d25c:	4b2b      	ldr	r3, [pc, #172]	; (800d30c <icmp_send_response+0xdc>)
 800d25e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d262:	492b      	ldr	r1, [pc, #172]	; (800d310 <icmp_send_response+0xe0>)
 800d264:	482b      	ldr	r0, [pc, #172]	; (800d314 <icmp_send_response+0xe4>)
 800d266:	f001 fb31 	bl	800e8cc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	78fa      	ldrb	r2, [r7, #3]
 800d27a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	78ba      	ldrb	r2, [r7, #2]
 800d280:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	2200      	movs	r2, #0
 800d286:	711a      	strb	r2, [r3, #4]
 800d288:	2200      	movs	r2, #0
 800d28a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	2200      	movs	r2, #0
 800d290:	719a      	strb	r2, [r3, #6]
 800d292:	2200      	movs	r2, #0
 800d294:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	f103 0008 	add.w	r0, r3, #8
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	221c      	movs	r2, #28
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	f001 fbeb 	bl	800ea80 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	68db      	ldr	r3, [r3, #12]
 800d2ae:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d2b0:	f107 030c 	add.w	r3, r7, #12
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f000 f82f 	bl	800d318 <ip4_route>
 800d2ba:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d01b      	beq.n	800d2fa <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	709a      	strb	r2, [r3, #2]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	895b      	ldrh	r3, [r3, #10]
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	6978      	ldr	r0, [r7, #20]
 800d2d4:	f7f7 fca7 	bl	8004c26 <inet_chksum>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	461a      	mov	r2, r3
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d2e0:	f107 020c 	add.w	r2, r7, #12
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	9302      	str	r3, [sp, #8]
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	9301      	str	r3, [sp, #4]
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	23ff      	movs	r3, #255	; 0xff
 800d2f2:	2100      	movs	r1, #0
 800d2f4:	69f8      	ldr	r0, [r7, #28]
 800d2f6:	f000 f9cd 	bl	800d694 <ip4_output_if>
  }
  pbuf_free(q);
 800d2fa:	69f8      	ldr	r0, [r7, #28]
 800d2fc:	f7f9 f81e 	bl	800633c <pbuf_free>
 800d300:	e000      	b.n	800d304 <icmp_send_response+0xd4>
    return;
 800d302:	bf00      	nop
}
 800d304:	3720      	adds	r7, #32
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	08011c98 	.word	0x08011c98
 800d310:	08011d64 	.word	0x08011d64
 800d314:	08011d08 	.word	0x08011d08

0800d318 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d318:	b480      	push	{r7}
 800d31a:	b085      	sub	sp, #20
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d320:	4b33      	ldr	r3, [pc, #204]	; (800d3f0 <ip4_route+0xd8>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	60fb      	str	r3, [r7, #12]
 800d326:	e036      	b.n	800d396 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d32e:	f003 0301 	and.w	r3, r3, #1
 800d332:	b2db      	uxtb	r3, r3
 800d334:	2b00      	cmp	r3, #0
 800d336:	d02b      	beq.n	800d390 <ip4_route+0x78>
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d33e:	089b      	lsrs	r3, r3, #2
 800d340:	f003 0301 	and.w	r3, r3, #1
 800d344:	b2db      	uxtb	r3, r3
 800d346:	2b00      	cmp	r3, #0
 800d348:	d022      	beq.n	800d390 <ip4_route+0x78>
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	3304      	adds	r3, #4
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d01d      	beq.n	800d390 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	3304      	adds	r3, #4
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	405a      	eors	r2, r3
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	3308      	adds	r3, #8
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4013      	ands	r3, r2
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d101      	bne.n	800d370 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	e038      	b.n	800d3e2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d376:	f003 0302 	and.w	r3, r3, #2
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d108      	bne.n	800d390 <ip4_route+0x78>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	330c      	adds	r3, #12
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d101      	bne.n	800d390 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	e028      	b.n	800d3e2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	60fb      	str	r3, [r7, #12]
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d1c5      	bne.n	800d328 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d39c:	4b15      	ldr	r3, [pc, #84]	; (800d3f4 <ip4_route+0xdc>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d01a      	beq.n	800d3da <ip4_route+0xc2>
 800d3a4:	4b13      	ldr	r3, [pc, #76]	; (800d3f4 <ip4_route+0xdc>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3ac:	f003 0301 	and.w	r3, r3, #1
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d012      	beq.n	800d3da <ip4_route+0xc2>
 800d3b4:	4b0f      	ldr	r3, [pc, #60]	; (800d3f4 <ip4_route+0xdc>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3bc:	f003 0304 	and.w	r3, r3, #4
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00a      	beq.n	800d3da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d3c4:	4b0b      	ldr	r3, [pc, #44]	; (800d3f4 <ip4_route+0xdc>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d004      	beq.n	800d3da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b7f      	cmp	r3, #127	; 0x7f
 800d3d8:	d101      	bne.n	800d3de <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	e001      	b.n	800d3e2 <ip4_route+0xca>
  }

  return netif_default;
 800d3de:	4b05      	ldr	r3, [pc, #20]	; (800d3f4 <ip4_route+0xdc>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3714      	adds	r7, #20
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	24007aa4 	.word	0x24007aa4
 800d3f4:	24007aa8 	.word	0x24007aa8

0800d3f8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d406:	f003 0301 	and.w	r3, r3, #1
 800d40a:	b2db      	uxtb	r3, r3
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d016      	beq.n	800d43e <ip4_input_accept+0x46>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	3304      	adds	r3, #4
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d011      	beq.n	800d43e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d41a:	4b0b      	ldr	r3, [pc, #44]	; (800d448 <ip4_input_accept+0x50>)
 800d41c:	695a      	ldr	r2, [r3, #20]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	3304      	adds	r3, #4
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	429a      	cmp	r2, r3
 800d426:	d008      	beq.n	800d43a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d428:	4b07      	ldr	r3, [pc, #28]	; (800d448 <ip4_input_accept+0x50>)
 800d42a:	695b      	ldr	r3, [r3, #20]
 800d42c:	6879      	ldr	r1, [r7, #4]
 800d42e:	4618      	mov	r0, r3
 800d430:	f000 fa08 	bl	800d844 <ip4_addr_isbroadcast_u32>
 800d434:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d436:	2b00      	cmp	r3, #0
 800d438:	d001      	beq.n	800d43e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d43a:	2301      	movs	r3, #1
 800d43c:	e000      	b.n	800d440 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3708      	adds	r7, #8
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	24004b94 	.word	0x24004b94

0800d44c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b086      	sub	sp, #24
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	091b      	lsrs	r3, r3, #4
 800d462:	b2db      	uxtb	r3, r3
 800d464:	2b04      	cmp	r3, #4
 800d466:	d004      	beq.n	800d472 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f7f8 ff67 	bl	800633c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d46e:	2300      	movs	r3, #0
 800d470:	e107      	b.n	800d682 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	f003 030f 	and.w	r3, r3, #15
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	885b      	ldrh	r3, [r3, #2]
 800d486:	b29b      	uxth	r3, r3
 800d488:	4618      	mov	r0, r3
 800d48a:	f7f7 fb41 	bl	8004b10 <lwip_htons>
 800d48e:	4603      	mov	r3, r0
 800d490:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	891b      	ldrh	r3, [r3, #8]
 800d496:	89ba      	ldrh	r2, [r7, #12]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d204      	bcs.n	800d4a6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d49c:	89bb      	ldrh	r3, [r7, #12]
 800d49e:	4619      	mov	r1, r3
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f7f8 fdc5 	bl	8006030 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	895b      	ldrh	r3, [r3, #10]
 800d4aa:	89fa      	ldrh	r2, [r7, #14]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d807      	bhi.n	800d4c0 <ip4_input+0x74>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	891b      	ldrh	r3, [r3, #8]
 800d4b4:	89ba      	ldrh	r2, [r7, #12]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d802      	bhi.n	800d4c0 <ip4_input+0x74>
 800d4ba:	89fb      	ldrh	r3, [r7, #14]
 800d4bc:	2b13      	cmp	r3, #19
 800d4be:	d804      	bhi.n	800d4ca <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f7f8 ff3b 	bl	800633c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	e0db      	b.n	800d682 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	691b      	ldr	r3, [r3, #16]
 800d4ce:	4a6f      	ldr	r2, [pc, #444]	; (800d68c <ip4_input+0x240>)
 800d4d0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	68db      	ldr	r3, [r3, #12]
 800d4d6:	4a6d      	ldr	r2, [pc, #436]	; (800d68c <ip4_input+0x240>)
 800d4d8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d4da:	4b6c      	ldr	r3, [pc, #432]	; (800d68c <ip4_input+0x240>)
 800d4dc:	695b      	ldr	r3, [r3, #20]
 800d4de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4e2:	2be0      	cmp	r3, #224	; 0xe0
 800d4e4:	d112      	bne.n	800d50c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4ec:	f003 0301 	and.w	r3, r3, #1
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d007      	beq.n	800d506 <ip4_input+0xba>
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d002      	beq.n	800d506 <ip4_input+0xba>
      netif = inp;
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	613b      	str	r3, [r7, #16]
 800d504:	e02a      	b.n	800d55c <ip4_input+0x110>
    } else {
      netif = NULL;
 800d506:	2300      	movs	r3, #0
 800d508:	613b      	str	r3, [r7, #16]
 800d50a:	e027      	b.n	800d55c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d50c:	6838      	ldr	r0, [r7, #0]
 800d50e:	f7ff ff73 	bl	800d3f8 <ip4_input_accept>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d002      	beq.n	800d51e <ip4_input+0xd2>
      netif = inp;
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	613b      	str	r3, [r7, #16]
 800d51c:	e01e      	b.n	800d55c <ip4_input+0x110>
    } else {
      netif = NULL;
 800d51e:	2300      	movs	r3, #0
 800d520:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d522:	4b5a      	ldr	r3, [pc, #360]	; (800d68c <ip4_input+0x240>)
 800d524:	695b      	ldr	r3, [r3, #20]
 800d526:	b2db      	uxtb	r3, r3
 800d528:	2b7f      	cmp	r3, #127	; 0x7f
 800d52a:	d017      	beq.n	800d55c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d52c:	4b58      	ldr	r3, [pc, #352]	; (800d690 <ip4_input+0x244>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	613b      	str	r3, [r7, #16]
 800d532:	e00e      	b.n	800d552 <ip4_input+0x106>
          if (netif == inp) {
 800d534:	693a      	ldr	r2, [r7, #16]
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d006      	beq.n	800d54a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d53c:	6938      	ldr	r0, [r7, #16]
 800d53e:	f7ff ff5b 	bl	800d3f8 <ip4_input_accept>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d108      	bne.n	800d55a <ip4_input+0x10e>
 800d548:	e000      	b.n	800d54c <ip4_input+0x100>
            continue;
 800d54a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	613b      	str	r3, [r7, #16]
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d1ed      	bne.n	800d534 <ip4_input+0xe8>
 800d558:	e000      	b.n	800d55c <ip4_input+0x110>
            break;
 800d55a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d55c:	4b4b      	ldr	r3, [pc, #300]	; (800d68c <ip4_input+0x240>)
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	6839      	ldr	r1, [r7, #0]
 800d562:	4618      	mov	r0, r3
 800d564:	f000 f96e 	bl	800d844 <ip4_addr_isbroadcast_u32>
 800d568:	4603      	mov	r3, r0
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d105      	bne.n	800d57a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d56e:	4b47      	ldr	r3, [pc, #284]	; (800d68c <ip4_input+0x240>)
 800d570:	691b      	ldr	r3, [r3, #16]
 800d572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d576:	2be0      	cmp	r3, #224	; 0xe0
 800d578:	d104      	bne.n	800d584 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f7f8 fede 	bl	800633c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d580:	2300      	movs	r3, #0
 800d582:	e07e      	b.n	800d682 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d104      	bne.n	800d594 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f7f8 fed6 	bl	800633c <pbuf_free>
    return ERR_OK;
 800d590:	2300      	movs	r3, #0
 800d592:	e076      	b.n	800d682 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	88db      	ldrh	r3, [r3, #6]
 800d598:	b29b      	uxth	r3, r3
 800d59a:	461a      	mov	r2, r3
 800d59c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00b      	beq.n	800d5be <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 fc92 	bl	800ded0 <ip4_reass>
 800d5ac:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d101      	bne.n	800d5b8 <ip4_input+0x16c>
      return ERR_OK;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	e064      	b.n	800d682 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d5be:	4a33      	ldr	r2, [pc, #204]	; (800d68c <ip4_input+0x240>)
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d5c4:	4a31      	ldr	r2, [pc, #196]	; (800d68c <ip4_input+0x240>)
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d5ca:	4a30      	ldr	r2, [pc, #192]	; (800d68c <ip4_input+0x240>)
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	f003 030f 	and.w	r3, r3, #15
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	b29a      	uxth	r2, r3
 800d5e0:	4b2a      	ldr	r3, [pc, #168]	; (800d68c <ip4_input+0x240>)
 800d5e2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d5e4:	89fb      	ldrh	r3, [r7, #14]
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7f8 fe21 	bl	8006230 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	7a5b      	ldrb	r3, [r3, #9]
 800d5f2:	2b11      	cmp	r3, #17
 800d5f4:	d006      	beq.n	800d604 <ip4_input+0x1b8>
 800d5f6:	2b11      	cmp	r3, #17
 800d5f8:	dc13      	bgt.n	800d622 <ip4_input+0x1d6>
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d00c      	beq.n	800d618 <ip4_input+0x1cc>
 800d5fe:	2b06      	cmp	r3, #6
 800d600:	d005      	beq.n	800d60e <ip4_input+0x1c2>
 800d602:	e00e      	b.n	800d622 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d604:	6839      	ldr	r1, [r7, #0]
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f7fe fc42 	bl	800be90 <udp_input>
        break;
 800d60c:	e026      	b.n	800d65c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d60e:	6839      	ldr	r1, [r7, #0]
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f7fa fcbb 	bl	8007f8c <tcp_input>
        break;
 800d616:	e021      	b.n	800d65c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d618:	6839      	ldr	r1, [r7, #0]
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f7ff fcc8 	bl	800cfb0 <icmp_input>
        break;
 800d620:	e01c      	b.n	800d65c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d622:	4b1a      	ldr	r3, [pc, #104]	; (800d68c <ip4_input+0x240>)
 800d624:	695b      	ldr	r3, [r3, #20]
 800d626:	6939      	ldr	r1, [r7, #16]
 800d628:	4618      	mov	r0, r3
 800d62a:	f000 f90b 	bl	800d844 <ip4_addr_isbroadcast_u32>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d10f      	bne.n	800d654 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d634:	4b15      	ldr	r3, [pc, #84]	; (800d68c <ip4_input+0x240>)
 800d636:	695b      	ldr	r3, [r3, #20]
 800d638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d63c:	2be0      	cmp	r3, #224	; 0xe0
 800d63e:	d009      	beq.n	800d654 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d640:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d644:	4619      	mov	r1, r3
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f7f8 fe65 	bl	8006316 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d64c:	2102      	movs	r1, #2
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f7ff fdce 	bl	800d1f0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f7f8 fe71 	bl	800633c <pbuf_free>
        break;
 800d65a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d65c:	4b0b      	ldr	r3, [pc, #44]	; (800d68c <ip4_input+0x240>)
 800d65e:	2200      	movs	r2, #0
 800d660:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d662:	4b0a      	ldr	r3, [pc, #40]	; (800d68c <ip4_input+0x240>)
 800d664:	2200      	movs	r2, #0
 800d666:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d668:	4b08      	ldr	r3, [pc, #32]	; (800d68c <ip4_input+0x240>)
 800d66a:	2200      	movs	r2, #0
 800d66c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d66e:	4b07      	ldr	r3, [pc, #28]	; (800d68c <ip4_input+0x240>)
 800d670:	2200      	movs	r2, #0
 800d672:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d674:	4b05      	ldr	r3, [pc, #20]	; (800d68c <ip4_input+0x240>)
 800d676:	2200      	movs	r2, #0
 800d678:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d67a:	4b04      	ldr	r3, [pc, #16]	; (800d68c <ip4_input+0x240>)
 800d67c:	2200      	movs	r2, #0
 800d67e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d680:	2300      	movs	r3, #0
}
 800d682:	4618      	mov	r0, r3
 800d684:	3718      	adds	r7, #24
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	24004b94 	.word	0x24004b94
 800d690:	24007aa4 	.word	0x24007aa4

0800d694 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b08a      	sub	sp, #40	; 0x28
 800d698:	af04      	add	r7, sp, #16
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	607a      	str	r2, [r7, #4]
 800d6a0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d009      	beq.n	800d6c0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d003      	beq.n	800d6ba <ip4_output_if+0x26>
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d102      	bne.n	800d6c0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6bc:	3304      	adds	r3, #4
 800d6be:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d6c0:	78fa      	ldrb	r2, [r7, #3]
 800d6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c4:	9302      	str	r3, [sp, #8]
 800d6c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d6ca:	9301      	str	r3, [sp, #4]
 800d6cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d6d0:	9300      	str	r3, [sp, #0]
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	6979      	ldr	r1, [r7, #20]
 800d6d8:	68f8      	ldr	r0, [r7, #12]
 800d6da:	f000 f805 	bl	800d6e8 <ip4_output_if_src>
 800d6de:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3718      	adds	r7, #24
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b088      	sub	sp, #32
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	607a      	str	r2, [r7, #4]
 800d6f4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	7b9b      	ldrb	r3, [r3, #14]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d006      	beq.n	800d70c <ip4_output_if_src+0x24>
 800d6fe:	4b4b      	ldr	r3, [pc, #300]	; (800d82c <ip4_output_if_src+0x144>)
 800d700:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d704:	494a      	ldr	r1, [pc, #296]	; (800d830 <ip4_output_if_src+0x148>)
 800d706:	484b      	ldr	r0, [pc, #300]	; (800d834 <ip4_output_if_src+0x14c>)
 800d708:	f001 f8e0 	bl	800e8cc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d060      	beq.n	800d7d4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d712:	2314      	movs	r3, #20
 800d714:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d716:	2114      	movs	r1, #20
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	f7f8 fd79 	bl	8006210 <pbuf_add_header>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d002      	beq.n	800d72a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d724:	f06f 0301 	mvn.w	r3, #1
 800d728:	e07c      	b.n	800d824 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	895b      	ldrh	r3, [r3, #10]
 800d734:	2b13      	cmp	r3, #19
 800d736:	d806      	bhi.n	800d746 <ip4_output_if_src+0x5e>
 800d738:	4b3c      	ldr	r3, [pc, #240]	; (800d82c <ip4_output_if_src+0x144>)
 800d73a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d73e:	493e      	ldr	r1, [pc, #248]	; (800d838 <ip4_output_if_src+0x150>)
 800d740:	483c      	ldr	r0, [pc, #240]	; (800d834 <ip4_output_if_src+0x14c>)
 800d742:	f001 f8c3 	bl	800e8cc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	78fa      	ldrb	r2, [r7, #3]
 800d74a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d752:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681a      	ldr	r2, [r3, #0]
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d75c:	8b7b      	ldrh	r3, [r7, #26]
 800d75e:	089b      	lsrs	r3, r3, #2
 800d760:	b29b      	uxth	r3, r3
 800d762:	b2db      	uxtb	r3, r3
 800d764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d774:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	891b      	ldrh	r3, [r3, #8]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7f7 f9c8 	bl	8004b10 <lwip_htons>
 800d780:	4603      	mov	r3, r0
 800d782:	461a      	mov	r2, r3
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	2200      	movs	r2, #0
 800d78c:	719a      	strb	r2, [r3, #6]
 800d78e:	2200      	movs	r2, #0
 800d790:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d792:	4b2a      	ldr	r3, [pc, #168]	; (800d83c <ip4_output_if_src+0x154>)
 800d794:	881b      	ldrh	r3, [r3, #0]
 800d796:	4618      	mov	r0, r3
 800d798:	f7f7 f9ba 	bl	8004b10 <lwip_htons>
 800d79c:	4603      	mov	r3, r0
 800d79e:	461a      	mov	r2, r3
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d7a4:	4b25      	ldr	r3, [pc, #148]	; (800d83c <ip4_output_if_src+0x154>)
 800d7a6:	881b      	ldrh	r3, [r3, #0]
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	4b23      	ldr	r3, [pc, #140]	; (800d83c <ip4_output_if_src+0x154>)
 800d7ae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d104      	bne.n	800d7c0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d7b6:	4b22      	ldr	r3, [pc, #136]	; (800d840 <ip4_output_if_src+0x158>)
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	60da      	str	r2, [r3, #12]
 800d7be:	e003      	b.n	800d7c8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	729a      	strb	r2, [r3, #10]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	72da      	strb	r2, [r3, #11]
 800d7d2:	e00f      	b.n	800d7f4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	895b      	ldrh	r3, [r3, #10]
 800d7d8:	2b13      	cmp	r3, #19
 800d7da:	d802      	bhi.n	800d7e2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d7dc:	f06f 0301 	mvn.w	r3, #1
 800d7e0:	e020      	b.n	800d824 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	691b      	ldr	r3, [r3, #16]
 800d7ec:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d7ee:	f107 0314 	add.w	r3, r7, #20
 800d7f2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00c      	beq.n	800d816 <ip4_output_if_src+0x12e>
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	891a      	ldrh	r2, [r3, #8]
 800d800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d802:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d804:	429a      	cmp	r2, r3
 800d806:	d906      	bls.n	800d816 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d808:	687a      	ldr	r2, [r7, #4]
 800d80a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	f000 fd53 	bl	800e2b8 <ip4_frag>
 800d812:	4603      	mov	r3, r0
 800d814:	e006      	b.n	800d824 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d818:	695b      	ldr	r3, [r3, #20]
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	68f9      	ldr	r1, [r7, #12]
 800d81e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d820:	4798      	blx	r3
 800d822:	4603      	mov	r3, r0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3720      	adds	r7, #32
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	08011d90 	.word	0x08011d90
 800d830:	08011dc4 	.word	0x08011dc4
 800d834:	08011dd0 	.word	0x08011dd0
 800d838:	08011df8 	.word	0x08011df8
 800d83c:	24007c02 	.word	0x24007c02
 800d840:	080121d0 	.word	0x080121d0

0800d844 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d844:	b480      	push	{r7}
 800d846:	b085      	sub	sp, #20
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d858:	d002      	beq.n	800d860 <ip4_addr_isbroadcast_u32+0x1c>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d101      	bne.n	800d864 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d860:	2301      	movs	r3, #1
 800d862:	e02a      	b.n	800d8ba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d86a:	f003 0302 	and.w	r3, r3, #2
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d101      	bne.n	800d876 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d872:	2300      	movs	r3, #0
 800d874:	e021      	b.n	800d8ba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	3304      	adds	r3, #4
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d101      	bne.n	800d886 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d882:	2300      	movs	r3, #0
 800d884:	e019      	b.n	800d8ba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d886:	68fa      	ldr	r2, [r7, #12]
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	3304      	adds	r3, #4
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	405a      	eors	r2, r3
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	3308      	adds	r3, #8
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4013      	ands	r3, r2
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10d      	bne.n	800d8b8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	3308      	adds	r3, #8
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	43da      	mvns	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	3308      	adds	r3, #8
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d101      	bne.n	800d8b8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e000      	b.n	800d8ba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d8b8:	2300      	movs	r3, #0
  }
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3714      	adds	r7, #20
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr
	...

0800d8c8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d8d2:	4b12      	ldr	r3, [pc, #72]	; (800d91c <ip_reass_tmr+0x54>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d8d8:	e018      	b.n	800d90c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	7fdb      	ldrb	r3, [r3, #31]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d00b      	beq.n	800d8fa <ip_reass_tmr+0x32>
      r->timer--;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	7fdb      	ldrb	r3, [r3, #31]
 800d8e6:	3b01      	subs	r3, #1
 800d8e8:	b2da      	uxtb	r2, r3
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	60fb      	str	r3, [r7, #12]
 800d8f8:	e008      	b.n	800d90c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d904:	68b9      	ldr	r1, [r7, #8]
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 f80a 	bl	800d920 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d1e3      	bne.n	800d8da <ip_reass_tmr+0x12>
    }
  }
}
 800d912:	bf00      	nop
 800d914:	bf00      	nop
 800d916:	3710      	adds	r7, #16
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	24007c04 	.word	0x24007c04

0800d920 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b088      	sub	sp, #32
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d92a:	2300      	movs	r3, #0
 800d92c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d92e:	683a      	ldr	r2, [r7, #0]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	429a      	cmp	r2, r3
 800d934:	d105      	bne.n	800d942 <ip_reass_free_complete_datagram+0x22>
 800d936:	4b45      	ldr	r3, [pc, #276]	; (800da4c <ip_reass_free_complete_datagram+0x12c>)
 800d938:	22ab      	movs	r2, #171	; 0xab
 800d93a:	4945      	ldr	r1, [pc, #276]	; (800da50 <ip_reass_free_complete_datagram+0x130>)
 800d93c:	4845      	ldr	r0, [pc, #276]	; (800da54 <ip_reass_free_complete_datagram+0x134>)
 800d93e:	f000 ffc5 	bl	800e8cc <iprintf>
  if (prev != NULL) {
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00a      	beq.n	800d95e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d005      	beq.n	800d95e <ip_reass_free_complete_datagram+0x3e>
 800d952:	4b3e      	ldr	r3, [pc, #248]	; (800da4c <ip_reass_free_complete_datagram+0x12c>)
 800d954:	22ad      	movs	r2, #173	; 0xad
 800d956:	4940      	ldr	r1, [pc, #256]	; (800da58 <ip_reass_free_complete_datagram+0x138>)
 800d958:	483e      	ldr	r0, [pc, #248]	; (800da54 <ip_reass_free_complete_datagram+0x134>)
 800d95a:	f000 ffb7 	bl	800e8cc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	889b      	ldrh	r3, [r3, #4]
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d12a      	bne.n	800d9c6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d97e:	69bb      	ldr	r3, [r7, #24]
 800d980:	6858      	ldr	r0, [r3, #4]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	3308      	adds	r3, #8
 800d986:	2214      	movs	r2, #20
 800d988:	4619      	mov	r1, r3
 800d98a:	f001 f879 	bl	800ea80 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d98e:	2101      	movs	r1, #1
 800d990:	69b8      	ldr	r0, [r7, #24]
 800d992:	f7ff fc3d 	bl	800d210 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d996:	69b8      	ldr	r0, [r7, #24]
 800d998:	f7f8 fd58 	bl	800644c <pbuf_clen>
 800d99c:	4603      	mov	r3, r0
 800d99e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d9a0:	8bfa      	ldrh	r2, [r7, #30]
 800d9a2:	8a7b      	ldrh	r3, [r7, #18]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9aa:	db05      	blt.n	800d9b8 <ip_reass_free_complete_datagram+0x98>
 800d9ac:	4b27      	ldr	r3, [pc, #156]	; (800da4c <ip_reass_free_complete_datagram+0x12c>)
 800d9ae:	22bc      	movs	r2, #188	; 0xbc
 800d9b0:	492a      	ldr	r1, [pc, #168]	; (800da5c <ip_reass_free_complete_datagram+0x13c>)
 800d9b2:	4828      	ldr	r0, [pc, #160]	; (800da54 <ip_reass_free_complete_datagram+0x134>)
 800d9b4:	f000 ff8a 	bl	800e8cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d9b8:	8bfa      	ldrh	r2, [r7, #30]
 800d9ba:	8a7b      	ldrh	r3, [r7, #18]
 800d9bc:	4413      	add	r3, r2
 800d9be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d9c0:	69b8      	ldr	r0, [r7, #24]
 800d9c2:	f7f8 fcbb 	bl	800633c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d9cc:	e01f      	b.n	800da0e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	f7f8 fd34 	bl	800644c <pbuf_clen>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d9e8:	8bfa      	ldrh	r2, [r7, #30]
 800d9ea:	8a7b      	ldrh	r3, [r7, #18]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9f2:	db05      	blt.n	800da00 <ip_reass_free_complete_datagram+0xe0>
 800d9f4:	4b15      	ldr	r3, [pc, #84]	; (800da4c <ip_reass_free_complete_datagram+0x12c>)
 800d9f6:	22cc      	movs	r2, #204	; 0xcc
 800d9f8:	4918      	ldr	r1, [pc, #96]	; (800da5c <ip_reass_free_complete_datagram+0x13c>)
 800d9fa:	4816      	ldr	r0, [pc, #88]	; (800da54 <ip_reass_free_complete_datagram+0x134>)
 800d9fc:	f000 ff66 	bl	800e8cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800da00:	8bfa      	ldrh	r2, [r7, #30]
 800da02:	8a7b      	ldrh	r3, [r7, #18]
 800da04:	4413      	add	r3, r2
 800da06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800da08:	68f8      	ldr	r0, [r7, #12]
 800da0a:	f7f8 fc97 	bl	800633c <pbuf_free>
  while (p != NULL) {
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d1dc      	bne.n	800d9ce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800da14:	6839      	ldr	r1, [r7, #0]
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 f8c2 	bl	800dba0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800da1c:	4b10      	ldr	r3, [pc, #64]	; (800da60 <ip_reass_free_complete_datagram+0x140>)
 800da1e:	881b      	ldrh	r3, [r3, #0]
 800da20:	8bfa      	ldrh	r2, [r7, #30]
 800da22:	429a      	cmp	r2, r3
 800da24:	d905      	bls.n	800da32 <ip_reass_free_complete_datagram+0x112>
 800da26:	4b09      	ldr	r3, [pc, #36]	; (800da4c <ip_reass_free_complete_datagram+0x12c>)
 800da28:	22d2      	movs	r2, #210	; 0xd2
 800da2a:	490e      	ldr	r1, [pc, #56]	; (800da64 <ip_reass_free_complete_datagram+0x144>)
 800da2c:	4809      	ldr	r0, [pc, #36]	; (800da54 <ip_reass_free_complete_datagram+0x134>)
 800da2e:	f000 ff4d 	bl	800e8cc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800da32:	4b0b      	ldr	r3, [pc, #44]	; (800da60 <ip_reass_free_complete_datagram+0x140>)
 800da34:	881a      	ldrh	r2, [r3, #0]
 800da36:	8bfb      	ldrh	r3, [r7, #30]
 800da38:	1ad3      	subs	r3, r2, r3
 800da3a:	b29a      	uxth	r2, r3
 800da3c:	4b08      	ldr	r3, [pc, #32]	; (800da60 <ip_reass_free_complete_datagram+0x140>)
 800da3e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800da40:	8bfb      	ldrh	r3, [r7, #30]
}
 800da42:	4618      	mov	r0, r3
 800da44:	3720      	adds	r7, #32
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	08011e28 	.word	0x08011e28
 800da50:	08011e64 	.word	0x08011e64
 800da54:	08011e70 	.word	0x08011e70
 800da58:	08011e98 	.word	0x08011e98
 800da5c:	08011eac 	.word	0x08011eac
 800da60:	24007c08 	.word	0x24007c08
 800da64:	08011ecc 	.word	0x08011ecc

0800da68 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b08a      	sub	sp, #40	; 0x28
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800da72:	2300      	movs	r3, #0
 800da74:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800da76:	2300      	movs	r3, #0
 800da78:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800da7a:	2300      	movs	r3, #0
 800da7c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800da7e:	2300      	movs	r3, #0
 800da80:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800da82:	2300      	movs	r3, #0
 800da84:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800da86:	4b28      	ldr	r3, [pc, #160]	; (800db28 <ip_reass_remove_oldest_datagram+0xc0>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800da8c:	e030      	b.n	800daf0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800da8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da90:	695a      	ldr	r2, [r3, #20]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	429a      	cmp	r2, r3
 800da98:	d10c      	bne.n	800dab4 <ip_reass_remove_oldest_datagram+0x4c>
 800da9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9c:	699a      	ldr	r2, [r3, #24]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	691b      	ldr	r3, [r3, #16]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d106      	bne.n	800dab4 <ip_reass_remove_oldest_datagram+0x4c>
 800daa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa8:	899a      	ldrh	r2, [r3, #12]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	889b      	ldrh	r3, [r3, #4]
 800daae:	b29b      	uxth	r3, r3
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d014      	beq.n	800dade <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	3301      	adds	r3, #1
 800dab8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800daba:	6a3b      	ldr	r3, [r7, #32]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d104      	bne.n	800daca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800dac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dac4:	69fb      	ldr	r3, [r7, #28]
 800dac6:	61bb      	str	r3, [r7, #24]
 800dac8:	e009      	b.n	800dade <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800daca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dacc:	7fda      	ldrb	r2, [r3, #31]
 800dace:	6a3b      	ldr	r3, [r7, #32]
 800dad0:	7fdb      	ldrb	r3, [r3, #31]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d803      	bhi.n	800dade <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800dad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dada:	69fb      	ldr	r3, [r7, #28]
 800dadc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800dade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d001      	beq.n	800daea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800dae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800daea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800daf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d1cb      	bne.n	800da8e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800daf6:	6a3b      	ldr	r3, [r7, #32]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d008      	beq.n	800db0e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800dafc:	69b9      	ldr	r1, [r7, #24]
 800dafe:	6a38      	ldr	r0, [r7, #32]
 800db00:	f7ff ff0e 	bl	800d920 <ip_reass_free_complete_datagram>
 800db04:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800db06:	697a      	ldr	r2, [r7, #20]
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	4413      	add	r3, r2
 800db0c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800db0e:	697a      	ldr	r2, [r7, #20]
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	429a      	cmp	r2, r3
 800db14:	da02      	bge.n	800db1c <ip_reass_remove_oldest_datagram+0xb4>
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	2b01      	cmp	r3, #1
 800db1a:	dcac      	bgt.n	800da76 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800db1c:	697b      	ldr	r3, [r7, #20]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3728      	adds	r7, #40	; 0x28
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	24007c04 	.word	0x24007c04

0800db2c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800db36:	2004      	movs	r0, #4
 800db38:	f7f7 fd1a 	bl	8005570 <memp_malloc>
 800db3c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d110      	bne.n	800db66 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800db44:	6839      	ldr	r1, [r7, #0]
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f7ff ff8e 	bl	800da68 <ip_reass_remove_oldest_datagram>
 800db4c:	4602      	mov	r2, r0
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	4293      	cmp	r3, r2
 800db52:	dc03      	bgt.n	800db5c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800db54:	2004      	movs	r0, #4
 800db56:	f7f7 fd0b 	bl	8005570 <memp_malloc>
 800db5a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d101      	bne.n	800db66 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800db62:	2300      	movs	r3, #0
 800db64:	e016      	b.n	800db94 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800db66:	2220      	movs	r2, #32
 800db68:	2100      	movs	r1, #0
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	f000 ff13 	bl	800e996 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	220f      	movs	r2, #15
 800db74:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800db76:	4b09      	ldr	r3, [pc, #36]	; (800db9c <ip_reass_enqueue_new_datagram+0x70>)
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800db7e:	4a07      	ldr	r2, [pc, #28]	; (800db9c <ip_reass_enqueue_new_datagram+0x70>)
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	3308      	adds	r3, #8
 800db88:	2214      	movs	r2, #20
 800db8a:	6879      	ldr	r1, [r7, #4]
 800db8c:	4618      	mov	r0, r3
 800db8e:	f000 ff77 	bl	800ea80 <memcpy>
  return ipr;
 800db92:	68fb      	ldr	r3, [r7, #12]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	24007c04 	.word	0x24007c04

0800dba0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800dbaa:	4b10      	ldr	r3, [pc, #64]	; (800dbec <ip_reass_dequeue_datagram+0x4c>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d104      	bne.n	800dbbe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4a0c      	ldr	r2, [pc, #48]	; (800dbec <ip_reass_dequeue_datagram+0x4c>)
 800dbba:	6013      	str	r3, [r2, #0]
 800dbbc:	e00d      	b.n	800dbda <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d106      	bne.n	800dbd2 <ip_reass_dequeue_datagram+0x32>
 800dbc4:	4b0a      	ldr	r3, [pc, #40]	; (800dbf0 <ip_reass_dequeue_datagram+0x50>)
 800dbc6:	f240 1245 	movw	r2, #325	; 0x145
 800dbca:	490a      	ldr	r1, [pc, #40]	; (800dbf4 <ip_reass_dequeue_datagram+0x54>)
 800dbcc:	480a      	ldr	r0, [pc, #40]	; (800dbf8 <ip_reass_dequeue_datagram+0x58>)
 800dbce:	f000 fe7d 	bl	800e8cc <iprintf>
    prev->next = ipr->next;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800dbda:	6879      	ldr	r1, [r7, #4]
 800dbdc:	2004      	movs	r0, #4
 800dbde:	f7f7 fd37 	bl	8005650 <memp_free>
}
 800dbe2:	bf00      	nop
 800dbe4:	3708      	adds	r7, #8
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
 800dbea:	bf00      	nop
 800dbec:	24007c04 	.word	0x24007c04
 800dbf0:	08011e28 	.word	0x08011e28
 800dbf4:	08011ef0 	.word	0x08011ef0
 800dbf8:	08011e70 	.word	0x08011e70

0800dbfc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b08c      	sub	sp, #48	; 0x30
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dc16:	69fb      	ldr	r3, [r7, #28]
 800dc18:	885b      	ldrh	r3, [r3, #2]
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7f6 ff77 	bl	8004b10 <lwip_htons>
 800dc22:	4603      	mov	r3, r0
 800dc24:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	f003 030f 	and.w	r3, r3, #15
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	009b      	lsls	r3, r3, #2
 800dc32:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800dc34:	7e7b      	ldrb	r3, [r7, #25]
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	8b7a      	ldrh	r2, [r7, #26]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d202      	bcs.n	800dc44 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dc3e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc42:	e135      	b.n	800deb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800dc44:	7e7b      	ldrb	r3, [r7, #25]
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	8b7a      	ldrh	r2, [r7, #26]
 800dc4a:	1ad3      	subs	r3, r2, r3
 800dc4c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	88db      	ldrh	r3, [r3, #6]
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7f6 ff5b 	bl	8004b10 <lwip_htons>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	00db      	lsls	r3, r3, #3
 800dc64:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800dc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc6e:	2200      	movs	r2, #0
 800dc70:	701a      	strb	r2, [r3, #0]
 800dc72:	2200      	movs	r2, #0
 800dc74:	705a      	strb	r2, [r3, #1]
 800dc76:	2200      	movs	r2, #0
 800dc78:	709a      	strb	r2, [r3, #2]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800dc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc80:	8afa      	ldrh	r2, [r7, #22]
 800dc82:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800dc84:	8afa      	ldrh	r2, [r7, #22]
 800dc86:	8b7b      	ldrh	r3, [r7, #26]
 800dc88:	4413      	add	r3, r2
 800dc8a:	b29a      	uxth	r2, r3
 800dc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800dc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc92:	88db      	ldrh	r3, [r3, #6]
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	8afa      	ldrh	r2, [r7, #22]
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d902      	bls.n	800dca2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800dca0:	e106      	b.n	800deb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	627b      	str	r3, [r7, #36]	; 0x24
 800dca8:	e068      	b.n	800dd7c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800dcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb2:	889b      	ldrh	r3, [r3, #4]
 800dcb4:	b29a      	uxth	r2, r3
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	889b      	ldrh	r3, [r3, #4]
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d235      	bcs.n	800dd2c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800dcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcc4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800dcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d020      	beq.n	800dd0e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800dccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcce:	889b      	ldrh	r3, [r3, #4]
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd4:	88db      	ldrh	r3, [r3, #6]
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d307      	bcc.n	800dcec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800dcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcde:	88db      	ldrh	r3, [r3, #6]
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	889b      	ldrh	r3, [r3, #4]
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d902      	bls.n	800dcf2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dcec:	f04f 33ff 	mov.w	r3, #4294967295
 800dcf0:	e0de      	b.n	800deb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800dcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf4:	68ba      	ldr	r2, [r7, #8]
 800dcf6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800dcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfa:	88db      	ldrh	r3, [r3, #6]
 800dcfc:	b29a      	uxth	r2, r3
 800dcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd00:	889b      	ldrh	r3, [r3, #4]
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d03d      	beq.n	800dd84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800dd0c:	e03a      	b.n	800dd84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800dd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd10:	88db      	ldrh	r3, [r3, #6]
 800dd12:	b29a      	uxth	r2, r3
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	889b      	ldrh	r3, [r3, #4]
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d902      	bls.n	800dd24 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dd1e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd22:	e0c5      	b.n	800deb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	68ba      	ldr	r2, [r7, #8]
 800dd28:	605a      	str	r2, [r3, #4]
      break;
 800dd2a:	e02b      	b.n	800dd84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800dd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2e:	889b      	ldrh	r3, [r3, #4]
 800dd30:	b29a      	uxth	r2, r3
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	889b      	ldrh	r3, [r3, #4]
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d102      	bne.n	800dd42 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dd3c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd40:	e0b6      	b.n	800deb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800dd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd44:	889b      	ldrh	r3, [r3, #4]
 800dd46:	b29a      	uxth	r2, r3
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	88db      	ldrh	r3, [r3, #6]
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d202      	bcs.n	800dd58 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dd52:	f04f 33ff 	mov.w	r3, #4294967295
 800dd56:	e0ab      	b.n	800deb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800dd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d009      	beq.n	800dd72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800dd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd60:	88db      	ldrh	r3, [r3, #6]
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	889b      	ldrh	r3, [r3, #4]
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d001      	beq.n	800dd72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800dd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d193      	bne.n	800dcaa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800dd82:	e000      	b.n	800dd86 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800dd84:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800dd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d12d      	bne.n	800dde8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800dd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d01c      	beq.n	800ddcc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800dd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd94:	88db      	ldrh	r3, [r3, #6]
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9a:	889b      	ldrh	r3, [r3, #4]
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d906      	bls.n	800ddb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800dda2:	4b45      	ldr	r3, [pc, #276]	; (800deb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dda4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800dda8:	4944      	ldr	r1, [pc, #272]	; (800debc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ddaa:	4845      	ldr	r0, [pc, #276]	; (800dec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ddac:	f000 fd8e 	bl	800e8cc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ddb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb2:	68ba      	ldr	r2, [r7, #8]
 800ddb4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ddb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb8:	88db      	ldrh	r3, [r3, #6]
 800ddba:	b29a      	uxth	r2, r3
 800ddbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbe:	889b      	ldrh	r3, [r3, #4]
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d010      	beq.n	800dde8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	623b      	str	r3, [r7, #32]
 800ddca:	e00d      	b.n	800dde8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d006      	beq.n	800dde2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ddd4:	4b38      	ldr	r3, [pc, #224]	; (800deb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ddd6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800ddda:	493a      	ldr	r1, [pc, #232]	; (800dec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dddc:	4838      	ldr	r0, [pc, #224]	; (800dec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ddde:	f000 fd75 	bl	800e8cc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	68ba      	ldr	r2, [r7, #8]
 800dde6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d105      	bne.n	800ddfa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	7f9b      	ldrb	r3, [r3, #30]
 800ddf2:	f003 0301 	and.w	r3, r3, #1
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d059      	beq.n	800deae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ddfa:	6a3b      	ldr	r3, [r7, #32]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d04f      	beq.n	800dea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d006      	beq.n	800de16 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	889b      	ldrh	r3, [r3, #4]
 800de10:	b29b      	uxth	r3, r3
 800de12:	2b00      	cmp	r3, #0
 800de14:	d002      	beq.n	800de1c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800de16:	2300      	movs	r3, #0
 800de18:	623b      	str	r3, [r7, #32]
 800de1a:	e041      	b.n	800dea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800de1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800de20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800de26:	e012      	b.n	800de4e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800de2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de30:	88db      	ldrh	r3, [r3, #6]
 800de32:	b29a      	uxth	r2, r3
 800de34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de36:	889b      	ldrh	r3, [r3, #4]
 800de38:	b29b      	uxth	r3, r3
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d002      	beq.n	800de44 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800de3e:	2300      	movs	r3, #0
 800de40:	623b      	str	r3, [r7, #32]
            break;
 800de42:	e007      	b.n	800de54 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800de44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de46:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800de48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800de4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de50:	2b00      	cmp	r3, #0
 800de52:	d1e9      	bne.n	800de28 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800de54:	6a3b      	ldr	r3, [r7, #32]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d022      	beq.n	800dea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	685b      	ldr	r3, [r3, #4]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d106      	bne.n	800de70 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800de62:	4b15      	ldr	r3, [pc, #84]	; (800deb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800de64:	f240 12df 	movw	r2, #479	; 0x1df
 800de68:	4917      	ldr	r1, [pc, #92]	; (800dec8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800de6a:	4815      	ldr	r0, [pc, #84]	; (800dec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800de6c:	f000 fd2e 	bl	800e8cc <iprintf>
          LWIP_ASSERT("sanity check",
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de78:	429a      	cmp	r2, r3
 800de7a:	d106      	bne.n	800de8a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800de7c:	4b0e      	ldr	r3, [pc, #56]	; (800deb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800de7e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800de82:	4911      	ldr	r1, [pc, #68]	; (800dec8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800de84:	480e      	ldr	r0, [pc, #56]	; (800dec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800de86:	f000 fd21 	bl	800e8cc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800de8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d006      	beq.n	800dea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800de92:	4b09      	ldr	r3, [pc, #36]	; (800deb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800de94:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800de98:	490c      	ldr	r1, [pc, #48]	; (800decc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800de9a:	4809      	ldr	r0, [pc, #36]	; (800dec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800de9c:	f000 fd16 	bl	800e8cc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800dea0:	6a3b      	ldr	r3, [r7, #32]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	bf14      	ite	ne
 800dea6:	2301      	movne	r3, #1
 800dea8:	2300      	moveq	r3, #0
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	e000      	b.n	800deb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800deae:	2300      	movs	r3, #0
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3730      	adds	r7, #48	; 0x30
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	08011e28 	.word	0x08011e28
 800debc:	08011f0c 	.word	0x08011f0c
 800dec0:	08011e70 	.word	0x08011e70
 800dec4:	08011f2c 	.word	0x08011f2c
 800dec8:	08011f64 	.word	0x08011f64
 800decc:	08011f74 	.word	0x08011f74

0800ded0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b08e      	sub	sp, #56	; 0x38
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800dede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	f003 030f 	and.w	r3, r3, #15
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	b2db      	uxtb	r3, r3
 800deec:	2b14      	cmp	r3, #20
 800deee:	f040 8171 	bne.w	800e1d4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800def2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def4:	88db      	ldrh	r3, [r3, #6]
 800def6:	b29b      	uxth	r3, r3
 800def8:	4618      	mov	r0, r3
 800defa:	f7f6 fe09 	bl	8004b10 <lwip_htons>
 800defe:	4603      	mov	r3, r0
 800df00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df04:	b29b      	uxth	r3, r3
 800df06:	00db      	lsls	r3, r3, #3
 800df08:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800df0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0c:	885b      	ldrh	r3, [r3, #2]
 800df0e:	b29b      	uxth	r3, r3
 800df10:	4618      	mov	r0, r3
 800df12:	f7f6 fdfd 	bl	8004b10 <lwip_htons>
 800df16:	4603      	mov	r3, r0
 800df18:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800df1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	f003 030f 	and.w	r3, r3, #15
 800df22:	b2db      	uxtb	r3, r3
 800df24:	009b      	lsls	r3, r3, #2
 800df26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800df2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df2e:	b29b      	uxth	r3, r3
 800df30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df32:	429a      	cmp	r2, r3
 800df34:	f0c0 8150 	bcc.w	800e1d8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800df38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df40:	1ad3      	subs	r3, r2, r3
 800df42:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f7f8 fa81 	bl	800644c <pbuf_clen>
 800df4a:	4603      	mov	r3, r0
 800df4c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800df4e:	4b8c      	ldr	r3, [pc, #560]	; (800e180 <ip4_reass+0x2b0>)
 800df50:	881b      	ldrh	r3, [r3, #0]
 800df52:	461a      	mov	r2, r3
 800df54:	8c3b      	ldrh	r3, [r7, #32]
 800df56:	4413      	add	r3, r2
 800df58:	2b0a      	cmp	r3, #10
 800df5a:	dd10      	ble.n	800df7e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800df5c:	8c3b      	ldrh	r3, [r7, #32]
 800df5e:	4619      	mov	r1, r3
 800df60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df62:	f7ff fd81 	bl	800da68 <ip_reass_remove_oldest_datagram>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	f000 8137 	beq.w	800e1dc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800df6e:	4b84      	ldr	r3, [pc, #528]	; (800e180 <ip4_reass+0x2b0>)
 800df70:	881b      	ldrh	r3, [r3, #0]
 800df72:	461a      	mov	r2, r3
 800df74:	8c3b      	ldrh	r3, [r7, #32]
 800df76:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800df78:	2b0a      	cmp	r3, #10
 800df7a:	f300 812f 	bgt.w	800e1dc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800df7e:	4b81      	ldr	r3, [pc, #516]	; (800e184 <ip4_reass+0x2b4>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	633b      	str	r3, [r7, #48]	; 0x30
 800df84:	e015      	b.n	800dfb2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800df86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df88:	695a      	ldr	r2, [r3, #20]
 800df8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d10c      	bne.n	800dfac <ip4_reass+0xdc>
 800df92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df94:	699a      	ldr	r2, [r3, #24]
 800df96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df98:	691b      	ldr	r3, [r3, #16]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d106      	bne.n	800dfac <ip4_reass+0xdc>
 800df9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa0:	899a      	ldrh	r2, [r3, #12]
 800dfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa4:	889b      	ldrh	r3, [r3, #4]
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d006      	beq.n	800dfba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	633b      	str	r3, [r7, #48]	; 0x30
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d1e6      	bne.n	800df86 <ip4_reass+0xb6>
 800dfb8:	e000      	b.n	800dfbc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800dfba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800dfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d109      	bne.n	800dfd6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800dfc2:	8c3b      	ldrh	r3, [r7, #32]
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfc8:	f7ff fdb0 	bl	800db2c <ip_reass_enqueue_new_datagram>
 800dfcc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800dfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d11c      	bne.n	800e00e <ip4_reass+0x13e>
      goto nullreturn;
 800dfd4:	e105      	b.n	800e1e2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd8:	88db      	ldrh	r3, [r3, #6]
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7f6 fd97 	bl	8004b10 <lwip_htons>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d110      	bne.n	800e00e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800dfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfee:	89db      	ldrh	r3, [r3, #14]
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7f6 fd8d 	bl	8004b10 <lwip_htons>
 800dff6:	4603      	mov	r3, r0
 800dff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d006      	beq.n	800e00e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e002:	3308      	adds	r3, #8
 800e004:	2214      	movs	r2, #20
 800e006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e008:	4618      	mov	r0, r3
 800e00a:	f000 fd39 	bl	800ea80 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e010:	88db      	ldrh	r3, [r3, #6]
 800e012:	b29b      	uxth	r3, r3
 800e014:	f003 0320 	and.w	r3, r3, #32
 800e018:	2b00      	cmp	r3, #0
 800e01a:	bf0c      	ite	eq
 800e01c:	2301      	moveq	r3, #1
 800e01e:	2300      	movne	r3, #0
 800e020:	b2db      	uxtb	r3, r3
 800e022:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00e      	beq.n	800e048 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e02a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e02c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e02e:	4413      	add	r3, r2
 800e030:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e032:	8b7a      	ldrh	r2, [r7, #26]
 800e034:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e036:	429a      	cmp	r2, r3
 800e038:	f0c0 80a0 	bcc.w	800e17c <ip4_reass+0x2ac>
 800e03c:	8b7b      	ldrh	r3, [r7, #26]
 800e03e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e042:	4293      	cmp	r3, r2
 800e044:	f200 809a 	bhi.w	800e17c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e048:	69fa      	ldr	r2, [r7, #28]
 800e04a:	6879      	ldr	r1, [r7, #4]
 800e04c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e04e:	f7ff fdd5 	bl	800dbfc <ip_reass_chain_frag_into_datagram_and_validate>
 800e052:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e05a:	f000 809b 	beq.w	800e194 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e05e:	4b48      	ldr	r3, [pc, #288]	; (800e180 <ip4_reass+0x2b0>)
 800e060:	881a      	ldrh	r2, [r3, #0]
 800e062:	8c3b      	ldrh	r3, [r7, #32]
 800e064:	4413      	add	r3, r2
 800e066:	b29a      	uxth	r2, r3
 800e068:	4b45      	ldr	r3, [pc, #276]	; (800e180 <ip4_reass+0x2b0>)
 800e06a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d00d      	beq.n	800e08e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e072:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e074:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e076:	4413      	add	r3, r2
 800e078:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07c:	8a7a      	ldrh	r2, [r7, #18]
 800e07e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e082:	7f9b      	ldrb	r3, [r3, #30]
 800e084:	f043 0301 	orr.w	r3, r3, #1
 800e088:	b2da      	uxtb	r2, r3
 800e08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e08c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	2b01      	cmp	r3, #1
 800e092:	d171      	bne.n	800e178 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e096:	8b9b      	ldrh	r3, [r3, #28]
 800e098:	3314      	adds	r3, #20
 800e09a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b0:	3308      	adds	r3, #8
 800e0b2:	2214      	movs	r2, #20
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0b8:	f000 fce2 	bl	800ea80 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e0bc:	8a3b      	ldrh	r3, [r7, #16]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7f6 fd26 	bl	8004b10 <lwip_htons>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	719a      	strb	r2, [r3, #6]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d8:	2200      	movs	r2, #0
 800e0da:	729a      	strb	r2, [r3, #10]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e0e6:	e00d      	b.n	800e104 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e0ee:	2114      	movs	r1, #20
 800e0f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e0f2:	f7f8 f89d 	bl	8006230 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e0f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7f8 f9e1 	bl	80064c0 <pbuf_cat>
      r = iprh->next_pbuf;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e106:	2b00      	cmp	r3, #0
 800e108:	d1ee      	bne.n	800e0e8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e10a:	4b1e      	ldr	r3, [pc, #120]	; (800e184 <ip4_reass+0x2b4>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e110:	429a      	cmp	r2, r3
 800e112:	d102      	bne.n	800e11a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e114:	2300      	movs	r3, #0
 800e116:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e118:	e010      	b.n	800e13c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e11a:	4b1a      	ldr	r3, [pc, #104]	; (800e184 <ip4_reass+0x2b4>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e120:	e007      	b.n	800e132 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e128:	429a      	cmp	r2, r3
 800e12a:	d006      	beq.n	800e13a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e134:	2b00      	cmp	r3, #0
 800e136:	d1f4      	bne.n	800e122 <ip4_reass+0x252>
 800e138:	e000      	b.n	800e13c <ip4_reass+0x26c>
          break;
 800e13a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e13c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e13e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e140:	f7ff fd2e 	bl	800dba0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f7f8 f981 	bl	800644c <pbuf_clen>
 800e14a:	4603      	mov	r3, r0
 800e14c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e14e:	4b0c      	ldr	r3, [pc, #48]	; (800e180 <ip4_reass+0x2b0>)
 800e150:	881b      	ldrh	r3, [r3, #0]
 800e152:	8c3a      	ldrh	r2, [r7, #32]
 800e154:	429a      	cmp	r2, r3
 800e156:	d906      	bls.n	800e166 <ip4_reass+0x296>
 800e158:	4b0b      	ldr	r3, [pc, #44]	; (800e188 <ip4_reass+0x2b8>)
 800e15a:	f240 229b 	movw	r2, #667	; 0x29b
 800e15e:	490b      	ldr	r1, [pc, #44]	; (800e18c <ip4_reass+0x2bc>)
 800e160:	480b      	ldr	r0, [pc, #44]	; (800e190 <ip4_reass+0x2c0>)
 800e162:	f000 fbb3 	bl	800e8cc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e166:	4b06      	ldr	r3, [pc, #24]	; (800e180 <ip4_reass+0x2b0>)
 800e168:	881a      	ldrh	r2, [r3, #0]
 800e16a:	8c3b      	ldrh	r3, [r7, #32]
 800e16c:	1ad3      	subs	r3, r2, r3
 800e16e:	b29a      	uxth	r2, r3
 800e170:	4b03      	ldr	r3, [pc, #12]	; (800e180 <ip4_reass+0x2b0>)
 800e172:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	e038      	b.n	800e1ea <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e178:	2300      	movs	r3, #0
 800e17a:	e036      	b.n	800e1ea <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e17c:	bf00      	nop
 800e17e:	e00a      	b.n	800e196 <ip4_reass+0x2c6>
 800e180:	24007c08 	.word	0x24007c08
 800e184:	24007c04 	.word	0x24007c04
 800e188:	08011e28 	.word	0x08011e28
 800e18c:	08011f98 	.word	0x08011f98
 800e190:	08011e70 	.word	0x08011e70
    goto nullreturn_ipr;
 800e194:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d106      	bne.n	800e1aa <ip4_reass+0x2da>
 800e19c:	4b15      	ldr	r3, [pc, #84]	; (800e1f4 <ip4_reass+0x324>)
 800e19e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e1a2:	4915      	ldr	r1, [pc, #84]	; (800e1f8 <ip4_reass+0x328>)
 800e1a4:	4815      	ldr	r0, [pc, #84]	; (800e1fc <ip4_reass+0x32c>)
 800e1a6:	f000 fb91 	bl	800e8cc <iprintf>
  if (ipr->p == NULL) {
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d116      	bne.n	800e1e0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e1b2:	4b13      	ldr	r3, [pc, #76]	; (800e200 <ip4_reass+0x330>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d006      	beq.n	800e1ca <ip4_reass+0x2fa>
 800e1bc:	4b0d      	ldr	r3, [pc, #52]	; (800e1f4 <ip4_reass+0x324>)
 800e1be:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e1c2:	4910      	ldr	r1, [pc, #64]	; (800e204 <ip4_reass+0x334>)
 800e1c4:	480d      	ldr	r0, [pc, #52]	; (800e1fc <ip4_reass+0x32c>)
 800e1c6:	f000 fb81 	bl	800e8cc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e1ca:	2100      	movs	r1, #0
 800e1cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1ce:	f7ff fce7 	bl	800dba0 <ip_reass_dequeue_datagram>
 800e1d2:	e006      	b.n	800e1e2 <ip4_reass+0x312>
    goto nullreturn;
 800e1d4:	bf00      	nop
 800e1d6:	e004      	b.n	800e1e2 <ip4_reass+0x312>
    goto nullreturn;
 800e1d8:	bf00      	nop
 800e1da:	e002      	b.n	800e1e2 <ip4_reass+0x312>
      goto nullreturn;
 800e1dc:	bf00      	nop
 800e1de:	e000      	b.n	800e1e2 <ip4_reass+0x312>
  }

nullreturn:
 800e1e0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f7f8 f8aa 	bl	800633c <pbuf_free>
  return NULL;
 800e1e8:	2300      	movs	r3, #0
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3738      	adds	r7, #56	; 0x38
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	08011e28 	.word	0x08011e28
 800e1f8:	08011fb4 	.word	0x08011fb4
 800e1fc:	08011e70 	.word	0x08011e70
 800e200:	24007c04 	.word	0x24007c04
 800e204:	08011fc0 	.word	0x08011fc0

0800e208 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e20c:	2005      	movs	r0, #5
 800e20e:	f7f7 f9af 	bl	8005570 <memp_malloc>
 800e212:	4603      	mov	r3, r0
}
 800e214:	4618      	mov	r0, r3
 800e216:	bd80      	pop	{r7, pc}

0800e218 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e226:	4b07      	ldr	r3, [pc, #28]	; (800e244 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e228:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e22c:	4906      	ldr	r1, [pc, #24]	; (800e248 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e22e:	4807      	ldr	r0, [pc, #28]	; (800e24c <ip_frag_free_pbuf_custom_ref+0x34>)
 800e230:	f000 fb4c 	bl	800e8cc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e234:	6879      	ldr	r1, [r7, #4]
 800e236:	2005      	movs	r0, #5
 800e238:	f7f7 fa0a 	bl	8005650 <memp_free>
}
 800e23c:	bf00      	nop
 800e23e:	3708      	adds	r7, #8
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	08011e28 	.word	0x08011e28
 800e248:	08011fe0 	.word	0x08011fe0
 800e24c:	08011e70 	.word	0x08011e70

0800e250 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d106      	bne.n	800e270 <ipfrag_free_pbuf_custom+0x20>
 800e262:	4b11      	ldr	r3, [pc, #68]	; (800e2a8 <ipfrag_free_pbuf_custom+0x58>)
 800e264:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e268:	4910      	ldr	r1, [pc, #64]	; (800e2ac <ipfrag_free_pbuf_custom+0x5c>)
 800e26a:	4811      	ldr	r0, [pc, #68]	; (800e2b0 <ipfrag_free_pbuf_custom+0x60>)
 800e26c:	f000 fb2e 	bl	800e8cc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	429a      	cmp	r2, r3
 800e276:	d006      	beq.n	800e286 <ipfrag_free_pbuf_custom+0x36>
 800e278:	4b0b      	ldr	r3, [pc, #44]	; (800e2a8 <ipfrag_free_pbuf_custom+0x58>)
 800e27a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e27e:	490d      	ldr	r1, [pc, #52]	; (800e2b4 <ipfrag_free_pbuf_custom+0x64>)
 800e280:	480b      	ldr	r0, [pc, #44]	; (800e2b0 <ipfrag_free_pbuf_custom+0x60>)
 800e282:	f000 fb23 	bl	800e8cc <iprintf>
  if (pcr->original != NULL) {
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	695b      	ldr	r3, [r3, #20]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d004      	beq.n	800e298 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	695b      	ldr	r3, [r3, #20]
 800e292:	4618      	mov	r0, r3
 800e294:	f7f8 f852 	bl	800633c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f7ff ffbd 	bl	800e218 <ip_frag_free_pbuf_custom_ref>
}
 800e29e:	bf00      	nop
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	08011e28 	.word	0x08011e28
 800e2ac:	08011fec 	.word	0x08011fec
 800e2b0:	08011e70 	.word	0x08011e70
 800e2b4:	08011ff8 	.word	0x08011ff8

0800e2b8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b094      	sub	sp, #80	; 0x50
 800e2bc:	af02      	add	r7, sp, #8
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	60b9      	str	r1, [r7, #8]
 800e2c2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e2ce:	3b14      	subs	r3, #20
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	da00      	bge.n	800e2d6 <ip4_frag+0x1e>
 800e2d4:	3307      	adds	r3, #7
 800e2d6:	10db      	asrs	r3, r3, #3
 800e2d8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e2da:	2314      	movs	r3, #20
 800e2dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	f003 030f 	and.w	r3, r3, #15
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	2b14      	cmp	r3, #20
 800e2f8:	d002      	beq.n	800e300 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e2fa:	f06f 0305 	mvn.w	r3, #5
 800e2fe:	e110      	b.n	800e522 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	895b      	ldrh	r3, [r3, #10]
 800e304:	2b13      	cmp	r3, #19
 800e306:	d809      	bhi.n	800e31c <ip4_frag+0x64>
 800e308:	4b88      	ldr	r3, [pc, #544]	; (800e52c <ip4_frag+0x274>)
 800e30a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e30e:	4988      	ldr	r1, [pc, #544]	; (800e530 <ip4_frag+0x278>)
 800e310:	4888      	ldr	r0, [pc, #544]	; (800e534 <ip4_frag+0x27c>)
 800e312:	f000 fadb 	bl	800e8cc <iprintf>
 800e316:	f06f 0305 	mvn.w	r3, #5
 800e31a:	e102      	b.n	800e522 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31e:	88db      	ldrh	r3, [r3, #6]
 800e320:	b29b      	uxth	r3, r3
 800e322:	4618      	mov	r0, r3
 800e324:	f7f6 fbf4 	bl	8004b10 <lwip_htons>
 800e328:	4603      	mov	r3, r0
 800e32a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e32c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e32e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e332:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e336:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e33c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	891b      	ldrh	r3, [r3, #8]
 800e342:	3b14      	subs	r3, #20
 800e344:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e348:	e0e1      	b.n	800e50e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e34a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e34c:	00db      	lsls	r3, r3, #3
 800e34e:	b29b      	uxth	r3, r3
 800e350:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e354:	4293      	cmp	r3, r2
 800e356:	bf28      	it	cs
 800e358:	4613      	movcs	r3, r2
 800e35a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e35c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e360:	2114      	movs	r1, #20
 800e362:	200e      	movs	r0, #14
 800e364:	f7f7 fd06 	bl	8005d74 <pbuf_alloc>
 800e368:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	f000 80d5 	beq.w	800e51c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e374:	895b      	ldrh	r3, [r3, #10]
 800e376:	2b13      	cmp	r3, #19
 800e378:	d806      	bhi.n	800e388 <ip4_frag+0xd0>
 800e37a:	4b6c      	ldr	r3, [pc, #432]	; (800e52c <ip4_frag+0x274>)
 800e37c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e380:	496d      	ldr	r1, [pc, #436]	; (800e538 <ip4_frag+0x280>)
 800e382:	486c      	ldr	r0, [pc, #432]	; (800e534 <ip4_frag+0x27c>)
 800e384:	f000 faa2 	bl	800e8cc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	2214      	movs	r2, #20
 800e38e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e390:	4618      	mov	r0, r3
 800e392:	f000 fb75 	bl	800ea80 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e39c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e39e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e3a2:	e064      	b.n	800e46e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	895a      	ldrh	r2, [r3, #10]
 800e3a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e3aa:	1ad3      	subs	r3, r2, r3
 800e3ac:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	895b      	ldrh	r3, [r3, #10]
 800e3b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d906      	bls.n	800e3c6 <ip4_frag+0x10e>
 800e3b8:	4b5c      	ldr	r3, [pc, #368]	; (800e52c <ip4_frag+0x274>)
 800e3ba:	f240 322d 	movw	r2, #813	; 0x32d
 800e3be:	495f      	ldr	r1, [pc, #380]	; (800e53c <ip4_frag+0x284>)
 800e3c0:	485c      	ldr	r0, [pc, #368]	; (800e534 <ip4_frag+0x27c>)
 800e3c2:	f000 fa83 	bl	800e8cc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e3c6:	8bfa      	ldrh	r2, [r7, #30]
 800e3c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	bf28      	it	cs
 800e3d0:	4613      	movcs	r3, r2
 800e3d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e3d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d105      	bne.n	800e3ea <ip4_frag+0x132>
        poff = 0;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	60fb      	str	r3, [r7, #12]
        continue;
 800e3e8:	e041      	b.n	800e46e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e3ea:	f7ff ff0d 	bl	800e208 <ip_frag_alloc_pbuf_custom_ref>
 800e3ee:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d103      	bne.n	800e3fe <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e3f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3f8:	f7f7 ffa0 	bl	800633c <pbuf_free>
        goto memerr;
 800e3fc:	e08f      	b.n	800e51e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e3fe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e404:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e406:	4413      	add	r3, r2
 800e408:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e40c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e410:	9201      	str	r2, [sp, #4]
 800e412:	9300      	str	r3, [sp, #0]
 800e414:	4603      	mov	r3, r0
 800e416:	2241      	movs	r2, #65	; 0x41
 800e418:	2000      	movs	r0, #0
 800e41a:	f7f7 fdd5 	bl	8005fc8 <pbuf_alloced_custom>
 800e41e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d106      	bne.n	800e434 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e426:	69b8      	ldr	r0, [r7, #24]
 800e428:	f7ff fef6 	bl	800e218 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e42c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e42e:	f7f7 ff85 	bl	800633c <pbuf_free>
        goto memerr;
 800e432:	e074      	b.n	800e51e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e434:	68f8      	ldr	r0, [r7, #12]
 800e436:	f7f8 f821 	bl	800647c <pbuf_ref>
      pcr->original = p;
 800e43a:	69bb      	ldr	r3, [r7, #24]
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e440:	69bb      	ldr	r3, [r7, #24]
 800e442:	4a3f      	ldr	r2, [pc, #252]	; (800e540 <ip4_frag+0x288>)
 800e444:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e446:	6979      	ldr	r1, [r7, #20]
 800e448:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e44a:	f7f8 f839 	bl	80064c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e44e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e452:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e456:	1ad3      	subs	r3, r2, r3
 800e458:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e45c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e460:	2b00      	cmp	r3, #0
 800e462:	d004      	beq.n	800e46e <ip4_frag+0x1b6>
        poff = 0;
 800e464:	2300      	movs	r3, #0
 800e466:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e46e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e472:	2b00      	cmp	r3, #0
 800e474:	d196      	bne.n	800e3a4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e476:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e478:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e47c:	4413      	add	r3, r2
 800e47e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e484:	f1a3 0213 	sub.w	r2, r3, #19
 800e488:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e48c:	429a      	cmp	r2, r3
 800e48e:	bfcc      	ite	gt
 800e490:	2301      	movgt	r3, #1
 800e492:	2300      	movle	r3, #0
 800e494:	b2db      	uxtb	r3, r3
 800e496:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e498:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e49c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e4a2:	6a3b      	ldr	r3, [r7, #32]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d002      	beq.n	800e4ae <ip4_frag+0x1f6>
 800e4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d003      	beq.n	800e4b6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e4ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e4b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e4b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e4b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7f6 fb29 	bl	8004b10 <lwip_htons>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e4c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e4c8:	3314      	adds	r3, #20
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7f6 fb1f 	bl	8004b10 <lwip_htons>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4dc:	2200      	movs	r2, #0
 800e4de:	729a      	strb	r2, [r3, #10]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	695b      	ldr	r3, [r3, #20]
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4ec:	68b8      	ldr	r0, [r7, #8]
 800e4ee:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e4f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4f2:	f7f7 ff23 	bl	800633c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e4f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e4fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e4fc:	1ad3      	subs	r3, r2, r3
 800e4fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e502:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e506:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e508:	4413      	add	r3, r2
 800e50a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e50e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e512:	2b00      	cmp	r3, #0
 800e514:	f47f af19 	bne.w	800e34a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e518:	2300      	movs	r3, #0
 800e51a:	e002      	b.n	800e522 <ip4_frag+0x26a>
      goto memerr;
 800e51c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e51e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e522:	4618      	mov	r0, r3
 800e524:	3748      	adds	r7, #72	; 0x48
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	08011e28 	.word	0x08011e28
 800e530:	08012004 	.word	0x08012004
 800e534:	08011e70 	.word	0x08011e70
 800e538:	08012020 	.word	0x08012020
 800e53c:	08012040 	.word	0x08012040
 800e540:	0800e251 	.word	0x0800e251

0800e544 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b086      	sub	sp, #24
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e54e:	230e      	movs	r3, #14
 800e550:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	895b      	ldrh	r3, [r3, #10]
 800e556:	2b0e      	cmp	r3, #14
 800e558:	d96e      	bls.n	800e638 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	7bdb      	ldrb	r3, [r3, #15]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d106      	bne.n	800e570 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e568:	3301      	adds	r3, #1
 800e56a:	b2da      	uxtb	r2, r3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	685b      	ldr	r3, [r3, #4]
 800e574:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	7b1a      	ldrb	r2, [r3, #12]
 800e57a:	7b5b      	ldrb	r3, [r3, #13]
 800e57c:	021b      	lsls	r3, r3, #8
 800e57e:	4313      	orrs	r3, r2
 800e580:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	f003 0301 	and.w	r3, r3, #1
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d023      	beq.n	800e5d6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	2b01      	cmp	r3, #1
 800e594:	d10f      	bne.n	800e5b6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	785b      	ldrb	r3, [r3, #1]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d11b      	bne.n	800e5d6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e5a2:	2b5e      	cmp	r3, #94	; 0x5e
 800e5a4:	d117      	bne.n	800e5d6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	7b5b      	ldrb	r3, [r3, #13]
 800e5aa:	f043 0310 	orr.w	r3, r3, #16
 800e5ae:	b2da      	uxtb	r2, r3
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	735a      	strb	r2, [r3, #13]
 800e5b4:	e00f      	b.n	800e5d6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	2206      	movs	r2, #6
 800e5ba:	4928      	ldr	r1, [pc, #160]	; (800e65c <ethernet_input+0x118>)
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f000 f9da 	bl	800e976 <memcmp>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d106      	bne.n	800e5d6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	7b5b      	ldrb	r3, [r3, #13]
 800e5cc:	f043 0308 	orr.w	r3, r3, #8
 800e5d0:	b2da      	uxtb	r2, r3
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e5d6:	89fb      	ldrh	r3, [r7, #14]
 800e5d8:	2b08      	cmp	r3, #8
 800e5da:	d003      	beq.n	800e5e4 <ethernet_input+0xa0>
 800e5dc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e5e0:	d014      	beq.n	800e60c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e5e2:	e032      	b.n	800e64a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e5ea:	f003 0308 	and.w	r3, r3, #8
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d024      	beq.n	800e63c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e5f2:	8afb      	ldrh	r3, [r7, #22]
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7f7 fe1a 	bl	8006230 <pbuf_remove_header>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d11e      	bne.n	800e640 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e602:	6839      	ldr	r1, [r7, #0]
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f7fe ff21 	bl	800d44c <ip4_input>
      break;
 800e60a:	e013      	b.n	800e634 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e612:	f003 0308 	and.w	r3, r3, #8
 800e616:	2b00      	cmp	r3, #0
 800e618:	d014      	beq.n	800e644 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e61a:	8afb      	ldrh	r3, [r7, #22]
 800e61c:	4619      	mov	r1, r3
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7f7 fe06 	bl	8006230 <pbuf_remove_header>
 800e624:	4603      	mov	r3, r0
 800e626:	2b00      	cmp	r3, #0
 800e628:	d10e      	bne.n	800e648 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e62a:	6839      	ldr	r1, [r7, #0]
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f7fe f89b 	bl	800c768 <etharp_input>
      break;
 800e632:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e634:	2300      	movs	r3, #0
 800e636:	e00c      	b.n	800e652 <ethernet_input+0x10e>
    goto free_and_return;
 800e638:	bf00      	nop
 800e63a:	e006      	b.n	800e64a <ethernet_input+0x106>
        goto free_and_return;
 800e63c:	bf00      	nop
 800e63e:	e004      	b.n	800e64a <ethernet_input+0x106>
        goto free_and_return;
 800e640:	bf00      	nop
 800e642:	e002      	b.n	800e64a <ethernet_input+0x106>
        goto free_and_return;
 800e644:	bf00      	nop
 800e646:	e000      	b.n	800e64a <ethernet_input+0x106>
        goto free_and_return;
 800e648:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f7f7 fe76 	bl	800633c <pbuf_free>
  return ERR_OK;
 800e650:	2300      	movs	r3, #0
}
 800e652:	4618      	mov	r0, r3
 800e654:	3718      	adds	r7, #24
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	080121d4 	.word	0x080121d4

0800e660 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e660:	b580      	push	{r7, lr}
 800e662:	b086      	sub	sp, #24
 800e664:	af00      	add	r7, sp, #0
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	607a      	str	r2, [r7, #4]
 800e66c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e66e:	8c3b      	ldrh	r3, [r7, #32]
 800e670:	4618      	mov	r0, r3
 800e672:	f7f6 fa4d 	bl	8004b10 <lwip_htons>
 800e676:	4603      	mov	r3, r0
 800e678:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e67a:	210e      	movs	r1, #14
 800e67c:	68b8      	ldr	r0, [r7, #8]
 800e67e:	f7f7 fdc7 	bl	8006210 <pbuf_add_header>
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	d125      	bne.n	800e6d4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	8afa      	ldrh	r2, [r7, #22]
 800e692:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	2206      	movs	r2, #6
 800e698:	6839      	ldr	r1, [r7, #0]
 800e69a:	4618      	mov	r0, r3
 800e69c:	f000 f9f0 	bl	800ea80 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	3306      	adds	r3, #6
 800e6a4:	2206      	movs	r2, #6
 800e6a6:	6879      	ldr	r1, [r7, #4]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f000 f9e9 	bl	800ea80 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e6b4:	2b06      	cmp	r3, #6
 800e6b6:	d006      	beq.n	800e6c6 <ethernet_output+0x66>
 800e6b8:	4b0a      	ldr	r3, [pc, #40]	; (800e6e4 <ethernet_output+0x84>)
 800e6ba:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e6be:	490a      	ldr	r1, [pc, #40]	; (800e6e8 <ethernet_output+0x88>)
 800e6c0:	480a      	ldr	r0, [pc, #40]	; (800e6ec <ethernet_output+0x8c>)
 800e6c2:	f000 f903 	bl	800e8cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	699b      	ldr	r3, [r3, #24]
 800e6ca:	68b9      	ldr	r1, [r7, #8]
 800e6cc:	68f8      	ldr	r0, [r7, #12]
 800e6ce:	4798      	blx	r3
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	e002      	b.n	800e6da <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e6d4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e6d6:	f06f 0301 	mvn.w	r3, #1
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3718      	adds	r7, #24
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	08012050 	.word	0x08012050
 800e6e8:	08012088 	.word	0x08012088
 800e6ec:	080120bc 	.word	0x080120bc

0800e6f0 <rand>:
 800e6f0:	4b16      	ldr	r3, [pc, #88]	; (800e74c <rand+0x5c>)
 800e6f2:	b510      	push	{r4, lr}
 800e6f4:	681c      	ldr	r4, [r3, #0]
 800e6f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e6f8:	b9b3      	cbnz	r3, 800e728 <rand+0x38>
 800e6fa:	2018      	movs	r0, #24
 800e6fc:	f000 fa38 	bl	800eb70 <malloc>
 800e700:	4602      	mov	r2, r0
 800e702:	6320      	str	r0, [r4, #48]	; 0x30
 800e704:	b920      	cbnz	r0, 800e710 <rand+0x20>
 800e706:	4b12      	ldr	r3, [pc, #72]	; (800e750 <rand+0x60>)
 800e708:	4812      	ldr	r0, [pc, #72]	; (800e754 <rand+0x64>)
 800e70a:	2152      	movs	r1, #82	; 0x52
 800e70c:	f000 f9c6 	bl	800ea9c <__assert_func>
 800e710:	4911      	ldr	r1, [pc, #68]	; (800e758 <rand+0x68>)
 800e712:	4b12      	ldr	r3, [pc, #72]	; (800e75c <rand+0x6c>)
 800e714:	e9c0 1300 	strd	r1, r3, [r0]
 800e718:	4b11      	ldr	r3, [pc, #68]	; (800e760 <rand+0x70>)
 800e71a:	6083      	str	r3, [r0, #8]
 800e71c:	230b      	movs	r3, #11
 800e71e:	8183      	strh	r3, [r0, #12]
 800e720:	2100      	movs	r1, #0
 800e722:	2001      	movs	r0, #1
 800e724:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e728:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e72a:	480e      	ldr	r0, [pc, #56]	; (800e764 <rand+0x74>)
 800e72c:	690b      	ldr	r3, [r1, #16]
 800e72e:	694c      	ldr	r4, [r1, #20]
 800e730:	4a0d      	ldr	r2, [pc, #52]	; (800e768 <rand+0x78>)
 800e732:	4358      	muls	r0, r3
 800e734:	fb02 0004 	mla	r0, r2, r4, r0
 800e738:	fba3 3202 	umull	r3, r2, r3, r2
 800e73c:	3301      	adds	r3, #1
 800e73e:	eb40 0002 	adc.w	r0, r0, r2
 800e742:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e746:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e74a:	bd10      	pop	{r4, pc}
 800e74c:	24000088 	.word	0x24000088
 800e750:	080121e2 	.word	0x080121e2
 800e754:	080121f9 	.word	0x080121f9
 800e758:	abcd330e 	.word	0xabcd330e
 800e75c:	e66d1234 	.word	0xe66d1234
 800e760:	0005deec 	.word	0x0005deec
 800e764:	5851f42d 	.word	0x5851f42d
 800e768:	4c957f2d 	.word	0x4c957f2d

0800e76c <std>:
 800e76c:	2300      	movs	r3, #0
 800e76e:	b510      	push	{r4, lr}
 800e770:	4604      	mov	r4, r0
 800e772:	e9c0 3300 	strd	r3, r3, [r0]
 800e776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e77a:	6083      	str	r3, [r0, #8]
 800e77c:	8181      	strh	r1, [r0, #12]
 800e77e:	6643      	str	r3, [r0, #100]	; 0x64
 800e780:	81c2      	strh	r2, [r0, #14]
 800e782:	6183      	str	r3, [r0, #24]
 800e784:	4619      	mov	r1, r3
 800e786:	2208      	movs	r2, #8
 800e788:	305c      	adds	r0, #92	; 0x5c
 800e78a:	f000 f904 	bl	800e996 <memset>
 800e78e:	4b05      	ldr	r3, [pc, #20]	; (800e7a4 <std+0x38>)
 800e790:	6263      	str	r3, [r4, #36]	; 0x24
 800e792:	4b05      	ldr	r3, [pc, #20]	; (800e7a8 <std+0x3c>)
 800e794:	62a3      	str	r3, [r4, #40]	; 0x28
 800e796:	4b05      	ldr	r3, [pc, #20]	; (800e7ac <std+0x40>)
 800e798:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e79a:	4b05      	ldr	r3, [pc, #20]	; (800e7b0 <std+0x44>)
 800e79c:	6224      	str	r4, [r4, #32]
 800e79e:	6323      	str	r3, [r4, #48]	; 0x30
 800e7a0:	bd10      	pop	{r4, pc}
 800e7a2:	bf00      	nop
 800e7a4:	0800e8f1 	.word	0x0800e8f1
 800e7a8:	0800e913 	.word	0x0800e913
 800e7ac:	0800e94b 	.word	0x0800e94b
 800e7b0:	0800e96f 	.word	0x0800e96f

0800e7b4 <stdio_exit_handler>:
 800e7b4:	4a02      	ldr	r2, [pc, #8]	; (800e7c0 <stdio_exit_handler+0xc>)
 800e7b6:	4903      	ldr	r1, [pc, #12]	; (800e7c4 <stdio_exit_handler+0x10>)
 800e7b8:	4803      	ldr	r0, [pc, #12]	; (800e7c8 <stdio_exit_handler+0x14>)
 800e7ba:	f000 b869 	b.w	800e890 <_fwalk_sglue>
 800e7be:	bf00      	nop
 800e7c0:	24000030 	.word	0x24000030
 800e7c4:	0800f38d 	.word	0x0800f38d
 800e7c8:	2400003c 	.word	0x2400003c

0800e7cc <cleanup_stdio>:
 800e7cc:	6841      	ldr	r1, [r0, #4]
 800e7ce:	4b0c      	ldr	r3, [pc, #48]	; (800e800 <cleanup_stdio+0x34>)
 800e7d0:	4299      	cmp	r1, r3
 800e7d2:	b510      	push	{r4, lr}
 800e7d4:	4604      	mov	r4, r0
 800e7d6:	d001      	beq.n	800e7dc <cleanup_stdio+0x10>
 800e7d8:	f000 fdd8 	bl	800f38c <_fflush_r>
 800e7dc:	68a1      	ldr	r1, [r4, #8]
 800e7de:	4b09      	ldr	r3, [pc, #36]	; (800e804 <cleanup_stdio+0x38>)
 800e7e0:	4299      	cmp	r1, r3
 800e7e2:	d002      	beq.n	800e7ea <cleanup_stdio+0x1e>
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	f000 fdd1 	bl	800f38c <_fflush_r>
 800e7ea:	68e1      	ldr	r1, [r4, #12]
 800e7ec:	4b06      	ldr	r3, [pc, #24]	; (800e808 <cleanup_stdio+0x3c>)
 800e7ee:	4299      	cmp	r1, r3
 800e7f0:	d004      	beq.n	800e7fc <cleanup_stdio+0x30>
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7f8:	f000 bdc8 	b.w	800f38c <_fflush_r>
 800e7fc:	bd10      	pop	{r4, pc}
 800e7fe:	bf00      	nop
 800e800:	24007c0c 	.word	0x24007c0c
 800e804:	24007c74 	.word	0x24007c74
 800e808:	24007cdc 	.word	0x24007cdc

0800e80c <global_stdio_init.part.0>:
 800e80c:	b510      	push	{r4, lr}
 800e80e:	4b0b      	ldr	r3, [pc, #44]	; (800e83c <global_stdio_init.part.0+0x30>)
 800e810:	4c0b      	ldr	r4, [pc, #44]	; (800e840 <global_stdio_init.part.0+0x34>)
 800e812:	4a0c      	ldr	r2, [pc, #48]	; (800e844 <global_stdio_init.part.0+0x38>)
 800e814:	601a      	str	r2, [r3, #0]
 800e816:	4620      	mov	r0, r4
 800e818:	2200      	movs	r2, #0
 800e81a:	2104      	movs	r1, #4
 800e81c:	f7ff ffa6 	bl	800e76c <std>
 800e820:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e824:	2201      	movs	r2, #1
 800e826:	2109      	movs	r1, #9
 800e828:	f7ff ffa0 	bl	800e76c <std>
 800e82c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e830:	2202      	movs	r2, #2
 800e832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e836:	2112      	movs	r1, #18
 800e838:	f7ff bf98 	b.w	800e76c <std>
 800e83c:	24007d44 	.word	0x24007d44
 800e840:	24007c0c 	.word	0x24007c0c
 800e844:	0800e7b5 	.word	0x0800e7b5

0800e848 <__sfp_lock_acquire>:
 800e848:	4801      	ldr	r0, [pc, #4]	; (800e850 <__sfp_lock_acquire+0x8>)
 800e84a:	f000 b917 	b.w	800ea7c <__retarget_lock_acquire_recursive>
 800e84e:	bf00      	nop
 800e850:	24007d4d 	.word	0x24007d4d

0800e854 <__sfp_lock_release>:
 800e854:	4801      	ldr	r0, [pc, #4]	; (800e85c <__sfp_lock_release+0x8>)
 800e856:	f000 b912 	b.w	800ea7e <__retarget_lock_release_recursive>
 800e85a:	bf00      	nop
 800e85c:	24007d4d 	.word	0x24007d4d

0800e860 <__sinit>:
 800e860:	b510      	push	{r4, lr}
 800e862:	4604      	mov	r4, r0
 800e864:	f7ff fff0 	bl	800e848 <__sfp_lock_acquire>
 800e868:	6a23      	ldr	r3, [r4, #32]
 800e86a:	b11b      	cbz	r3, 800e874 <__sinit+0x14>
 800e86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e870:	f7ff bff0 	b.w	800e854 <__sfp_lock_release>
 800e874:	4b04      	ldr	r3, [pc, #16]	; (800e888 <__sinit+0x28>)
 800e876:	6223      	str	r3, [r4, #32]
 800e878:	4b04      	ldr	r3, [pc, #16]	; (800e88c <__sinit+0x2c>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d1f5      	bne.n	800e86c <__sinit+0xc>
 800e880:	f7ff ffc4 	bl	800e80c <global_stdio_init.part.0>
 800e884:	e7f2      	b.n	800e86c <__sinit+0xc>
 800e886:	bf00      	nop
 800e888:	0800e7cd 	.word	0x0800e7cd
 800e88c:	24007d44 	.word	0x24007d44

0800e890 <_fwalk_sglue>:
 800e890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e894:	4607      	mov	r7, r0
 800e896:	4688      	mov	r8, r1
 800e898:	4614      	mov	r4, r2
 800e89a:	2600      	movs	r6, #0
 800e89c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e8a0:	f1b9 0901 	subs.w	r9, r9, #1
 800e8a4:	d505      	bpl.n	800e8b2 <_fwalk_sglue+0x22>
 800e8a6:	6824      	ldr	r4, [r4, #0]
 800e8a8:	2c00      	cmp	r4, #0
 800e8aa:	d1f7      	bne.n	800e89c <_fwalk_sglue+0xc>
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8b2:	89ab      	ldrh	r3, [r5, #12]
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	d907      	bls.n	800e8c8 <_fwalk_sglue+0x38>
 800e8b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	d003      	beq.n	800e8c8 <_fwalk_sglue+0x38>
 800e8c0:	4629      	mov	r1, r5
 800e8c2:	4638      	mov	r0, r7
 800e8c4:	47c0      	blx	r8
 800e8c6:	4306      	orrs	r6, r0
 800e8c8:	3568      	adds	r5, #104	; 0x68
 800e8ca:	e7e9      	b.n	800e8a0 <_fwalk_sglue+0x10>

0800e8cc <iprintf>:
 800e8cc:	b40f      	push	{r0, r1, r2, r3}
 800e8ce:	b507      	push	{r0, r1, r2, lr}
 800e8d0:	4906      	ldr	r1, [pc, #24]	; (800e8ec <iprintf+0x20>)
 800e8d2:	ab04      	add	r3, sp, #16
 800e8d4:	6808      	ldr	r0, [r1, #0]
 800e8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8da:	6881      	ldr	r1, [r0, #8]
 800e8dc:	9301      	str	r3, [sp, #4]
 800e8de:	f000 fa25 	bl	800ed2c <_vfiprintf_r>
 800e8e2:	b003      	add	sp, #12
 800e8e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8e8:	b004      	add	sp, #16
 800e8ea:	4770      	bx	lr
 800e8ec:	24000088 	.word	0x24000088

0800e8f0 <__sread>:
 800e8f0:	b510      	push	{r4, lr}
 800e8f2:	460c      	mov	r4, r1
 800e8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8f8:	f000 f878 	bl	800e9ec <_read_r>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	bfab      	itete	ge
 800e900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e902:	89a3      	ldrhlt	r3, [r4, #12]
 800e904:	181b      	addge	r3, r3, r0
 800e906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e90a:	bfac      	ite	ge
 800e90c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e90e:	81a3      	strhlt	r3, [r4, #12]
 800e910:	bd10      	pop	{r4, pc}

0800e912 <__swrite>:
 800e912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e916:	461f      	mov	r7, r3
 800e918:	898b      	ldrh	r3, [r1, #12]
 800e91a:	05db      	lsls	r3, r3, #23
 800e91c:	4605      	mov	r5, r0
 800e91e:	460c      	mov	r4, r1
 800e920:	4616      	mov	r6, r2
 800e922:	d505      	bpl.n	800e930 <__swrite+0x1e>
 800e924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e928:	2302      	movs	r3, #2
 800e92a:	2200      	movs	r2, #0
 800e92c:	f000 f84c 	bl	800e9c8 <_lseek_r>
 800e930:	89a3      	ldrh	r3, [r4, #12]
 800e932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e93a:	81a3      	strh	r3, [r4, #12]
 800e93c:	4632      	mov	r2, r6
 800e93e:	463b      	mov	r3, r7
 800e940:	4628      	mov	r0, r5
 800e942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e946:	f000 b863 	b.w	800ea10 <_write_r>

0800e94a <__sseek>:
 800e94a:	b510      	push	{r4, lr}
 800e94c:	460c      	mov	r4, r1
 800e94e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e952:	f000 f839 	bl	800e9c8 <_lseek_r>
 800e956:	1c43      	adds	r3, r0, #1
 800e958:	89a3      	ldrh	r3, [r4, #12]
 800e95a:	bf15      	itete	ne
 800e95c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e95e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e966:	81a3      	strheq	r3, [r4, #12]
 800e968:	bf18      	it	ne
 800e96a:	81a3      	strhne	r3, [r4, #12]
 800e96c:	bd10      	pop	{r4, pc}

0800e96e <__sclose>:
 800e96e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e972:	f000 b819 	b.w	800e9a8 <_close_r>

0800e976 <memcmp>:
 800e976:	b510      	push	{r4, lr}
 800e978:	3901      	subs	r1, #1
 800e97a:	4402      	add	r2, r0
 800e97c:	4290      	cmp	r0, r2
 800e97e:	d101      	bne.n	800e984 <memcmp+0xe>
 800e980:	2000      	movs	r0, #0
 800e982:	e005      	b.n	800e990 <memcmp+0x1a>
 800e984:	7803      	ldrb	r3, [r0, #0]
 800e986:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e98a:	42a3      	cmp	r3, r4
 800e98c:	d001      	beq.n	800e992 <memcmp+0x1c>
 800e98e:	1b18      	subs	r0, r3, r4
 800e990:	bd10      	pop	{r4, pc}
 800e992:	3001      	adds	r0, #1
 800e994:	e7f2      	b.n	800e97c <memcmp+0x6>

0800e996 <memset>:
 800e996:	4402      	add	r2, r0
 800e998:	4603      	mov	r3, r0
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d100      	bne.n	800e9a0 <memset+0xa>
 800e99e:	4770      	bx	lr
 800e9a0:	f803 1b01 	strb.w	r1, [r3], #1
 800e9a4:	e7f9      	b.n	800e99a <memset+0x4>
	...

0800e9a8 <_close_r>:
 800e9a8:	b538      	push	{r3, r4, r5, lr}
 800e9aa:	4d06      	ldr	r5, [pc, #24]	; (800e9c4 <_close_r+0x1c>)
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	4608      	mov	r0, r1
 800e9b2:	602b      	str	r3, [r5, #0]
 800e9b4:	f7f1 ffd7 	bl	8000966 <_close>
 800e9b8:	1c43      	adds	r3, r0, #1
 800e9ba:	d102      	bne.n	800e9c2 <_close_r+0x1a>
 800e9bc:	682b      	ldr	r3, [r5, #0]
 800e9be:	b103      	cbz	r3, 800e9c2 <_close_r+0x1a>
 800e9c0:	6023      	str	r3, [r4, #0]
 800e9c2:	bd38      	pop	{r3, r4, r5, pc}
 800e9c4:	24007d48 	.word	0x24007d48

0800e9c8 <_lseek_r>:
 800e9c8:	b538      	push	{r3, r4, r5, lr}
 800e9ca:	4d07      	ldr	r5, [pc, #28]	; (800e9e8 <_lseek_r+0x20>)
 800e9cc:	4604      	mov	r4, r0
 800e9ce:	4608      	mov	r0, r1
 800e9d0:	4611      	mov	r1, r2
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	602a      	str	r2, [r5, #0]
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	f7f1 ffec 	bl	80009b4 <_lseek>
 800e9dc:	1c43      	adds	r3, r0, #1
 800e9de:	d102      	bne.n	800e9e6 <_lseek_r+0x1e>
 800e9e0:	682b      	ldr	r3, [r5, #0]
 800e9e2:	b103      	cbz	r3, 800e9e6 <_lseek_r+0x1e>
 800e9e4:	6023      	str	r3, [r4, #0]
 800e9e6:	bd38      	pop	{r3, r4, r5, pc}
 800e9e8:	24007d48 	.word	0x24007d48

0800e9ec <_read_r>:
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	4d07      	ldr	r5, [pc, #28]	; (800ea0c <_read_r+0x20>)
 800e9f0:	4604      	mov	r4, r0
 800e9f2:	4608      	mov	r0, r1
 800e9f4:	4611      	mov	r1, r2
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	602a      	str	r2, [r5, #0]
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	f7f1 ff7a 	bl	80008f4 <_read>
 800ea00:	1c43      	adds	r3, r0, #1
 800ea02:	d102      	bne.n	800ea0a <_read_r+0x1e>
 800ea04:	682b      	ldr	r3, [r5, #0]
 800ea06:	b103      	cbz	r3, 800ea0a <_read_r+0x1e>
 800ea08:	6023      	str	r3, [r4, #0]
 800ea0a:	bd38      	pop	{r3, r4, r5, pc}
 800ea0c:	24007d48 	.word	0x24007d48

0800ea10 <_write_r>:
 800ea10:	b538      	push	{r3, r4, r5, lr}
 800ea12:	4d07      	ldr	r5, [pc, #28]	; (800ea30 <_write_r+0x20>)
 800ea14:	4604      	mov	r4, r0
 800ea16:	4608      	mov	r0, r1
 800ea18:	4611      	mov	r1, r2
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	602a      	str	r2, [r5, #0]
 800ea1e:	461a      	mov	r2, r3
 800ea20:	f7f1 ff85 	bl	800092e <_write>
 800ea24:	1c43      	adds	r3, r0, #1
 800ea26:	d102      	bne.n	800ea2e <_write_r+0x1e>
 800ea28:	682b      	ldr	r3, [r5, #0]
 800ea2a:	b103      	cbz	r3, 800ea2e <_write_r+0x1e>
 800ea2c:	6023      	str	r3, [r4, #0]
 800ea2e:	bd38      	pop	{r3, r4, r5, pc}
 800ea30:	24007d48 	.word	0x24007d48

0800ea34 <__libc_init_array>:
 800ea34:	b570      	push	{r4, r5, r6, lr}
 800ea36:	4d0d      	ldr	r5, [pc, #52]	; (800ea6c <__libc_init_array+0x38>)
 800ea38:	4c0d      	ldr	r4, [pc, #52]	; (800ea70 <__libc_init_array+0x3c>)
 800ea3a:	1b64      	subs	r4, r4, r5
 800ea3c:	10a4      	asrs	r4, r4, #2
 800ea3e:	2600      	movs	r6, #0
 800ea40:	42a6      	cmp	r6, r4
 800ea42:	d109      	bne.n	800ea58 <__libc_init_array+0x24>
 800ea44:	4d0b      	ldr	r5, [pc, #44]	; (800ea74 <__libc_init_array+0x40>)
 800ea46:	4c0c      	ldr	r4, [pc, #48]	; (800ea78 <__libc_init_array+0x44>)
 800ea48:	f000 fe50 	bl	800f6ec <_init>
 800ea4c:	1b64      	subs	r4, r4, r5
 800ea4e:	10a4      	asrs	r4, r4, #2
 800ea50:	2600      	movs	r6, #0
 800ea52:	42a6      	cmp	r6, r4
 800ea54:	d105      	bne.n	800ea62 <__libc_init_array+0x2e>
 800ea56:	bd70      	pop	{r4, r5, r6, pc}
 800ea58:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea5c:	4798      	blx	r3
 800ea5e:	3601      	adds	r6, #1
 800ea60:	e7ee      	b.n	800ea40 <__libc_init_array+0xc>
 800ea62:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea66:	4798      	blx	r3
 800ea68:	3601      	adds	r6, #1
 800ea6a:	e7f2      	b.n	800ea52 <__libc_init_array+0x1e>
 800ea6c:	080122c0 	.word	0x080122c0
 800ea70:	080122c0 	.word	0x080122c0
 800ea74:	080122c0 	.word	0x080122c0
 800ea78:	080122c4 	.word	0x080122c4

0800ea7c <__retarget_lock_acquire_recursive>:
 800ea7c:	4770      	bx	lr

0800ea7e <__retarget_lock_release_recursive>:
 800ea7e:	4770      	bx	lr

0800ea80 <memcpy>:
 800ea80:	440a      	add	r2, r1
 800ea82:	4291      	cmp	r1, r2
 800ea84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea88:	d100      	bne.n	800ea8c <memcpy+0xc>
 800ea8a:	4770      	bx	lr
 800ea8c:	b510      	push	{r4, lr}
 800ea8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea96:	4291      	cmp	r1, r2
 800ea98:	d1f9      	bne.n	800ea8e <memcpy+0xe>
 800ea9a:	bd10      	pop	{r4, pc}

0800ea9c <__assert_func>:
 800ea9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea9e:	4614      	mov	r4, r2
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	4b09      	ldr	r3, [pc, #36]	; (800eac8 <__assert_func+0x2c>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	4605      	mov	r5, r0
 800eaa8:	68d8      	ldr	r0, [r3, #12]
 800eaaa:	b14c      	cbz	r4, 800eac0 <__assert_func+0x24>
 800eaac:	4b07      	ldr	r3, [pc, #28]	; (800eacc <__assert_func+0x30>)
 800eaae:	9100      	str	r1, [sp, #0]
 800eab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eab4:	4906      	ldr	r1, [pc, #24]	; (800ead0 <__assert_func+0x34>)
 800eab6:	462b      	mov	r3, r5
 800eab8:	f000 fc90 	bl	800f3dc <fiprintf>
 800eabc:	f000 fd46 	bl	800f54c <abort>
 800eac0:	4b04      	ldr	r3, [pc, #16]	; (800ead4 <__assert_func+0x38>)
 800eac2:	461c      	mov	r4, r3
 800eac4:	e7f3      	b.n	800eaae <__assert_func+0x12>
 800eac6:	bf00      	nop
 800eac8:	24000088 	.word	0x24000088
 800eacc:	08012251 	.word	0x08012251
 800ead0:	0801225e 	.word	0x0801225e
 800ead4:	0801228c 	.word	0x0801228c

0800ead8 <_free_r>:
 800ead8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eada:	2900      	cmp	r1, #0
 800eadc:	d044      	beq.n	800eb68 <_free_r+0x90>
 800eade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eae2:	9001      	str	r0, [sp, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f1a1 0404 	sub.w	r4, r1, #4
 800eaea:	bfb8      	it	lt
 800eaec:	18e4      	addlt	r4, r4, r3
 800eaee:	f000 f8e7 	bl	800ecc0 <__malloc_lock>
 800eaf2:	4a1e      	ldr	r2, [pc, #120]	; (800eb6c <_free_r+0x94>)
 800eaf4:	9801      	ldr	r0, [sp, #4]
 800eaf6:	6813      	ldr	r3, [r2, #0]
 800eaf8:	b933      	cbnz	r3, 800eb08 <_free_r+0x30>
 800eafa:	6063      	str	r3, [r4, #4]
 800eafc:	6014      	str	r4, [r2, #0]
 800eafe:	b003      	add	sp, #12
 800eb00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb04:	f000 b8e2 	b.w	800eccc <__malloc_unlock>
 800eb08:	42a3      	cmp	r3, r4
 800eb0a:	d908      	bls.n	800eb1e <_free_r+0x46>
 800eb0c:	6825      	ldr	r5, [r4, #0]
 800eb0e:	1961      	adds	r1, r4, r5
 800eb10:	428b      	cmp	r3, r1
 800eb12:	bf01      	itttt	eq
 800eb14:	6819      	ldreq	r1, [r3, #0]
 800eb16:	685b      	ldreq	r3, [r3, #4]
 800eb18:	1949      	addeq	r1, r1, r5
 800eb1a:	6021      	streq	r1, [r4, #0]
 800eb1c:	e7ed      	b.n	800eafa <_free_r+0x22>
 800eb1e:	461a      	mov	r2, r3
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	b10b      	cbz	r3, 800eb28 <_free_r+0x50>
 800eb24:	42a3      	cmp	r3, r4
 800eb26:	d9fa      	bls.n	800eb1e <_free_r+0x46>
 800eb28:	6811      	ldr	r1, [r2, #0]
 800eb2a:	1855      	adds	r5, r2, r1
 800eb2c:	42a5      	cmp	r5, r4
 800eb2e:	d10b      	bne.n	800eb48 <_free_r+0x70>
 800eb30:	6824      	ldr	r4, [r4, #0]
 800eb32:	4421      	add	r1, r4
 800eb34:	1854      	adds	r4, r2, r1
 800eb36:	42a3      	cmp	r3, r4
 800eb38:	6011      	str	r1, [r2, #0]
 800eb3a:	d1e0      	bne.n	800eafe <_free_r+0x26>
 800eb3c:	681c      	ldr	r4, [r3, #0]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	6053      	str	r3, [r2, #4]
 800eb42:	440c      	add	r4, r1
 800eb44:	6014      	str	r4, [r2, #0]
 800eb46:	e7da      	b.n	800eafe <_free_r+0x26>
 800eb48:	d902      	bls.n	800eb50 <_free_r+0x78>
 800eb4a:	230c      	movs	r3, #12
 800eb4c:	6003      	str	r3, [r0, #0]
 800eb4e:	e7d6      	b.n	800eafe <_free_r+0x26>
 800eb50:	6825      	ldr	r5, [r4, #0]
 800eb52:	1961      	adds	r1, r4, r5
 800eb54:	428b      	cmp	r3, r1
 800eb56:	bf04      	itt	eq
 800eb58:	6819      	ldreq	r1, [r3, #0]
 800eb5a:	685b      	ldreq	r3, [r3, #4]
 800eb5c:	6063      	str	r3, [r4, #4]
 800eb5e:	bf04      	itt	eq
 800eb60:	1949      	addeq	r1, r1, r5
 800eb62:	6021      	streq	r1, [r4, #0]
 800eb64:	6054      	str	r4, [r2, #4]
 800eb66:	e7ca      	b.n	800eafe <_free_r+0x26>
 800eb68:	b003      	add	sp, #12
 800eb6a:	bd30      	pop	{r4, r5, pc}
 800eb6c:	24007d50 	.word	0x24007d50

0800eb70 <malloc>:
 800eb70:	4b02      	ldr	r3, [pc, #8]	; (800eb7c <malloc+0xc>)
 800eb72:	4601      	mov	r1, r0
 800eb74:	6818      	ldr	r0, [r3, #0]
 800eb76:	f000 b823 	b.w	800ebc0 <_malloc_r>
 800eb7a:	bf00      	nop
 800eb7c:	24000088 	.word	0x24000088

0800eb80 <sbrk_aligned>:
 800eb80:	b570      	push	{r4, r5, r6, lr}
 800eb82:	4e0e      	ldr	r6, [pc, #56]	; (800ebbc <sbrk_aligned+0x3c>)
 800eb84:	460c      	mov	r4, r1
 800eb86:	6831      	ldr	r1, [r6, #0]
 800eb88:	4605      	mov	r5, r0
 800eb8a:	b911      	cbnz	r1, 800eb92 <sbrk_aligned+0x12>
 800eb8c:	f000 fcce 	bl	800f52c <_sbrk_r>
 800eb90:	6030      	str	r0, [r6, #0]
 800eb92:	4621      	mov	r1, r4
 800eb94:	4628      	mov	r0, r5
 800eb96:	f000 fcc9 	bl	800f52c <_sbrk_r>
 800eb9a:	1c43      	adds	r3, r0, #1
 800eb9c:	d00a      	beq.n	800ebb4 <sbrk_aligned+0x34>
 800eb9e:	1cc4      	adds	r4, r0, #3
 800eba0:	f024 0403 	bic.w	r4, r4, #3
 800eba4:	42a0      	cmp	r0, r4
 800eba6:	d007      	beq.n	800ebb8 <sbrk_aligned+0x38>
 800eba8:	1a21      	subs	r1, r4, r0
 800ebaa:	4628      	mov	r0, r5
 800ebac:	f000 fcbe 	bl	800f52c <_sbrk_r>
 800ebb0:	3001      	adds	r0, #1
 800ebb2:	d101      	bne.n	800ebb8 <sbrk_aligned+0x38>
 800ebb4:	f04f 34ff 	mov.w	r4, #4294967295
 800ebb8:	4620      	mov	r0, r4
 800ebba:	bd70      	pop	{r4, r5, r6, pc}
 800ebbc:	24007d54 	.word	0x24007d54

0800ebc0 <_malloc_r>:
 800ebc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebc4:	1ccd      	adds	r5, r1, #3
 800ebc6:	f025 0503 	bic.w	r5, r5, #3
 800ebca:	3508      	adds	r5, #8
 800ebcc:	2d0c      	cmp	r5, #12
 800ebce:	bf38      	it	cc
 800ebd0:	250c      	movcc	r5, #12
 800ebd2:	2d00      	cmp	r5, #0
 800ebd4:	4607      	mov	r7, r0
 800ebd6:	db01      	blt.n	800ebdc <_malloc_r+0x1c>
 800ebd8:	42a9      	cmp	r1, r5
 800ebda:	d905      	bls.n	800ebe8 <_malloc_r+0x28>
 800ebdc:	230c      	movs	r3, #12
 800ebde:	603b      	str	r3, [r7, #0]
 800ebe0:	2600      	movs	r6, #0
 800ebe2:	4630      	mov	r0, r6
 800ebe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebe8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ecbc <_malloc_r+0xfc>
 800ebec:	f000 f868 	bl	800ecc0 <__malloc_lock>
 800ebf0:	f8d8 3000 	ldr.w	r3, [r8]
 800ebf4:	461c      	mov	r4, r3
 800ebf6:	bb5c      	cbnz	r4, 800ec50 <_malloc_r+0x90>
 800ebf8:	4629      	mov	r1, r5
 800ebfa:	4638      	mov	r0, r7
 800ebfc:	f7ff ffc0 	bl	800eb80 <sbrk_aligned>
 800ec00:	1c43      	adds	r3, r0, #1
 800ec02:	4604      	mov	r4, r0
 800ec04:	d155      	bne.n	800ecb2 <_malloc_r+0xf2>
 800ec06:	f8d8 4000 	ldr.w	r4, [r8]
 800ec0a:	4626      	mov	r6, r4
 800ec0c:	2e00      	cmp	r6, #0
 800ec0e:	d145      	bne.n	800ec9c <_malloc_r+0xdc>
 800ec10:	2c00      	cmp	r4, #0
 800ec12:	d048      	beq.n	800eca6 <_malloc_r+0xe6>
 800ec14:	6823      	ldr	r3, [r4, #0]
 800ec16:	4631      	mov	r1, r6
 800ec18:	4638      	mov	r0, r7
 800ec1a:	eb04 0903 	add.w	r9, r4, r3
 800ec1e:	f000 fc85 	bl	800f52c <_sbrk_r>
 800ec22:	4581      	cmp	r9, r0
 800ec24:	d13f      	bne.n	800eca6 <_malloc_r+0xe6>
 800ec26:	6821      	ldr	r1, [r4, #0]
 800ec28:	1a6d      	subs	r5, r5, r1
 800ec2a:	4629      	mov	r1, r5
 800ec2c:	4638      	mov	r0, r7
 800ec2e:	f7ff ffa7 	bl	800eb80 <sbrk_aligned>
 800ec32:	3001      	adds	r0, #1
 800ec34:	d037      	beq.n	800eca6 <_malloc_r+0xe6>
 800ec36:	6823      	ldr	r3, [r4, #0]
 800ec38:	442b      	add	r3, r5
 800ec3a:	6023      	str	r3, [r4, #0]
 800ec3c:	f8d8 3000 	ldr.w	r3, [r8]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d038      	beq.n	800ecb6 <_malloc_r+0xf6>
 800ec44:	685a      	ldr	r2, [r3, #4]
 800ec46:	42a2      	cmp	r2, r4
 800ec48:	d12b      	bne.n	800eca2 <_malloc_r+0xe2>
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	605a      	str	r2, [r3, #4]
 800ec4e:	e00f      	b.n	800ec70 <_malloc_r+0xb0>
 800ec50:	6822      	ldr	r2, [r4, #0]
 800ec52:	1b52      	subs	r2, r2, r5
 800ec54:	d41f      	bmi.n	800ec96 <_malloc_r+0xd6>
 800ec56:	2a0b      	cmp	r2, #11
 800ec58:	d917      	bls.n	800ec8a <_malloc_r+0xca>
 800ec5a:	1961      	adds	r1, r4, r5
 800ec5c:	42a3      	cmp	r3, r4
 800ec5e:	6025      	str	r5, [r4, #0]
 800ec60:	bf18      	it	ne
 800ec62:	6059      	strne	r1, [r3, #4]
 800ec64:	6863      	ldr	r3, [r4, #4]
 800ec66:	bf08      	it	eq
 800ec68:	f8c8 1000 	streq.w	r1, [r8]
 800ec6c:	5162      	str	r2, [r4, r5]
 800ec6e:	604b      	str	r3, [r1, #4]
 800ec70:	4638      	mov	r0, r7
 800ec72:	f104 060b 	add.w	r6, r4, #11
 800ec76:	f000 f829 	bl	800eccc <__malloc_unlock>
 800ec7a:	f026 0607 	bic.w	r6, r6, #7
 800ec7e:	1d23      	adds	r3, r4, #4
 800ec80:	1af2      	subs	r2, r6, r3
 800ec82:	d0ae      	beq.n	800ebe2 <_malloc_r+0x22>
 800ec84:	1b9b      	subs	r3, r3, r6
 800ec86:	50a3      	str	r3, [r4, r2]
 800ec88:	e7ab      	b.n	800ebe2 <_malloc_r+0x22>
 800ec8a:	42a3      	cmp	r3, r4
 800ec8c:	6862      	ldr	r2, [r4, #4]
 800ec8e:	d1dd      	bne.n	800ec4c <_malloc_r+0x8c>
 800ec90:	f8c8 2000 	str.w	r2, [r8]
 800ec94:	e7ec      	b.n	800ec70 <_malloc_r+0xb0>
 800ec96:	4623      	mov	r3, r4
 800ec98:	6864      	ldr	r4, [r4, #4]
 800ec9a:	e7ac      	b.n	800ebf6 <_malloc_r+0x36>
 800ec9c:	4634      	mov	r4, r6
 800ec9e:	6876      	ldr	r6, [r6, #4]
 800eca0:	e7b4      	b.n	800ec0c <_malloc_r+0x4c>
 800eca2:	4613      	mov	r3, r2
 800eca4:	e7cc      	b.n	800ec40 <_malloc_r+0x80>
 800eca6:	230c      	movs	r3, #12
 800eca8:	603b      	str	r3, [r7, #0]
 800ecaa:	4638      	mov	r0, r7
 800ecac:	f000 f80e 	bl	800eccc <__malloc_unlock>
 800ecb0:	e797      	b.n	800ebe2 <_malloc_r+0x22>
 800ecb2:	6025      	str	r5, [r4, #0]
 800ecb4:	e7dc      	b.n	800ec70 <_malloc_r+0xb0>
 800ecb6:	605b      	str	r3, [r3, #4]
 800ecb8:	deff      	udf	#255	; 0xff
 800ecba:	bf00      	nop
 800ecbc:	24007d50 	.word	0x24007d50

0800ecc0 <__malloc_lock>:
 800ecc0:	4801      	ldr	r0, [pc, #4]	; (800ecc8 <__malloc_lock+0x8>)
 800ecc2:	f7ff bedb 	b.w	800ea7c <__retarget_lock_acquire_recursive>
 800ecc6:	bf00      	nop
 800ecc8:	24007d4c 	.word	0x24007d4c

0800eccc <__malloc_unlock>:
 800eccc:	4801      	ldr	r0, [pc, #4]	; (800ecd4 <__malloc_unlock+0x8>)
 800ecce:	f7ff bed6 	b.w	800ea7e <__retarget_lock_release_recursive>
 800ecd2:	bf00      	nop
 800ecd4:	24007d4c 	.word	0x24007d4c

0800ecd8 <__sfputc_r>:
 800ecd8:	6893      	ldr	r3, [r2, #8]
 800ecda:	3b01      	subs	r3, #1
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	b410      	push	{r4}
 800ece0:	6093      	str	r3, [r2, #8]
 800ece2:	da08      	bge.n	800ecf6 <__sfputc_r+0x1e>
 800ece4:	6994      	ldr	r4, [r2, #24]
 800ece6:	42a3      	cmp	r3, r4
 800ece8:	db01      	blt.n	800ecee <__sfputc_r+0x16>
 800ecea:	290a      	cmp	r1, #10
 800ecec:	d103      	bne.n	800ecf6 <__sfputc_r+0x1e>
 800ecee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecf2:	f000 bb85 	b.w	800f400 <__swbuf_r>
 800ecf6:	6813      	ldr	r3, [r2, #0]
 800ecf8:	1c58      	adds	r0, r3, #1
 800ecfa:	6010      	str	r0, [r2, #0]
 800ecfc:	7019      	strb	r1, [r3, #0]
 800ecfe:	4608      	mov	r0, r1
 800ed00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed04:	4770      	bx	lr

0800ed06 <__sfputs_r>:
 800ed06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed08:	4606      	mov	r6, r0
 800ed0a:	460f      	mov	r7, r1
 800ed0c:	4614      	mov	r4, r2
 800ed0e:	18d5      	adds	r5, r2, r3
 800ed10:	42ac      	cmp	r4, r5
 800ed12:	d101      	bne.n	800ed18 <__sfputs_r+0x12>
 800ed14:	2000      	movs	r0, #0
 800ed16:	e007      	b.n	800ed28 <__sfputs_r+0x22>
 800ed18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed1c:	463a      	mov	r2, r7
 800ed1e:	4630      	mov	r0, r6
 800ed20:	f7ff ffda 	bl	800ecd8 <__sfputc_r>
 800ed24:	1c43      	adds	r3, r0, #1
 800ed26:	d1f3      	bne.n	800ed10 <__sfputs_r+0xa>
 800ed28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed2c <_vfiprintf_r>:
 800ed2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed30:	460d      	mov	r5, r1
 800ed32:	b09d      	sub	sp, #116	; 0x74
 800ed34:	4614      	mov	r4, r2
 800ed36:	4698      	mov	r8, r3
 800ed38:	4606      	mov	r6, r0
 800ed3a:	b118      	cbz	r0, 800ed44 <_vfiprintf_r+0x18>
 800ed3c:	6a03      	ldr	r3, [r0, #32]
 800ed3e:	b90b      	cbnz	r3, 800ed44 <_vfiprintf_r+0x18>
 800ed40:	f7ff fd8e 	bl	800e860 <__sinit>
 800ed44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed46:	07d9      	lsls	r1, r3, #31
 800ed48:	d405      	bmi.n	800ed56 <_vfiprintf_r+0x2a>
 800ed4a:	89ab      	ldrh	r3, [r5, #12]
 800ed4c:	059a      	lsls	r2, r3, #22
 800ed4e:	d402      	bmi.n	800ed56 <_vfiprintf_r+0x2a>
 800ed50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed52:	f7ff fe93 	bl	800ea7c <__retarget_lock_acquire_recursive>
 800ed56:	89ab      	ldrh	r3, [r5, #12]
 800ed58:	071b      	lsls	r3, r3, #28
 800ed5a:	d501      	bpl.n	800ed60 <_vfiprintf_r+0x34>
 800ed5c:	692b      	ldr	r3, [r5, #16]
 800ed5e:	b99b      	cbnz	r3, 800ed88 <_vfiprintf_r+0x5c>
 800ed60:	4629      	mov	r1, r5
 800ed62:	4630      	mov	r0, r6
 800ed64:	f000 fb8a 	bl	800f47c <__swsetup_r>
 800ed68:	b170      	cbz	r0, 800ed88 <_vfiprintf_r+0x5c>
 800ed6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed6c:	07dc      	lsls	r4, r3, #31
 800ed6e:	d504      	bpl.n	800ed7a <_vfiprintf_r+0x4e>
 800ed70:	f04f 30ff 	mov.w	r0, #4294967295
 800ed74:	b01d      	add	sp, #116	; 0x74
 800ed76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed7a:	89ab      	ldrh	r3, [r5, #12]
 800ed7c:	0598      	lsls	r0, r3, #22
 800ed7e:	d4f7      	bmi.n	800ed70 <_vfiprintf_r+0x44>
 800ed80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed82:	f7ff fe7c 	bl	800ea7e <__retarget_lock_release_recursive>
 800ed86:	e7f3      	b.n	800ed70 <_vfiprintf_r+0x44>
 800ed88:	2300      	movs	r3, #0
 800ed8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed8c:	2320      	movs	r3, #32
 800ed8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed96:	2330      	movs	r3, #48	; 0x30
 800ed98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ef4c <_vfiprintf_r+0x220>
 800ed9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eda0:	f04f 0901 	mov.w	r9, #1
 800eda4:	4623      	mov	r3, r4
 800eda6:	469a      	mov	sl, r3
 800eda8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edac:	b10a      	cbz	r2, 800edb2 <_vfiprintf_r+0x86>
 800edae:	2a25      	cmp	r2, #37	; 0x25
 800edb0:	d1f9      	bne.n	800eda6 <_vfiprintf_r+0x7a>
 800edb2:	ebba 0b04 	subs.w	fp, sl, r4
 800edb6:	d00b      	beq.n	800edd0 <_vfiprintf_r+0xa4>
 800edb8:	465b      	mov	r3, fp
 800edba:	4622      	mov	r2, r4
 800edbc:	4629      	mov	r1, r5
 800edbe:	4630      	mov	r0, r6
 800edc0:	f7ff ffa1 	bl	800ed06 <__sfputs_r>
 800edc4:	3001      	adds	r0, #1
 800edc6:	f000 80a9 	beq.w	800ef1c <_vfiprintf_r+0x1f0>
 800edca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edcc:	445a      	add	r2, fp
 800edce:	9209      	str	r2, [sp, #36]	; 0x24
 800edd0:	f89a 3000 	ldrb.w	r3, [sl]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f000 80a1 	beq.w	800ef1c <_vfiprintf_r+0x1f0>
 800edda:	2300      	movs	r3, #0
 800eddc:	f04f 32ff 	mov.w	r2, #4294967295
 800ede0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ede4:	f10a 0a01 	add.w	sl, sl, #1
 800ede8:	9304      	str	r3, [sp, #16]
 800edea:	9307      	str	r3, [sp, #28]
 800edec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800edf0:	931a      	str	r3, [sp, #104]	; 0x68
 800edf2:	4654      	mov	r4, sl
 800edf4:	2205      	movs	r2, #5
 800edf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edfa:	4854      	ldr	r0, [pc, #336]	; (800ef4c <_vfiprintf_r+0x220>)
 800edfc:	f7f1 fa70 	bl	80002e0 <memchr>
 800ee00:	9a04      	ldr	r2, [sp, #16]
 800ee02:	b9d8      	cbnz	r0, 800ee3c <_vfiprintf_r+0x110>
 800ee04:	06d1      	lsls	r1, r2, #27
 800ee06:	bf44      	itt	mi
 800ee08:	2320      	movmi	r3, #32
 800ee0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee0e:	0713      	lsls	r3, r2, #28
 800ee10:	bf44      	itt	mi
 800ee12:	232b      	movmi	r3, #43	; 0x2b
 800ee14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee18:	f89a 3000 	ldrb.w	r3, [sl]
 800ee1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ee1e:	d015      	beq.n	800ee4c <_vfiprintf_r+0x120>
 800ee20:	9a07      	ldr	r2, [sp, #28]
 800ee22:	4654      	mov	r4, sl
 800ee24:	2000      	movs	r0, #0
 800ee26:	f04f 0c0a 	mov.w	ip, #10
 800ee2a:	4621      	mov	r1, r4
 800ee2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee30:	3b30      	subs	r3, #48	; 0x30
 800ee32:	2b09      	cmp	r3, #9
 800ee34:	d94d      	bls.n	800eed2 <_vfiprintf_r+0x1a6>
 800ee36:	b1b0      	cbz	r0, 800ee66 <_vfiprintf_r+0x13a>
 800ee38:	9207      	str	r2, [sp, #28]
 800ee3a:	e014      	b.n	800ee66 <_vfiprintf_r+0x13a>
 800ee3c:	eba0 0308 	sub.w	r3, r0, r8
 800ee40:	fa09 f303 	lsl.w	r3, r9, r3
 800ee44:	4313      	orrs	r3, r2
 800ee46:	9304      	str	r3, [sp, #16]
 800ee48:	46a2      	mov	sl, r4
 800ee4a:	e7d2      	b.n	800edf2 <_vfiprintf_r+0xc6>
 800ee4c:	9b03      	ldr	r3, [sp, #12]
 800ee4e:	1d19      	adds	r1, r3, #4
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	9103      	str	r1, [sp, #12]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	bfbb      	ittet	lt
 800ee58:	425b      	neglt	r3, r3
 800ee5a:	f042 0202 	orrlt.w	r2, r2, #2
 800ee5e:	9307      	strge	r3, [sp, #28]
 800ee60:	9307      	strlt	r3, [sp, #28]
 800ee62:	bfb8      	it	lt
 800ee64:	9204      	strlt	r2, [sp, #16]
 800ee66:	7823      	ldrb	r3, [r4, #0]
 800ee68:	2b2e      	cmp	r3, #46	; 0x2e
 800ee6a:	d10c      	bne.n	800ee86 <_vfiprintf_r+0x15a>
 800ee6c:	7863      	ldrb	r3, [r4, #1]
 800ee6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ee70:	d134      	bne.n	800eedc <_vfiprintf_r+0x1b0>
 800ee72:	9b03      	ldr	r3, [sp, #12]
 800ee74:	1d1a      	adds	r2, r3, #4
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	9203      	str	r2, [sp, #12]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	bfb8      	it	lt
 800ee7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee82:	3402      	adds	r4, #2
 800ee84:	9305      	str	r3, [sp, #20]
 800ee86:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ef5c <_vfiprintf_r+0x230>
 800ee8a:	7821      	ldrb	r1, [r4, #0]
 800ee8c:	2203      	movs	r2, #3
 800ee8e:	4650      	mov	r0, sl
 800ee90:	f7f1 fa26 	bl	80002e0 <memchr>
 800ee94:	b138      	cbz	r0, 800eea6 <_vfiprintf_r+0x17a>
 800ee96:	9b04      	ldr	r3, [sp, #16]
 800ee98:	eba0 000a 	sub.w	r0, r0, sl
 800ee9c:	2240      	movs	r2, #64	; 0x40
 800ee9e:	4082      	lsls	r2, r0
 800eea0:	4313      	orrs	r3, r2
 800eea2:	3401      	adds	r4, #1
 800eea4:	9304      	str	r3, [sp, #16]
 800eea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeaa:	4829      	ldr	r0, [pc, #164]	; (800ef50 <_vfiprintf_r+0x224>)
 800eeac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eeb0:	2206      	movs	r2, #6
 800eeb2:	f7f1 fa15 	bl	80002e0 <memchr>
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	d03f      	beq.n	800ef3a <_vfiprintf_r+0x20e>
 800eeba:	4b26      	ldr	r3, [pc, #152]	; (800ef54 <_vfiprintf_r+0x228>)
 800eebc:	bb1b      	cbnz	r3, 800ef06 <_vfiprintf_r+0x1da>
 800eebe:	9b03      	ldr	r3, [sp, #12]
 800eec0:	3307      	adds	r3, #7
 800eec2:	f023 0307 	bic.w	r3, r3, #7
 800eec6:	3308      	adds	r3, #8
 800eec8:	9303      	str	r3, [sp, #12]
 800eeca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eecc:	443b      	add	r3, r7
 800eece:	9309      	str	r3, [sp, #36]	; 0x24
 800eed0:	e768      	b.n	800eda4 <_vfiprintf_r+0x78>
 800eed2:	fb0c 3202 	mla	r2, ip, r2, r3
 800eed6:	460c      	mov	r4, r1
 800eed8:	2001      	movs	r0, #1
 800eeda:	e7a6      	b.n	800ee2a <_vfiprintf_r+0xfe>
 800eedc:	2300      	movs	r3, #0
 800eede:	3401      	adds	r4, #1
 800eee0:	9305      	str	r3, [sp, #20]
 800eee2:	4619      	mov	r1, r3
 800eee4:	f04f 0c0a 	mov.w	ip, #10
 800eee8:	4620      	mov	r0, r4
 800eeea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eeee:	3a30      	subs	r2, #48	; 0x30
 800eef0:	2a09      	cmp	r2, #9
 800eef2:	d903      	bls.n	800eefc <_vfiprintf_r+0x1d0>
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d0c6      	beq.n	800ee86 <_vfiprintf_r+0x15a>
 800eef8:	9105      	str	r1, [sp, #20]
 800eefa:	e7c4      	b.n	800ee86 <_vfiprintf_r+0x15a>
 800eefc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef00:	4604      	mov	r4, r0
 800ef02:	2301      	movs	r3, #1
 800ef04:	e7f0      	b.n	800eee8 <_vfiprintf_r+0x1bc>
 800ef06:	ab03      	add	r3, sp, #12
 800ef08:	9300      	str	r3, [sp, #0]
 800ef0a:	462a      	mov	r2, r5
 800ef0c:	4b12      	ldr	r3, [pc, #72]	; (800ef58 <_vfiprintf_r+0x22c>)
 800ef0e:	a904      	add	r1, sp, #16
 800ef10:	4630      	mov	r0, r6
 800ef12:	f3af 8000 	nop.w
 800ef16:	4607      	mov	r7, r0
 800ef18:	1c78      	adds	r0, r7, #1
 800ef1a:	d1d6      	bne.n	800eeca <_vfiprintf_r+0x19e>
 800ef1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef1e:	07d9      	lsls	r1, r3, #31
 800ef20:	d405      	bmi.n	800ef2e <_vfiprintf_r+0x202>
 800ef22:	89ab      	ldrh	r3, [r5, #12]
 800ef24:	059a      	lsls	r2, r3, #22
 800ef26:	d402      	bmi.n	800ef2e <_vfiprintf_r+0x202>
 800ef28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef2a:	f7ff fda8 	bl	800ea7e <__retarget_lock_release_recursive>
 800ef2e:	89ab      	ldrh	r3, [r5, #12]
 800ef30:	065b      	lsls	r3, r3, #25
 800ef32:	f53f af1d 	bmi.w	800ed70 <_vfiprintf_r+0x44>
 800ef36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef38:	e71c      	b.n	800ed74 <_vfiprintf_r+0x48>
 800ef3a:	ab03      	add	r3, sp, #12
 800ef3c:	9300      	str	r3, [sp, #0]
 800ef3e:	462a      	mov	r2, r5
 800ef40:	4b05      	ldr	r3, [pc, #20]	; (800ef58 <_vfiprintf_r+0x22c>)
 800ef42:	a904      	add	r1, sp, #16
 800ef44:	4630      	mov	r0, r6
 800ef46:	f000 f879 	bl	800f03c <_printf_i>
 800ef4a:	e7e4      	b.n	800ef16 <_vfiprintf_r+0x1ea>
 800ef4c:	0801228d 	.word	0x0801228d
 800ef50:	08012297 	.word	0x08012297
 800ef54:	00000000 	.word	0x00000000
 800ef58:	0800ed07 	.word	0x0800ed07
 800ef5c:	08012293 	.word	0x08012293

0800ef60 <_printf_common>:
 800ef60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef64:	4616      	mov	r6, r2
 800ef66:	4699      	mov	r9, r3
 800ef68:	688a      	ldr	r2, [r1, #8]
 800ef6a:	690b      	ldr	r3, [r1, #16]
 800ef6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef70:	4293      	cmp	r3, r2
 800ef72:	bfb8      	it	lt
 800ef74:	4613      	movlt	r3, r2
 800ef76:	6033      	str	r3, [r6, #0]
 800ef78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef7c:	4607      	mov	r7, r0
 800ef7e:	460c      	mov	r4, r1
 800ef80:	b10a      	cbz	r2, 800ef86 <_printf_common+0x26>
 800ef82:	3301      	adds	r3, #1
 800ef84:	6033      	str	r3, [r6, #0]
 800ef86:	6823      	ldr	r3, [r4, #0]
 800ef88:	0699      	lsls	r1, r3, #26
 800ef8a:	bf42      	ittt	mi
 800ef8c:	6833      	ldrmi	r3, [r6, #0]
 800ef8e:	3302      	addmi	r3, #2
 800ef90:	6033      	strmi	r3, [r6, #0]
 800ef92:	6825      	ldr	r5, [r4, #0]
 800ef94:	f015 0506 	ands.w	r5, r5, #6
 800ef98:	d106      	bne.n	800efa8 <_printf_common+0x48>
 800ef9a:	f104 0a19 	add.w	sl, r4, #25
 800ef9e:	68e3      	ldr	r3, [r4, #12]
 800efa0:	6832      	ldr	r2, [r6, #0]
 800efa2:	1a9b      	subs	r3, r3, r2
 800efa4:	42ab      	cmp	r3, r5
 800efa6:	dc26      	bgt.n	800eff6 <_printf_common+0x96>
 800efa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800efac:	1e13      	subs	r3, r2, #0
 800efae:	6822      	ldr	r2, [r4, #0]
 800efb0:	bf18      	it	ne
 800efb2:	2301      	movne	r3, #1
 800efb4:	0692      	lsls	r2, r2, #26
 800efb6:	d42b      	bmi.n	800f010 <_printf_common+0xb0>
 800efb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efbc:	4649      	mov	r1, r9
 800efbe:	4638      	mov	r0, r7
 800efc0:	47c0      	blx	r8
 800efc2:	3001      	adds	r0, #1
 800efc4:	d01e      	beq.n	800f004 <_printf_common+0xa4>
 800efc6:	6823      	ldr	r3, [r4, #0]
 800efc8:	6922      	ldr	r2, [r4, #16]
 800efca:	f003 0306 	and.w	r3, r3, #6
 800efce:	2b04      	cmp	r3, #4
 800efd0:	bf02      	ittt	eq
 800efd2:	68e5      	ldreq	r5, [r4, #12]
 800efd4:	6833      	ldreq	r3, [r6, #0]
 800efd6:	1aed      	subeq	r5, r5, r3
 800efd8:	68a3      	ldr	r3, [r4, #8]
 800efda:	bf0c      	ite	eq
 800efdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800efe0:	2500      	movne	r5, #0
 800efe2:	4293      	cmp	r3, r2
 800efe4:	bfc4      	itt	gt
 800efe6:	1a9b      	subgt	r3, r3, r2
 800efe8:	18ed      	addgt	r5, r5, r3
 800efea:	2600      	movs	r6, #0
 800efec:	341a      	adds	r4, #26
 800efee:	42b5      	cmp	r5, r6
 800eff0:	d11a      	bne.n	800f028 <_printf_common+0xc8>
 800eff2:	2000      	movs	r0, #0
 800eff4:	e008      	b.n	800f008 <_printf_common+0xa8>
 800eff6:	2301      	movs	r3, #1
 800eff8:	4652      	mov	r2, sl
 800effa:	4649      	mov	r1, r9
 800effc:	4638      	mov	r0, r7
 800effe:	47c0      	blx	r8
 800f000:	3001      	adds	r0, #1
 800f002:	d103      	bne.n	800f00c <_printf_common+0xac>
 800f004:	f04f 30ff 	mov.w	r0, #4294967295
 800f008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f00c:	3501      	adds	r5, #1
 800f00e:	e7c6      	b.n	800ef9e <_printf_common+0x3e>
 800f010:	18e1      	adds	r1, r4, r3
 800f012:	1c5a      	adds	r2, r3, #1
 800f014:	2030      	movs	r0, #48	; 0x30
 800f016:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f01a:	4422      	add	r2, r4
 800f01c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f024:	3302      	adds	r3, #2
 800f026:	e7c7      	b.n	800efb8 <_printf_common+0x58>
 800f028:	2301      	movs	r3, #1
 800f02a:	4622      	mov	r2, r4
 800f02c:	4649      	mov	r1, r9
 800f02e:	4638      	mov	r0, r7
 800f030:	47c0      	blx	r8
 800f032:	3001      	adds	r0, #1
 800f034:	d0e6      	beq.n	800f004 <_printf_common+0xa4>
 800f036:	3601      	adds	r6, #1
 800f038:	e7d9      	b.n	800efee <_printf_common+0x8e>
	...

0800f03c <_printf_i>:
 800f03c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f040:	7e0f      	ldrb	r7, [r1, #24]
 800f042:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f044:	2f78      	cmp	r7, #120	; 0x78
 800f046:	4691      	mov	r9, r2
 800f048:	4680      	mov	r8, r0
 800f04a:	460c      	mov	r4, r1
 800f04c:	469a      	mov	sl, r3
 800f04e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f052:	d807      	bhi.n	800f064 <_printf_i+0x28>
 800f054:	2f62      	cmp	r7, #98	; 0x62
 800f056:	d80a      	bhi.n	800f06e <_printf_i+0x32>
 800f058:	2f00      	cmp	r7, #0
 800f05a:	f000 80d4 	beq.w	800f206 <_printf_i+0x1ca>
 800f05e:	2f58      	cmp	r7, #88	; 0x58
 800f060:	f000 80c0 	beq.w	800f1e4 <_printf_i+0x1a8>
 800f064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f06c:	e03a      	b.n	800f0e4 <_printf_i+0xa8>
 800f06e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f072:	2b15      	cmp	r3, #21
 800f074:	d8f6      	bhi.n	800f064 <_printf_i+0x28>
 800f076:	a101      	add	r1, pc, #4	; (adr r1, 800f07c <_printf_i+0x40>)
 800f078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f07c:	0800f0d5 	.word	0x0800f0d5
 800f080:	0800f0e9 	.word	0x0800f0e9
 800f084:	0800f065 	.word	0x0800f065
 800f088:	0800f065 	.word	0x0800f065
 800f08c:	0800f065 	.word	0x0800f065
 800f090:	0800f065 	.word	0x0800f065
 800f094:	0800f0e9 	.word	0x0800f0e9
 800f098:	0800f065 	.word	0x0800f065
 800f09c:	0800f065 	.word	0x0800f065
 800f0a0:	0800f065 	.word	0x0800f065
 800f0a4:	0800f065 	.word	0x0800f065
 800f0a8:	0800f1ed 	.word	0x0800f1ed
 800f0ac:	0800f115 	.word	0x0800f115
 800f0b0:	0800f1a7 	.word	0x0800f1a7
 800f0b4:	0800f065 	.word	0x0800f065
 800f0b8:	0800f065 	.word	0x0800f065
 800f0bc:	0800f20f 	.word	0x0800f20f
 800f0c0:	0800f065 	.word	0x0800f065
 800f0c4:	0800f115 	.word	0x0800f115
 800f0c8:	0800f065 	.word	0x0800f065
 800f0cc:	0800f065 	.word	0x0800f065
 800f0d0:	0800f1af 	.word	0x0800f1af
 800f0d4:	682b      	ldr	r3, [r5, #0]
 800f0d6:	1d1a      	adds	r2, r3, #4
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	602a      	str	r2, [r5, #0]
 800f0dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	e09f      	b.n	800f228 <_printf_i+0x1ec>
 800f0e8:	6820      	ldr	r0, [r4, #0]
 800f0ea:	682b      	ldr	r3, [r5, #0]
 800f0ec:	0607      	lsls	r7, r0, #24
 800f0ee:	f103 0104 	add.w	r1, r3, #4
 800f0f2:	6029      	str	r1, [r5, #0]
 800f0f4:	d501      	bpl.n	800f0fa <_printf_i+0xbe>
 800f0f6:	681e      	ldr	r6, [r3, #0]
 800f0f8:	e003      	b.n	800f102 <_printf_i+0xc6>
 800f0fa:	0646      	lsls	r6, r0, #25
 800f0fc:	d5fb      	bpl.n	800f0f6 <_printf_i+0xba>
 800f0fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f102:	2e00      	cmp	r6, #0
 800f104:	da03      	bge.n	800f10e <_printf_i+0xd2>
 800f106:	232d      	movs	r3, #45	; 0x2d
 800f108:	4276      	negs	r6, r6
 800f10a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f10e:	485a      	ldr	r0, [pc, #360]	; (800f278 <_printf_i+0x23c>)
 800f110:	230a      	movs	r3, #10
 800f112:	e012      	b.n	800f13a <_printf_i+0xfe>
 800f114:	682b      	ldr	r3, [r5, #0]
 800f116:	6820      	ldr	r0, [r4, #0]
 800f118:	1d19      	adds	r1, r3, #4
 800f11a:	6029      	str	r1, [r5, #0]
 800f11c:	0605      	lsls	r5, r0, #24
 800f11e:	d501      	bpl.n	800f124 <_printf_i+0xe8>
 800f120:	681e      	ldr	r6, [r3, #0]
 800f122:	e002      	b.n	800f12a <_printf_i+0xee>
 800f124:	0641      	lsls	r1, r0, #25
 800f126:	d5fb      	bpl.n	800f120 <_printf_i+0xe4>
 800f128:	881e      	ldrh	r6, [r3, #0]
 800f12a:	4853      	ldr	r0, [pc, #332]	; (800f278 <_printf_i+0x23c>)
 800f12c:	2f6f      	cmp	r7, #111	; 0x6f
 800f12e:	bf0c      	ite	eq
 800f130:	2308      	moveq	r3, #8
 800f132:	230a      	movne	r3, #10
 800f134:	2100      	movs	r1, #0
 800f136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f13a:	6865      	ldr	r5, [r4, #4]
 800f13c:	60a5      	str	r5, [r4, #8]
 800f13e:	2d00      	cmp	r5, #0
 800f140:	bfa2      	ittt	ge
 800f142:	6821      	ldrge	r1, [r4, #0]
 800f144:	f021 0104 	bicge.w	r1, r1, #4
 800f148:	6021      	strge	r1, [r4, #0]
 800f14a:	b90e      	cbnz	r6, 800f150 <_printf_i+0x114>
 800f14c:	2d00      	cmp	r5, #0
 800f14e:	d04b      	beq.n	800f1e8 <_printf_i+0x1ac>
 800f150:	4615      	mov	r5, r2
 800f152:	fbb6 f1f3 	udiv	r1, r6, r3
 800f156:	fb03 6711 	mls	r7, r3, r1, r6
 800f15a:	5dc7      	ldrb	r7, [r0, r7]
 800f15c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f160:	4637      	mov	r7, r6
 800f162:	42bb      	cmp	r3, r7
 800f164:	460e      	mov	r6, r1
 800f166:	d9f4      	bls.n	800f152 <_printf_i+0x116>
 800f168:	2b08      	cmp	r3, #8
 800f16a:	d10b      	bne.n	800f184 <_printf_i+0x148>
 800f16c:	6823      	ldr	r3, [r4, #0]
 800f16e:	07de      	lsls	r6, r3, #31
 800f170:	d508      	bpl.n	800f184 <_printf_i+0x148>
 800f172:	6923      	ldr	r3, [r4, #16]
 800f174:	6861      	ldr	r1, [r4, #4]
 800f176:	4299      	cmp	r1, r3
 800f178:	bfde      	ittt	le
 800f17a:	2330      	movle	r3, #48	; 0x30
 800f17c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f180:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f184:	1b52      	subs	r2, r2, r5
 800f186:	6122      	str	r2, [r4, #16]
 800f188:	f8cd a000 	str.w	sl, [sp]
 800f18c:	464b      	mov	r3, r9
 800f18e:	aa03      	add	r2, sp, #12
 800f190:	4621      	mov	r1, r4
 800f192:	4640      	mov	r0, r8
 800f194:	f7ff fee4 	bl	800ef60 <_printf_common>
 800f198:	3001      	adds	r0, #1
 800f19a:	d14a      	bne.n	800f232 <_printf_i+0x1f6>
 800f19c:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a0:	b004      	add	sp, #16
 800f1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1a6:	6823      	ldr	r3, [r4, #0]
 800f1a8:	f043 0320 	orr.w	r3, r3, #32
 800f1ac:	6023      	str	r3, [r4, #0]
 800f1ae:	4833      	ldr	r0, [pc, #204]	; (800f27c <_printf_i+0x240>)
 800f1b0:	2778      	movs	r7, #120	; 0x78
 800f1b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f1b6:	6823      	ldr	r3, [r4, #0]
 800f1b8:	6829      	ldr	r1, [r5, #0]
 800f1ba:	061f      	lsls	r7, r3, #24
 800f1bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800f1c0:	d402      	bmi.n	800f1c8 <_printf_i+0x18c>
 800f1c2:	065f      	lsls	r7, r3, #25
 800f1c4:	bf48      	it	mi
 800f1c6:	b2b6      	uxthmi	r6, r6
 800f1c8:	07df      	lsls	r7, r3, #31
 800f1ca:	bf48      	it	mi
 800f1cc:	f043 0320 	orrmi.w	r3, r3, #32
 800f1d0:	6029      	str	r1, [r5, #0]
 800f1d2:	bf48      	it	mi
 800f1d4:	6023      	strmi	r3, [r4, #0]
 800f1d6:	b91e      	cbnz	r6, 800f1e0 <_printf_i+0x1a4>
 800f1d8:	6823      	ldr	r3, [r4, #0]
 800f1da:	f023 0320 	bic.w	r3, r3, #32
 800f1de:	6023      	str	r3, [r4, #0]
 800f1e0:	2310      	movs	r3, #16
 800f1e2:	e7a7      	b.n	800f134 <_printf_i+0xf8>
 800f1e4:	4824      	ldr	r0, [pc, #144]	; (800f278 <_printf_i+0x23c>)
 800f1e6:	e7e4      	b.n	800f1b2 <_printf_i+0x176>
 800f1e8:	4615      	mov	r5, r2
 800f1ea:	e7bd      	b.n	800f168 <_printf_i+0x12c>
 800f1ec:	682b      	ldr	r3, [r5, #0]
 800f1ee:	6826      	ldr	r6, [r4, #0]
 800f1f0:	6961      	ldr	r1, [r4, #20]
 800f1f2:	1d18      	adds	r0, r3, #4
 800f1f4:	6028      	str	r0, [r5, #0]
 800f1f6:	0635      	lsls	r5, r6, #24
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	d501      	bpl.n	800f200 <_printf_i+0x1c4>
 800f1fc:	6019      	str	r1, [r3, #0]
 800f1fe:	e002      	b.n	800f206 <_printf_i+0x1ca>
 800f200:	0670      	lsls	r0, r6, #25
 800f202:	d5fb      	bpl.n	800f1fc <_printf_i+0x1c0>
 800f204:	8019      	strh	r1, [r3, #0]
 800f206:	2300      	movs	r3, #0
 800f208:	6123      	str	r3, [r4, #16]
 800f20a:	4615      	mov	r5, r2
 800f20c:	e7bc      	b.n	800f188 <_printf_i+0x14c>
 800f20e:	682b      	ldr	r3, [r5, #0]
 800f210:	1d1a      	adds	r2, r3, #4
 800f212:	602a      	str	r2, [r5, #0]
 800f214:	681d      	ldr	r5, [r3, #0]
 800f216:	6862      	ldr	r2, [r4, #4]
 800f218:	2100      	movs	r1, #0
 800f21a:	4628      	mov	r0, r5
 800f21c:	f7f1 f860 	bl	80002e0 <memchr>
 800f220:	b108      	cbz	r0, 800f226 <_printf_i+0x1ea>
 800f222:	1b40      	subs	r0, r0, r5
 800f224:	6060      	str	r0, [r4, #4]
 800f226:	6863      	ldr	r3, [r4, #4]
 800f228:	6123      	str	r3, [r4, #16]
 800f22a:	2300      	movs	r3, #0
 800f22c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f230:	e7aa      	b.n	800f188 <_printf_i+0x14c>
 800f232:	6923      	ldr	r3, [r4, #16]
 800f234:	462a      	mov	r2, r5
 800f236:	4649      	mov	r1, r9
 800f238:	4640      	mov	r0, r8
 800f23a:	47d0      	blx	sl
 800f23c:	3001      	adds	r0, #1
 800f23e:	d0ad      	beq.n	800f19c <_printf_i+0x160>
 800f240:	6823      	ldr	r3, [r4, #0]
 800f242:	079b      	lsls	r3, r3, #30
 800f244:	d413      	bmi.n	800f26e <_printf_i+0x232>
 800f246:	68e0      	ldr	r0, [r4, #12]
 800f248:	9b03      	ldr	r3, [sp, #12]
 800f24a:	4298      	cmp	r0, r3
 800f24c:	bfb8      	it	lt
 800f24e:	4618      	movlt	r0, r3
 800f250:	e7a6      	b.n	800f1a0 <_printf_i+0x164>
 800f252:	2301      	movs	r3, #1
 800f254:	4632      	mov	r2, r6
 800f256:	4649      	mov	r1, r9
 800f258:	4640      	mov	r0, r8
 800f25a:	47d0      	blx	sl
 800f25c:	3001      	adds	r0, #1
 800f25e:	d09d      	beq.n	800f19c <_printf_i+0x160>
 800f260:	3501      	adds	r5, #1
 800f262:	68e3      	ldr	r3, [r4, #12]
 800f264:	9903      	ldr	r1, [sp, #12]
 800f266:	1a5b      	subs	r3, r3, r1
 800f268:	42ab      	cmp	r3, r5
 800f26a:	dcf2      	bgt.n	800f252 <_printf_i+0x216>
 800f26c:	e7eb      	b.n	800f246 <_printf_i+0x20a>
 800f26e:	2500      	movs	r5, #0
 800f270:	f104 0619 	add.w	r6, r4, #25
 800f274:	e7f5      	b.n	800f262 <_printf_i+0x226>
 800f276:	bf00      	nop
 800f278:	0801229e 	.word	0x0801229e
 800f27c:	080122af 	.word	0x080122af

0800f280 <__sflush_r>:
 800f280:	898a      	ldrh	r2, [r1, #12]
 800f282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f286:	4605      	mov	r5, r0
 800f288:	0710      	lsls	r0, r2, #28
 800f28a:	460c      	mov	r4, r1
 800f28c:	d458      	bmi.n	800f340 <__sflush_r+0xc0>
 800f28e:	684b      	ldr	r3, [r1, #4]
 800f290:	2b00      	cmp	r3, #0
 800f292:	dc05      	bgt.n	800f2a0 <__sflush_r+0x20>
 800f294:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f296:	2b00      	cmp	r3, #0
 800f298:	dc02      	bgt.n	800f2a0 <__sflush_r+0x20>
 800f29a:	2000      	movs	r0, #0
 800f29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2a2:	2e00      	cmp	r6, #0
 800f2a4:	d0f9      	beq.n	800f29a <__sflush_r+0x1a>
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2ac:	682f      	ldr	r7, [r5, #0]
 800f2ae:	6a21      	ldr	r1, [r4, #32]
 800f2b0:	602b      	str	r3, [r5, #0]
 800f2b2:	d032      	beq.n	800f31a <__sflush_r+0x9a>
 800f2b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f2b6:	89a3      	ldrh	r3, [r4, #12]
 800f2b8:	075a      	lsls	r2, r3, #29
 800f2ba:	d505      	bpl.n	800f2c8 <__sflush_r+0x48>
 800f2bc:	6863      	ldr	r3, [r4, #4]
 800f2be:	1ac0      	subs	r0, r0, r3
 800f2c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f2c2:	b10b      	cbz	r3, 800f2c8 <__sflush_r+0x48>
 800f2c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f2c6:	1ac0      	subs	r0, r0, r3
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2ce:	6a21      	ldr	r1, [r4, #32]
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	47b0      	blx	r6
 800f2d4:	1c43      	adds	r3, r0, #1
 800f2d6:	89a3      	ldrh	r3, [r4, #12]
 800f2d8:	d106      	bne.n	800f2e8 <__sflush_r+0x68>
 800f2da:	6829      	ldr	r1, [r5, #0]
 800f2dc:	291d      	cmp	r1, #29
 800f2de:	d82b      	bhi.n	800f338 <__sflush_r+0xb8>
 800f2e0:	4a29      	ldr	r2, [pc, #164]	; (800f388 <__sflush_r+0x108>)
 800f2e2:	410a      	asrs	r2, r1
 800f2e4:	07d6      	lsls	r6, r2, #31
 800f2e6:	d427      	bmi.n	800f338 <__sflush_r+0xb8>
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	6062      	str	r2, [r4, #4]
 800f2ec:	04d9      	lsls	r1, r3, #19
 800f2ee:	6922      	ldr	r2, [r4, #16]
 800f2f0:	6022      	str	r2, [r4, #0]
 800f2f2:	d504      	bpl.n	800f2fe <__sflush_r+0x7e>
 800f2f4:	1c42      	adds	r2, r0, #1
 800f2f6:	d101      	bne.n	800f2fc <__sflush_r+0x7c>
 800f2f8:	682b      	ldr	r3, [r5, #0]
 800f2fa:	b903      	cbnz	r3, 800f2fe <__sflush_r+0x7e>
 800f2fc:	6560      	str	r0, [r4, #84]	; 0x54
 800f2fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f300:	602f      	str	r7, [r5, #0]
 800f302:	2900      	cmp	r1, #0
 800f304:	d0c9      	beq.n	800f29a <__sflush_r+0x1a>
 800f306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f30a:	4299      	cmp	r1, r3
 800f30c:	d002      	beq.n	800f314 <__sflush_r+0x94>
 800f30e:	4628      	mov	r0, r5
 800f310:	f7ff fbe2 	bl	800ead8 <_free_r>
 800f314:	2000      	movs	r0, #0
 800f316:	6360      	str	r0, [r4, #52]	; 0x34
 800f318:	e7c0      	b.n	800f29c <__sflush_r+0x1c>
 800f31a:	2301      	movs	r3, #1
 800f31c:	4628      	mov	r0, r5
 800f31e:	47b0      	blx	r6
 800f320:	1c41      	adds	r1, r0, #1
 800f322:	d1c8      	bne.n	800f2b6 <__sflush_r+0x36>
 800f324:	682b      	ldr	r3, [r5, #0]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d0c5      	beq.n	800f2b6 <__sflush_r+0x36>
 800f32a:	2b1d      	cmp	r3, #29
 800f32c:	d001      	beq.n	800f332 <__sflush_r+0xb2>
 800f32e:	2b16      	cmp	r3, #22
 800f330:	d101      	bne.n	800f336 <__sflush_r+0xb6>
 800f332:	602f      	str	r7, [r5, #0]
 800f334:	e7b1      	b.n	800f29a <__sflush_r+0x1a>
 800f336:	89a3      	ldrh	r3, [r4, #12]
 800f338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f33c:	81a3      	strh	r3, [r4, #12]
 800f33e:	e7ad      	b.n	800f29c <__sflush_r+0x1c>
 800f340:	690f      	ldr	r7, [r1, #16]
 800f342:	2f00      	cmp	r7, #0
 800f344:	d0a9      	beq.n	800f29a <__sflush_r+0x1a>
 800f346:	0793      	lsls	r3, r2, #30
 800f348:	680e      	ldr	r6, [r1, #0]
 800f34a:	bf08      	it	eq
 800f34c:	694b      	ldreq	r3, [r1, #20]
 800f34e:	600f      	str	r7, [r1, #0]
 800f350:	bf18      	it	ne
 800f352:	2300      	movne	r3, #0
 800f354:	eba6 0807 	sub.w	r8, r6, r7
 800f358:	608b      	str	r3, [r1, #8]
 800f35a:	f1b8 0f00 	cmp.w	r8, #0
 800f35e:	dd9c      	ble.n	800f29a <__sflush_r+0x1a>
 800f360:	6a21      	ldr	r1, [r4, #32]
 800f362:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f364:	4643      	mov	r3, r8
 800f366:	463a      	mov	r2, r7
 800f368:	4628      	mov	r0, r5
 800f36a:	47b0      	blx	r6
 800f36c:	2800      	cmp	r0, #0
 800f36e:	dc06      	bgt.n	800f37e <__sflush_r+0xfe>
 800f370:	89a3      	ldrh	r3, [r4, #12]
 800f372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f376:	81a3      	strh	r3, [r4, #12]
 800f378:	f04f 30ff 	mov.w	r0, #4294967295
 800f37c:	e78e      	b.n	800f29c <__sflush_r+0x1c>
 800f37e:	4407      	add	r7, r0
 800f380:	eba8 0800 	sub.w	r8, r8, r0
 800f384:	e7e9      	b.n	800f35a <__sflush_r+0xda>
 800f386:	bf00      	nop
 800f388:	dfbffffe 	.word	0xdfbffffe

0800f38c <_fflush_r>:
 800f38c:	b538      	push	{r3, r4, r5, lr}
 800f38e:	690b      	ldr	r3, [r1, #16]
 800f390:	4605      	mov	r5, r0
 800f392:	460c      	mov	r4, r1
 800f394:	b913      	cbnz	r3, 800f39c <_fflush_r+0x10>
 800f396:	2500      	movs	r5, #0
 800f398:	4628      	mov	r0, r5
 800f39a:	bd38      	pop	{r3, r4, r5, pc}
 800f39c:	b118      	cbz	r0, 800f3a6 <_fflush_r+0x1a>
 800f39e:	6a03      	ldr	r3, [r0, #32]
 800f3a0:	b90b      	cbnz	r3, 800f3a6 <_fflush_r+0x1a>
 800f3a2:	f7ff fa5d 	bl	800e860 <__sinit>
 800f3a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d0f3      	beq.n	800f396 <_fflush_r+0xa>
 800f3ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f3b0:	07d0      	lsls	r0, r2, #31
 800f3b2:	d404      	bmi.n	800f3be <_fflush_r+0x32>
 800f3b4:	0599      	lsls	r1, r3, #22
 800f3b6:	d402      	bmi.n	800f3be <_fflush_r+0x32>
 800f3b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3ba:	f7ff fb5f 	bl	800ea7c <__retarget_lock_acquire_recursive>
 800f3be:	4628      	mov	r0, r5
 800f3c0:	4621      	mov	r1, r4
 800f3c2:	f7ff ff5d 	bl	800f280 <__sflush_r>
 800f3c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3c8:	07da      	lsls	r2, r3, #31
 800f3ca:	4605      	mov	r5, r0
 800f3cc:	d4e4      	bmi.n	800f398 <_fflush_r+0xc>
 800f3ce:	89a3      	ldrh	r3, [r4, #12]
 800f3d0:	059b      	lsls	r3, r3, #22
 800f3d2:	d4e1      	bmi.n	800f398 <_fflush_r+0xc>
 800f3d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3d6:	f7ff fb52 	bl	800ea7e <__retarget_lock_release_recursive>
 800f3da:	e7dd      	b.n	800f398 <_fflush_r+0xc>

0800f3dc <fiprintf>:
 800f3dc:	b40e      	push	{r1, r2, r3}
 800f3de:	b503      	push	{r0, r1, lr}
 800f3e0:	4601      	mov	r1, r0
 800f3e2:	ab03      	add	r3, sp, #12
 800f3e4:	4805      	ldr	r0, [pc, #20]	; (800f3fc <fiprintf+0x20>)
 800f3e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3ea:	6800      	ldr	r0, [r0, #0]
 800f3ec:	9301      	str	r3, [sp, #4]
 800f3ee:	f7ff fc9d 	bl	800ed2c <_vfiprintf_r>
 800f3f2:	b002      	add	sp, #8
 800f3f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3f8:	b003      	add	sp, #12
 800f3fa:	4770      	bx	lr
 800f3fc:	24000088 	.word	0x24000088

0800f400 <__swbuf_r>:
 800f400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f402:	460e      	mov	r6, r1
 800f404:	4614      	mov	r4, r2
 800f406:	4605      	mov	r5, r0
 800f408:	b118      	cbz	r0, 800f412 <__swbuf_r+0x12>
 800f40a:	6a03      	ldr	r3, [r0, #32]
 800f40c:	b90b      	cbnz	r3, 800f412 <__swbuf_r+0x12>
 800f40e:	f7ff fa27 	bl	800e860 <__sinit>
 800f412:	69a3      	ldr	r3, [r4, #24]
 800f414:	60a3      	str	r3, [r4, #8]
 800f416:	89a3      	ldrh	r3, [r4, #12]
 800f418:	071a      	lsls	r2, r3, #28
 800f41a:	d525      	bpl.n	800f468 <__swbuf_r+0x68>
 800f41c:	6923      	ldr	r3, [r4, #16]
 800f41e:	b31b      	cbz	r3, 800f468 <__swbuf_r+0x68>
 800f420:	6823      	ldr	r3, [r4, #0]
 800f422:	6922      	ldr	r2, [r4, #16]
 800f424:	1a98      	subs	r0, r3, r2
 800f426:	6963      	ldr	r3, [r4, #20]
 800f428:	b2f6      	uxtb	r6, r6
 800f42a:	4283      	cmp	r3, r0
 800f42c:	4637      	mov	r7, r6
 800f42e:	dc04      	bgt.n	800f43a <__swbuf_r+0x3a>
 800f430:	4621      	mov	r1, r4
 800f432:	4628      	mov	r0, r5
 800f434:	f7ff ffaa 	bl	800f38c <_fflush_r>
 800f438:	b9e0      	cbnz	r0, 800f474 <__swbuf_r+0x74>
 800f43a:	68a3      	ldr	r3, [r4, #8]
 800f43c:	3b01      	subs	r3, #1
 800f43e:	60a3      	str	r3, [r4, #8]
 800f440:	6823      	ldr	r3, [r4, #0]
 800f442:	1c5a      	adds	r2, r3, #1
 800f444:	6022      	str	r2, [r4, #0]
 800f446:	701e      	strb	r6, [r3, #0]
 800f448:	6962      	ldr	r2, [r4, #20]
 800f44a:	1c43      	adds	r3, r0, #1
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d004      	beq.n	800f45a <__swbuf_r+0x5a>
 800f450:	89a3      	ldrh	r3, [r4, #12]
 800f452:	07db      	lsls	r3, r3, #31
 800f454:	d506      	bpl.n	800f464 <__swbuf_r+0x64>
 800f456:	2e0a      	cmp	r6, #10
 800f458:	d104      	bne.n	800f464 <__swbuf_r+0x64>
 800f45a:	4621      	mov	r1, r4
 800f45c:	4628      	mov	r0, r5
 800f45e:	f7ff ff95 	bl	800f38c <_fflush_r>
 800f462:	b938      	cbnz	r0, 800f474 <__swbuf_r+0x74>
 800f464:	4638      	mov	r0, r7
 800f466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f468:	4621      	mov	r1, r4
 800f46a:	4628      	mov	r0, r5
 800f46c:	f000 f806 	bl	800f47c <__swsetup_r>
 800f470:	2800      	cmp	r0, #0
 800f472:	d0d5      	beq.n	800f420 <__swbuf_r+0x20>
 800f474:	f04f 37ff 	mov.w	r7, #4294967295
 800f478:	e7f4      	b.n	800f464 <__swbuf_r+0x64>
	...

0800f47c <__swsetup_r>:
 800f47c:	b538      	push	{r3, r4, r5, lr}
 800f47e:	4b2a      	ldr	r3, [pc, #168]	; (800f528 <__swsetup_r+0xac>)
 800f480:	4605      	mov	r5, r0
 800f482:	6818      	ldr	r0, [r3, #0]
 800f484:	460c      	mov	r4, r1
 800f486:	b118      	cbz	r0, 800f490 <__swsetup_r+0x14>
 800f488:	6a03      	ldr	r3, [r0, #32]
 800f48a:	b90b      	cbnz	r3, 800f490 <__swsetup_r+0x14>
 800f48c:	f7ff f9e8 	bl	800e860 <__sinit>
 800f490:	89a3      	ldrh	r3, [r4, #12]
 800f492:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f496:	0718      	lsls	r0, r3, #28
 800f498:	d422      	bmi.n	800f4e0 <__swsetup_r+0x64>
 800f49a:	06d9      	lsls	r1, r3, #27
 800f49c:	d407      	bmi.n	800f4ae <__swsetup_r+0x32>
 800f49e:	2309      	movs	r3, #9
 800f4a0:	602b      	str	r3, [r5, #0]
 800f4a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f4a6:	81a3      	strh	r3, [r4, #12]
 800f4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ac:	e034      	b.n	800f518 <__swsetup_r+0x9c>
 800f4ae:	0758      	lsls	r0, r3, #29
 800f4b0:	d512      	bpl.n	800f4d8 <__swsetup_r+0x5c>
 800f4b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4b4:	b141      	cbz	r1, 800f4c8 <__swsetup_r+0x4c>
 800f4b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4ba:	4299      	cmp	r1, r3
 800f4bc:	d002      	beq.n	800f4c4 <__swsetup_r+0x48>
 800f4be:	4628      	mov	r0, r5
 800f4c0:	f7ff fb0a 	bl	800ead8 <_free_r>
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	6363      	str	r3, [r4, #52]	; 0x34
 800f4c8:	89a3      	ldrh	r3, [r4, #12]
 800f4ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f4ce:	81a3      	strh	r3, [r4, #12]
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	6063      	str	r3, [r4, #4]
 800f4d4:	6923      	ldr	r3, [r4, #16]
 800f4d6:	6023      	str	r3, [r4, #0]
 800f4d8:	89a3      	ldrh	r3, [r4, #12]
 800f4da:	f043 0308 	orr.w	r3, r3, #8
 800f4de:	81a3      	strh	r3, [r4, #12]
 800f4e0:	6923      	ldr	r3, [r4, #16]
 800f4e2:	b94b      	cbnz	r3, 800f4f8 <__swsetup_r+0x7c>
 800f4e4:	89a3      	ldrh	r3, [r4, #12]
 800f4e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f4ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4ee:	d003      	beq.n	800f4f8 <__swsetup_r+0x7c>
 800f4f0:	4621      	mov	r1, r4
 800f4f2:	4628      	mov	r0, r5
 800f4f4:	f000 f857 	bl	800f5a6 <__smakebuf_r>
 800f4f8:	89a0      	ldrh	r0, [r4, #12]
 800f4fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f4fe:	f010 0301 	ands.w	r3, r0, #1
 800f502:	d00a      	beq.n	800f51a <__swsetup_r+0x9e>
 800f504:	2300      	movs	r3, #0
 800f506:	60a3      	str	r3, [r4, #8]
 800f508:	6963      	ldr	r3, [r4, #20]
 800f50a:	425b      	negs	r3, r3
 800f50c:	61a3      	str	r3, [r4, #24]
 800f50e:	6923      	ldr	r3, [r4, #16]
 800f510:	b943      	cbnz	r3, 800f524 <__swsetup_r+0xa8>
 800f512:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f516:	d1c4      	bne.n	800f4a2 <__swsetup_r+0x26>
 800f518:	bd38      	pop	{r3, r4, r5, pc}
 800f51a:	0781      	lsls	r1, r0, #30
 800f51c:	bf58      	it	pl
 800f51e:	6963      	ldrpl	r3, [r4, #20]
 800f520:	60a3      	str	r3, [r4, #8]
 800f522:	e7f4      	b.n	800f50e <__swsetup_r+0x92>
 800f524:	2000      	movs	r0, #0
 800f526:	e7f7      	b.n	800f518 <__swsetup_r+0x9c>
 800f528:	24000088 	.word	0x24000088

0800f52c <_sbrk_r>:
 800f52c:	b538      	push	{r3, r4, r5, lr}
 800f52e:	4d06      	ldr	r5, [pc, #24]	; (800f548 <_sbrk_r+0x1c>)
 800f530:	2300      	movs	r3, #0
 800f532:	4604      	mov	r4, r0
 800f534:	4608      	mov	r0, r1
 800f536:	602b      	str	r3, [r5, #0]
 800f538:	f7f1 fa4a 	bl	80009d0 <_sbrk>
 800f53c:	1c43      	adds	r3, r0, #1
 800f53e:	d102      	bne.n	800f546 <_sbrk_r+0x1a>
 800f540:	682b      	ldr	r3, [r5, #0]
 800f542:	b103      	cbz	r3, 800f546 <_sbrk_r+0x1a>
 800f544:	6023      	str	r3, [r4, #0]
 800f546:	bd38      	pop	{r3, r4, r5, pc}
 800f548:	24007d48 	.word	0x24007d48

0800f54c <abort>:
 800f54c:	b508      	push	{r3, lr}
 800f54e:	2006      	movs	r0, #6
 800f550:	f000 f88e 	bl	800f670 <raise>
 800f554:	2001      	movs	r0, #1
 800f556:	f7f1 f9c3 	bl	80008e0 <_exit>

0800f55a <__swhatbuf_r>:
 800f55a:	b570      	push	{r4, r5, r6, lr}
 800f55c:	460c      	mov	r4, r1
 800f55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f562:	2900      	cmp	r1, #0
 800f564:	b096      	sub	sp, #88	; 0x58
 800f566:	4615      	mov	r5, r2
 800f568:	461e      	mov	r6, r3
 800f56a:	da0d      	bge.n	800f588 <__swhatbuf_r+0x2e>
 800f56c:	89a3      	ldrh	r3, [r4, #12]
 800f56e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f572:	f04f 0100 	mov.w	r1, #0
 800f576:	bf0c      	ite	eq
 800f578:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f57c:	2340      	movne	r3, #64	; 0x40
 800f57e:	2000      	movs	r0, #0
 800f580:	6031      	str	r1, [r6, #0]
 800f582:	602b      	str	r3, [r5, #0]
 800f584:	b016      	add	sp, #88	; 0x58
 800f586:	bd70      	pop	{r4, r5, r6, pc}
 800f588:	466a      	mov	r2, sp
 800f58a:	f000 f879 	bl	800f680 <_fstat_r>
 800f58e:	2800      	cmp	r0, #0
 800f590:	dbec      	blt.n	800f56c <__swhatbuf_r+0x12>
 800f592:	9901      	ldr	r1, [sp, #4]
 800f594:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f598:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f59c:	4259      	negs	r1, r3
 800f59e:	4159      	adcs	r1, r3
 800f5a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5a4:	e7eb      	b.n	800f57e <__swhatbuf_r+0x24>

0800f5a6 <__smakebuf_r>:
 800f5a6:	898b      	ldrh	r3, [r1, #12]
 800f5a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5aa:	079d      	lsls	r5, r3, #30
 800f5ac:	4606      	mov	r6, r0
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	d507      	bpl.n	800f5c2 <__smakebuf_r+0x1c>
 800f5b2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f5b6:	6023      	str	r3, [r4, #0]
 800f5b8:	6123      	str	r3, [r4, #16]
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	6163      	str	r3, [r4, #20]
 800f5be:	b002      	add	sp, #8
 800f5c0:	bd70      	pop	{r4, r5, r6, pc}
 800f5c2:	ab01      	add	r3, sp, #4
 800f5c4:	466a      	mov	r2, sp
 800f5c6:	f7ff ffc8 	bl	800f55a <__swhatbuf_r>
 800f5ca:	9900      	ldr	r1, [sp, #0]
 800f5cc:	4605      	mov	r5, r0
 800f5ce:	4630      	mov	r0, r6
 800f5d0:	f7ff faf6 	bl	800ebc0 <_malloc_r>
 800f5d4:	b948      	cbnz	r0, 800f5ea <__smakebuf_r+0x44>
 800f5d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5da:	059a      	lsls	r2, r3, #22
 800f5dc:	d4ef      	bmi.n	800f5be <__smakebuf_r+0x18>
 800f5de:	f023 0303 	bic.w	r3, r3, #3
 800f5e2:	f043 0302 	orr.w	r3, r3, #2
 800f5e6:	81a3      	strh	r3, [r4, #12]
 800f5e8:	e7e3      	b.n	800f5b2 <__smakebuf_r+0xc>
 800f5ea:	89a3      	ldrh	r3, [r4, #12]
 800f5ec:	6020      	str	r0, [r4, #0]
 800f5ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5f2:	81a3      	strh	r3, [r4, #12]
 800f5f4:	9b00      	ldr	r3, [sp, #0]
 800f5f6:	6163      	str	r3, [r4, #20]
 800f5f8:	9b01      	ldr	r3, [sp, #4]
 800f5fa:	6120      	str	r0, [r4, #16]
 800f5fc:	b15b      	cbz	r3, 800f616 <__smakebuf_r+0x70>
 800f5fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f602:	4630      	mov	r0, r6
 800f604:	f000 f84e 	bl	800f6a4 <_isatty_r>
 800f608:	b128      	cbz	r0, 800f616 <__smakebuf_r+0x70>
 800f60a:	89a3      	ldrh	r3, [r4, #12]
 800f60c:	f023 0303 	bic.w	r3, r3, #3
 800f610:	f043 0301 	orr.w	r3, r3, #1
 800f614:	81a3      	strh	r3, [r4, #12]
 800f616:	89a3      	ldrh	r3, [r4, #12]
 800f618:	431d      	orrs	r5, r3
 800f61a:	81a5      	strh	r5, [r4, #12]
 800f61c:	e7cf      	b.n	800f5be <__smakebuf_r+0x18>

0800f61e <_raise_r>:
 800f61e:	291f      	cmp	r1, #31
 800f620:	b538      	push	{r3, r4, r5, lr}
 800f622:	4604      	mov	r4, r0
 800f624:	460d      	mov	r5, r1
 800f626:	d904      	bls.n	800f632 <_raise_r+0x14>
 800f628:	2316      	movs	r3, #22
 800f62a:	6003      	str	r3, [r0, #0]
 800f62c:	f04f 30ff 	mov.w	r0, #4294967295
 800f630:	bd38      	pop	{r3, r4, r5, pc}
 800f632:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f634:	b112      	cbz	r2, 800f63c <_raise_r+0x1e>
 800f636:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f63a:	b94b      	cbnz	r3, 800f650 <_raise_r+0x32>
 800f63c:	4620      	mov	r0, r4
 800f63e:	f000 f853 	bl	800f6e8 <_getpid_r>
 800f642:	462a      	mov	r2, r5
 800f644:	4601      	mov	r1, r0
 800f646:	4620      	mov	r0, r4
 800f648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f64c:	f000 b83a 	b.w	800f6c4 <_kill_r>
 800f650:	2b01      	cmp	r3, #1
 800f652:	d00a      	beq.n	800f66a <_raise_r+0x4c>
 800f654:	1c59      	adds	r1, r3, #1
 800f656:	d103      	bne.n	800f660 <_raise_r+0x42>
 800f658:	2316      	movs	r3, #22
 800f65a:	6003      	str	r3, [r0, #0]
 800f65c:	2001      	movs	r0, #1
 800f65e:	e7e7      	b.n	800f630 <_raise_r+0x12>
 800f660:	2400      	movs	r4, #0
 800f662:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f666:	4628      	mov	r0, r5
 800f668:	4798      	blx	r3
 800f66a:	2000      	movs	r0, #0
 800f66c:	e7e0      	b.n	800f630 <_raise_r+0x12>
	...

0800f670 <raise>:
 800f670:	4b02      	ldr	r3, [pc, #8]	; (800f67c <raise+0xc>)
 800f672:	4601      	mov	r1, r0
 800f674:	6818      	ldr	r0, [r3, #0]
 800f676:	f7ff bfd2 	b.w	800f61e <_raise_r>
 800f67a:	bf00      	nop
 800f67c:	24000088 	.word	0x24000088

0800f680 <_fstat_r>:
 800f680:	b538      	push	{r3, r4, r5, lr}
 800f682:	4d07      	ldr	r5, [pc, #28]	; (800f6a0 <_fstat_r+0x20>)
 800f684:	2300      	movs	r3, #0
 800f686:	4604      	mov	r4, r0
 800f688:	4608      	mov	r0, r1
 800f68a:	4611      	mov	r1, r2
 800f68c:	602b      	str	r3, [r5, #0]
 800f68e:	f7f1 f976 	bl	800097e <_fstat>
 800f692:	1c43      	adds	r3, r0, #1
 800f694:	d102      	bne.n	800f69c <_fstat_r+0x1c>
 800f696:	682b      	ldr	r3, [r5, #0]
 800f698:	b103      	cbz	r3, 800f69c <_fstat_r+0x1c>
 800f69a:	6023      	str	r3, [r4, #0]
 800f69c:	bd38      	pop	{r3, r4, r5, pc}
 800f69e:	bf00      	nop
 800f6a0:	24007d48 	.word	0x24007d48

0800f6a4 <_isatty_r>:
 800f6a4:	b538      	push	{r3, r4, r5, lr}
 800f6a6:	4d06      	ldr	r5, [pc, #24]	; (800f6c0 <_isatty_r+0x1c>)
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	4604      	mov	r4, r0
 800f6ac:	4608      	mov	r0, r1
 800f6ae:	602b      	str	r3, [r5, #0]
 800f6b0:	f7f1 f975 	bl	800099e <_isatty>
 800f6b4:	1c43      	adds	r3, r0, #1
 800f6b6:	d102      	bne.n	800f6be <_isatty_r+0x1a>
 800f6b8:	682b      	ldr	r3, [r5, #0]
 800f6ba:	b103      	cbz	r3, 800f6be <_isatty_r+0x1a>
 800f6bc:	6023      	str	r3, [r4, #0]
 800f6be:	bd38      	pop	{r3, r4, r5, pc}
 800f6c0:	24007d48 	.word	0x24007d48

0800f6c4 <_kill_r>:
 800f6c4:	b538      	push	{r3, r4, r5, lr}
 800f6c6:	4d07      	ldr	r5, [pc, #28]	; (800f6e4 <_kill_r+0x20>)
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	4608      	mov	r0, r1
 800f6ce:	4611      	mov	r1, r2
 800f6d0:	602b      	str	r3, [r5, #0]
 800f6d2:	f7f1 f8f3 	bl	80008bc <_kill>
 800f6d6:	1c43      	adds	r3, r0, #1
 800f6d8:	d102      	bne.n	800f6e0 <_kill_r+0x1c>
 800f6da:	682b      	ldr	r3, [r5, #0]
 800f6dc:	b103      	cbz	r3, 800f6e0 <_kill_r+0x1c>
 800f6de:	6023      	str	r3, [r4, #0]
 800f6e0:	bd38      	pop	{r3, r4, r5, pc}
 800f6e2:	bf00      	nop
 800f6e4:	24007d48 	.word	0x24007d48

0800f6e8 <_getpid_r>:
 800f6e8:	f7f1 b8e0 	b.w	80008ac <_getpid>

0800f6ec <_init>:
 800f6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ee:	bf00      	nop
 800f6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6f2:	bc08      	pop	{r3}
 800f6f4:	469e      	mov	lr, r3
 800f6f6:	4770      	bx	lr

0800f6f8 <_fini>:
 800f6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6fa:	bf00      	nop
 800f6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6fe:	bc08      	pop	{r3}
 800f700:	469e      	mov	lr, r3
 800f702:	4770      	bx	lr
